<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2023-01-07T17:12:06.000Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>单链表反转</title>
    <link href="https://aliveseven.github.io/posts/6b96a7/"/>
    <id>https://aliveseven.github.io/posts/6b96a7/</id>
    <published>2023-08-15T14:52:25.957Z</published>
    <updated>2023-01-07T17:12:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>先声明一个新的节点pre = null，然后声明一个新的节点cur = head，把头节点赋值给它，然后声明一个中间节点temp = cur.next，也就是将下一个节点赋值给中间节点temp</p><p>然后，赋值完之后再对cur.next进行操作，领cur.next = pre，也就是将当前节点的下一个节点，就是当前传过来的节点，比如一开始不是传入头节点吗，那么这时就让头节点的下一个节点指向pre，也就是null，然后再对pre进行操作，领pre = cur，主要是为下一次的迭代做好铺路，再让cur = temp，就是将开头中间节点保存的那个节点赋值给cur。以上的这些操作一直循环执行，直到cur指向null</p><p>最后，这些操作完之后，此时pre就是最后的节点了，返回pre</p><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.<span class="property">next</span> == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明中间变量</span></span><br><span class="line">        <span class="keyword">let</span> cur = head</span><br><span class="line">        <span class="keyword">let</span> pre = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">let</span> next = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 把下一个节点赋给next</span></span><br><span class="line">            next = cur.<span class="property">next</span></span><br><span class="line">            <span class="comment">// 再把下一个节点赋予中间值pre</span></span><br><span class="line">            cur.<span class="property">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h8fn4jh21gj30r30os79m.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h2&gt;&lt;p&gt;先声明一个新的节点pre = null，然后声明一个新的节点cur = head，把头节点赋值给它，然后声明一个中间节点te</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="算法" scheme="https://aliveseven.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>解决原生安卓出现 WiFi 网络连接受限问题</title>
    <link href="https://aliveseven.github.io/posts/702abf9d/"/>
    <id>https://aliveseven.github.io/posts/702abf9d/</id>
    <published>2023-08-15T14:52:25.953Z</published>
    <updated>2023-01-21T07:25:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决原生安卓出现-WiFi-网络连接受限问题"><a href="#解决原生安卓出现-WiFi-网络连接受限问题" class="headerlink" title="解决原生安卓出现 WiFi 网络连接受限问题"></a>解决原生安卓出现 WiFi 网络连接受限问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主在香港之前买了一部POCO X3 PRO，本来想着想试试小米的国外产品，整体来说在境外的体验还不错，但是回到大陆的时候，连接国内的WIFI出了个问题，网络连接受限，而且网速被限制了，这样就让我很难受，而且手机是小米的，也不好Root，为了解决这个问题，我也是费尽心思，去下载了一个叫ADB的工具包，然后对其进行修复。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>这里主要讲述一下手机没有ROOT的情况下的解决方案，有ROOT的暂时不做讨论</strong></p><p>先到网上下载ADB工具包，然后解压到C盘或者随便某个盘的位置。</p><p><strong>这里我直接放链接吧！</strong></p><p>链接: <a href="https://pan.baidu.com/s/1mfrgDH5q_tedQnfGYbV91A">https://pan.baidu.com/s/1mfrgDH5q_tedQnfGYbV91A</a> 提取码: tha6 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>然后解压之后，需要打开电脑环境配置一些adb命令，比如我这里放在C盘的adb文件夹下面</p><p><img src="https://pic.imgdb.cn/item/63cac220be43e0d30e636603.jpg"></p><p>那么我就要把这个adb.exe的所在路径<strong>C:\adb</strong>，配到系统环境变量里面去，类似于配JAVA的JDK，Vue的Node环境一样差不多而已。</p><p><img src="https://pic.imgdb.cn/item/63cac2cfbe43e0d30e646d64.jpg"></p><p>配置好之后，手机打开开发者模式，具体操作就是点击我的手机→全部参数→多次点击<strong>MIUI版本</strong>的那个框框，然后就进入开发者模式了，然后手机开启USB调试模式，<strong>打开USB调试（安全设置）</strong>，这个部分很重要，如果没有打开USB调试安全设置，会报JAVA错，然后打开接着运行 CMD 输入下面的命令即可。</p><p><strong>删除默认的地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_https_url</span><br><span class="line">adb shell settings delete global captive_portal_http_url</span><br></pre></td></tr></table></figure><p><strong>修改新的地址</strong></p><p>由于我的手机是MIUI系统，所以用了MIUI的服务器地址，其他同学可以去找自己手机型号的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception occurred while executing &#x27;delete&#x27;:</span><br><span class="line"></span><br><span class="line">java.lang.SecurityException: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception occurred while executing &#x27;put&#x27;:</span><br><span class="line"></span><br><span class="line">java.lang.SecurityException: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63cac42fbe43e0d30e6684bf.jpg"></p><p>这两个问题都是没有打开<strong>USB调试（安全设置）</strong>导致的，打开之后重新输入即可。或者在开发者选项中开启 <strong>禁止权限监控</strong>（OPPO、Realme手机），再次执行就没问题。</p><p>完成效果</p><p><img src="https://pic.imgdb.cn/item/63cac4a5be43e0d30e672d80.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决原生安卓出现-WiFi-网络连接受限问题&quot;&gt;&lt;a href=&quot;#解决原生安卓出现-WiFi-网络连接受限问题&quot; class=&quot;headerlink&quot; title=&quot;解决原生安卓出现 WiFi 网络连接受限问题&quot;&gt;&lt;/a&gt;解决原生安卓出现 WiFi 网络连接受限</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>SQL关联表查询，多表查询</title>
    <link href="https://aliveseven.github.io/posts/7128cd70/"/>
    <id>https://aliveseven.github.io/posts/7128cd70/</id>
    <published>2023-08-15T14:52:25.952Z</published>
    <updated>2023-01-07T16:59:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL关联表查询，多表查询"><a href="#SQL关联表查询，多表查询" class="headerlink" title="SQL关联表查询，多表查询"></a>SQL关联表查询，多表查询</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行设计和开发的时候，很多时候需要用到表查询，多个表关联查询能够很大简化我们获取数据的业务，这里主要讲一下SQL的左连接、右连接、内连接（left join , right join , inner join）    </p><p>案例表：</p><ol><li>sys_role_menu</li></ol><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mgzvrqiyj30hy0avtci.jpg"></p><ol start="2"><li>sys_role</li></ol><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mh09l6r3j30ik07ndk1.jpg"></p><h2 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h2><ol><li>左连接，不考虑where条件下，left join 会把左表所有数据查询出来，on及其后面的条件仅仅会影响右表的数据(符合就显示,不符合全部为null)</li><li>左连接关注的是左边的主表数据，不应该把on后面的从表中的条件加到where后，这样会影响原有主表中的数据</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>select * from A left join B on A.aid = B.bid</strong></p><p>意思是：</p><p><strong>首先取出A表中所有数据，然后再加上与A，B匹配的的数据</strong></p><p><strong>表A：</strong></p><table><thead><tr><th>aid</th><th>ax</th></tr></thead><tbody><tr><td>1</td><td>A1</td></tr><tr><td>2</td><td>A2</td></tr><tr><td>3</td><td>A3</td></tr></tbody></table><p><strong>表B：</strong></p><table><thead><tr><th>bid</th><th>bx</th></tr></thead><tbody><tr><td>1</td><td>B1</td></tr><tr><td>2</td><td>B2</td></tr><tr><td>4</td><td>B4</td></tr></tbody></table><p><strong>那么LEFT JOIN指：</strong></p><table><thead><tr><th>aid</th><th>ax</th><th>bid</th><th>bx</th></tr></thead><tbody><tr><td>1</td><td>A1</td><td>1</td><td>B1</td></tr><tr><td>2</td><td>A2</td><td>2</td><td>B2</td></tr><tr><td>3</td><td>A3</td><td></td><td></td></tr></tbody></table><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mhnqmsehj30f80dz76x.jpg"></p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mgrl7464j30wd0kx7e8.jpg"></p><h2 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h2><p>和左连接差不多，右连接就是关注右边表的数据，先把右边表的数据查询出来，on及其后面的条件仅仅会影响左表的数据(符合就显示,不符合全部为null)</p><p><strong>select * from A right join B on A.aid = B.bid</strong></p><p>这里右边表是B，先把B表中的全部数据取出来，然后再加上与A，B匹配的数据。如果没有匹配的就是空</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mhzqgb3nj30hn0epacq.jpg"></p><h3 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2"></a>案例2</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mi1w40jxj30oj0lcwmj.jpg"></p><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><p>和左右连接不一样，INNER JOIN是取公共部分的，不匹配的部分就直接去掉，而不是空NULL了。</p><p>公共的部分就是ON后面的那个连接语句，比如案例中的aid和bid相同的那个部分就是公共的部分</p><p><strong>select * from A inner join B on A.aid = B.bid</strong></p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mi437tnij30bi0e1jtc.jpg" alt="image.png"></p><h3 id="案例2-2"><a href="#案例2-2" class="headerlink" title="案例2"></a>案例2</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mi4naynmj30ko0i9ahd.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL关联表查询，多表查询&quot;&gt;&lt;a href=&quot;#SQL关联表查询，多表查询&quot; class=&quot;headerlink&quot; title=&quot;SQL关联表查询，多表查询&quot;&gt;&lt;/a&gt;SQL关联表查询，多表查询&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://aliveseven.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot文件上传大小限制问题</title>
    <link href="https://aliveseven.github.io/posts/6c4f14c4/"/>
    <id>https://aliveseven.github.io/posts/6c4f14c4/</id>
    <published>2023-08-15T14:52:25.950Z</published>
    <updated>2023-01-13T14:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot文件上传大小限制问题"><a href="#SpringBoot文件上传大小限制问题" class="headerlink" title="SpringBoot文件上传大小限制问题"></a>SpringBoot文件上传大小限制问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用SpringBoot开发后台系统的时候，需要开发文件上传业务，但是上传大文件控制台会报错：<code>The field files exceeds its maximum permitted size</code>。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>一般SpringBoot的文件上传大小限制在1M以下，单个请求中最多可容纳10M大小的文件流数据，这个大小对于我们实际开发来说实在太小了。</p><p>解决办法也很简单，在配置文件application.properties里面加入相关配置即可</p><p><img src="https://pic.imgdb.cn/item/63c16624be43e0d30e83ac82.jpg"></p><h3 id="Spring-Boot-1-3-x或之前版本，配置如下："><a href="#Spring-Boot-1-3-x或之前版本，配置如下：" class="headerlink" title="Spring Boot 1.3.x或之前版本，配置如下："></a>Spring Boot 1.3.x或之前版本，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipart.maxFileSize=100Mb</span><br><span class="line">multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-1-4-x版本及以上，配置如下："><a href="#Spring-Boot-1-4-x版本及以上，配置如下：" class="headerlink" title="Spring Boot 1.4.x版本及以上，配置如下："></a>Spring Boot 1.4.x版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.http.multipart.maxFileSize=100Mb</span><br><span class="line">spring.http.multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-2-0版本及以上，配置如下："><a href="#Spring-Boot-2-0版本及以上，配置如下：" class="headerlink" title="Spring Boot 2.0版本及以上，配置如下："></a>Spring Boot 2.0版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-file-size = 100MB</span><br><span class="line">spring.servlet.multipart.max-request-size = 1000MB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;a href=&quot;#SpringBoot文件上传大小限制问题&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;/a&gt;SpringBoot文件上传大小限制问题&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Springboot中通过模糊搜索Redis中的key进行批量删除数据</title>
    <link href="https://aliveseven.github.io/posts/3b8f5bd1/"/>
    <id>https://aliveseven.github.io/posts/3b8f5bd1/</id>
    <published>2023-08-15T14:52:25.949Z</published>
    <updated>2023-01-31T17:32:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot中通过模糊搜索Redis中的key进行批量删除数据"><a href="#Springboot中通过模糊搜索Redis中的key进行批量删除数据" class="headerlink" title="Springboot中通过模糊搜索Redis中的key进行批量删除数据"></a>Springboot中通过模糊搜索Redis中的key进行批量删除数据</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发后台的时候，通过Redis对分页查询的数据进行了缓存，但是数据在做新增、删除、更新的时候，为了保持Redis中缓存的数据与数据库中的数据保持一致性，<strong>需要对缓存也进行更新处理</strong>。</p><p>这里我用的更新方法也是非常简单暴力，就在查询的时候，会对Redis进行一次查询，根据分页的页码和相对应的表。<strong>如果查到的缓存为空，那么就会去数据库查询，然后再设置缓存。</strong></p><p>而在增删改的接口上，我是<strong>直接将缓存删除</strong>，等到调用分页查询数据的接口的时候再去重新设置一次缓存，以此保持数据的一致性。</p><p>具体可以看看下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用/page接口，参数有PageNum、pageSize，还有其他非必须参数进行模糊查询</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum ,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;pageSize&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;username&quot;, required = false)</span> String username,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;email&quot;, required = false)</span> String email,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;phone&quot;, required = false)</span> String phone)</span>&#123;</span><br><span class="line">        IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum , pageSize);</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(username),<span class="string">&quot;username&quot;</span> , username);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(email),<span class="string">&quot;email&quot;</span> , email);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(phone),<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span> &amp;&amp; email == <span class="string">&quot;&quot;</span> &amp;&amp; phone == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="comment">// 查询缓存</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> Constants.USER_PAGE_KEY + <span class="string">&quot;_&quot;</span> + String.valueOf(pageNum);</span><br><span class="line">                <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> iRedisService.getString(userKey);</span><br><span class="line">                <span class="comment">// 如果缓存存在，不为空，拿出来</span></span><br><span class="line">                <span class="keyword">if</span>(!StrUtil.isBlank(res))&#123;</span><br><span class="line">                        <span class="comment">// 把String类型转成JSON类型再返回</span></span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSONUtil.parseObj(res);</span><br><span class="line">                        <span class="type">Integer</span> <span class="variable">nowSize</span> <span class="operator">=</span> (Integer) data.get(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(nowSize != pageSize)&#123;</span><br><span class="line">                                <span class="comment">// 页码发生变化的时候，清除缓存重新设置</span></span><br><span class="line">                                iRedisService.flushRedis(userKey);</span><br><span class="line">                                <span class="comment">// 重新查询数据库</span></span><br><span class="line">                                IPage&lt;User&gt; userIPage = userService.page(page, queryWrapper);</span><br><span class="line">                                <span class="comment">// 设置缓存</span></span><br><span class="line">                                iRedisService.setString(userKey , JSONUtil.toJsonStr(userIPage));</span><br><span class="line">                                <span class="keyword">return</span> Result.success(userIPage);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果缓存不存在，查询数据库</span></span><br><span class="line">                        IPage&lt;User&gt; userIPage = userService.page(page, queryWrapper);</span><br><span class="line">                        <span class="comment">// 设置缓存</span></span><br><span class="line">                        iRedisService.setString(userKey , JSONUtil.toJsonStr(userIPage));</span><br><span class="line">                        <span class="keyword">return</span> Result.success(userIPage);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.page(page, queryWrapper));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol><li>加入Redis序列化配置类，再Config里面设置相对于的序列化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis序列化配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AliveSeven 2023/01/30 18:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * springboot 默认帮我们创建的RedisTemplate的key和value的序列化方式是jdk默认的方式,</span></span><br><span class="line"><span class="comment">     * 我们有时候手动向redis中添加的数据可能无法被查询解析出来,所以我们需要修改序列化方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer); <span class="comment">//设置key的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);<span class="comment">//设置hash类型的数据的key的序列化方式</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<span class="comment">//非final类型的数据才会被序列化</span></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<span class="comment">//设置value的序列化方式为json</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Redis的工具类里面加入下面的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据模糊查询的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getKeysByPre</span><span class="params">(String prefix)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stringRedisTemplate.keys(prefix + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据模糊查询的key进行批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByPre</span><span class="params">(String prefix)</span>&#123;</span><br><span class="line">    Set&lt;String&gt; keys = stringRedisTemplate.keys(prefix + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    stringRedisTemplate.delete(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>然后传入要模糊搜索的key关键字，查询到的keys会放在一个列表里面，调用delete方法会删除对应的数据</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot中通过模糊搜索Redis中的key进行批量删除数据&quot;&gt;&lt;a href=&quot;#Springboot中通过模糊搜索Redis中的key进行批量删除数据&quot; class=&quot;headerlink&quot; title=&quot;Springboot中通过模糊搜索Redis</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题</title>
    <link href="https://aliveseven.github.io/posts/ac03ca9a/"/>
    <id>https://aliveseven.github.io/posts/ac03ca9a/</id>
    <published>2023-08-15T14:52:25.946Z</published>
    <updated>2023-04-09T16:06:34.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题"><a href="#Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题" class="headerlink" title="Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题"></a>Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前Java开发用到的JSON操作工具有很多，大多都有一点点小问题，我在开发毕设的时候有用过Hutool的JSONUtil、阿里的FastJSON、还有谷歌的GSON。</p><p>看过了很多CSDN和各个论坛的文章，感觉对这个JSON顺序问题的解决方案还是比较少相关文章，自己还是做一个记录吧</p><h2 id="各个问题"><a href="#各个问题" class="headerlink" title="各个问题"></a>各个问题</h2><h3 id="JSONUtil"><a href="#JSONUtil" class="headerlink" title="JSONUtil"></a>JSONUtil</h3><ul><li>Hutool的JSONUtil在进行JSON转字符串的时候（JSONUtil.toJsonStr()），会有个问题，就是会自动把时间类型<code>LocalDateTime</code>的值转成时间戳，然后存在Redis中，取出来就有问题了，和数据库拿出来的不一样，造成数据不一致</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>序列化配置</li><li>用下面的方法（不知道生效不，听说可以）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String mes= JSON.toJSONString(requestMap);</span><br><span class="line">改为</span><br><span class="line">String mes= JSON.toJSONStringWithDateFormat(requestMap,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h3><ul><li>阿里的FastJSON更坑，其转换方法会自动给你把JSON数据按key从a—z的顺序排成有序，然后再存入Redis中，再次请求数据顺序就会变了</li><li>而且字符串转成JSON的时候也会进行一个key的排序</li><li>如果有需要拿到<strong>有序的</strong>JSON，可以用FastJson这个工具，这个除了顺序变了其他还是挺好的</li></ul><blockquote><p>因为JsonObject 默认空参构造方法是用 HashMap 来存储的，所以输出是按 key 的排序来的</p></blockquote><h4 id="常规解决方案"><a href="#常规解决方案" class="headerlink" title="常规解决方案"></a>常规解决方案</h4><ul><li>字符串转JSON的时候，也就是使用<code>JSON.parseObject</code>的时候，要注意赋第二个参数<code>Feature.OrderedField</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseObject(res , Feature.OrderedField);</span><br></pre></td></tr></table></figure><ul><li>JSON转字符串的时候，可以用<code>LinkedHashMap</code>来定义要转换的JSONObject</li><li>但是我要处理的JSON数据不是自己定义，而是通过Mybatis-Plus内置的分页方法返回的。所以其实也没什么用，上面这个。</li><li>具体方案👇</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">JsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(<span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;());</span><br><span class="line"><span class="comment">// 转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">JsonString</span> <span class="operator">=</span> JsonObject.toJSONString();</span><br><span class="line"><span class="comment">// 字符串转JSON，取</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseObject(JsonString , Feature.OrderedField);</span><br></pre></td></tr></table></figure><h3 id="GSON"><a href="#GSON" class="headerlink" title="GSON"></a>GSON</h3><ul><li>相比前面两个，我感觉这个JSON转换工具更好用，没有顺序问题，生态也挺好，就是无法设置null替换，还有时间类型<code>LocalDateTime</code>的转换问题。</li><li>默认转换的时候，会把值为null的key给去掉，还有时间类型LocalDateTime也不会做格式化</li><li>这里定义一个函数，通过这个函数来进行JSON转换即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aliveseven.adminmanage.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateAdapter</span> <span class="keyword">implements</span> <span class="title class_">JsonSerializer</span>&lt;LocalDateTime&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonElement <span class="title function_">serialize</span><span class="params">(LocalDateTime localDateTime, Type type, JsonSerializationContext jsonSerializationContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonPrimitive</span>(localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJson</span><span class="params">(Object scr)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>()</span><br><span class="line">                .setPrettyPrinting()</span><br><span class="line">                .serializeNulls()</span><br><span class="line">                .registerTypeAdapter(LocalDateTime.class,<span class="keyword">new</span> <span class="title class_">LocalDateAdapter</span>()).create();</span><br><span class="line">        <span class="keyword">return</span> gson.toJson(scr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题&quot;&gt;&lt;a href=&quot;#Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux、MySQL、Git常用命令</title>
    <link href="https://aliveseven.github.io/posts/f3b9a43e/"/>
    <id>https://aliveseven.github.io/posts/f3b9a43e/</id>
    <published>2023-08-15T14:52:25.945Z</published>
    <updated>2023-01-07T15:49:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux、MySQL、Git常用命令"><a href="#Linux、MySQL、Git常用命令" class="headerlink" title="Linux、MySQL、Git常用命令"></a>Linux、MySQL、Git常用命令</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><ol><li><strong>pwd</strong> //显示当前工作目录</li><li><strong>mkdir</strong> mydir  //创建工作目录</li><li><strong>cd</strong> mydir  //更改工作目录</li><li><strong>rmdir</strong> mydir //删除工作目录</li><li><strong>touch</strong> myfile  //创建文件</li><li><strong>mv</strong> myfile mydir  //移动目录或文件</li><li><strong>cp</strong> myfile myfir  //复制目录或文件</li><li><strong>rm</strong> -rf mydir  //删除目录或文件</li><li><strong>ls</strong> //列出所有文件和目录</li><li><strong>ls -a</strong> //查看所有文件</li><li><strong>ls -l</strong> //详细显示</li></ol><h3 id="文件内容显示和处理"><a href="#文件内容显示和处理" class="headerlink" title="文件内容显示和处理"></a>文件内容显示和处理</h3><ol><li><strong>cat</strong> &gt; myfile  //创建文件并编辑内容（ctrl+D结束编辑）</li><li><strong>cat -n</strong> myfile  //查看文件</li><li><strong>sort</strong> myfile  //对文件内容进行排序</li><li><strong>sort -r</strong> myfile  //逆序</li><li><strong>uniq</strong> myfile  //检查文件中的重复内容</li><li><strong>cut</strong> -b(-c)(-d) 2(3) myfile  //对文件内容进行剪切</li><li><strong>paste</strong> myfile02 myfile01 //对文件内容进行粘贴 02-）01</li></ol><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ol><li><strong>zip</strong> myfile.zip myfile  //压缩</li><li><strong>zip -d</strong> myfile.zip myfile  //添加</li><li><strong>zip -m</strong> myfile.zip myfile  //删除</li><li><strong>unzip -o</strong> myfile.zip  //解压（覆盖）</li><li><strong>unzip -n</strong> myfile.zip  //解压（不覆盖）</li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li><p><strong>create</strong> database name  //创建数据库</p></li><li><p><strong>use</strong> database name  // 选择数据库</p></li><li><p><strong>drop</strong> database name // 直接删除数据库，不提醒</p></li><li><p><strong>insert into</strong> 表名(列1，列2，列3，列4，…) values(值，值，值)  // 增 Insert</p><ul><li>例子 ：insert into student(name,sex,age) values(‘张三’，18，’男’)</li></ul></li><li><p><strong>delete from</strong> 表名 <strong>where</strong> 列=值                                           <strong>// 删delete</strong></p><ul><li>例子 ：<strong>delete from</strong> student where id=1</li></ul></li><li><p><strong>update</strong> 表名 set 列=值，列=值，…. where…                    <strong>// 改 update</strong></p><ul><li>例子 ：<strong>update</strong> student <strong>set</strong> name = ‘张三’ <strong>where</strong> id=1 </li></ul></li><li><p><strong>select</strong> * from 表名                                                                 <strong>// 查询所有</strong></p></li></ol><ul><li>例子：<strong>select</strong> * from student(查询student表中所有列)</li><li>例子2  ：<strong>select</strong> * from student where id =1(表示查询student表中id=1的学生的所有列)</li><li>#去重查询 <strong>DISTINCT</strong>。例子：查询出表当中有哪些性别  SELECT <strong>DISTINCT</strong> sex FROM student</li><li>模糊查询，使用<strong>like</strong>。select * from student where name <strong>like</strong> ‘%王’ 表示模糊查询name以王结束的</li><li>排序查询 <strong>ORDER BY</strong> 倒序关键字<strong>DESC</strong></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>git init  // 初始化</li><li>git add // 在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动</li><li>git commit -m “提交的备注信息”  // 提交到仓库</li><li>git remote add origin <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;">&#103;&#105;&#x74;&#64;&#103;&#x69;&#116;&#x68;&#117;&#98;&#46;&#99;&#111;&#x6d;</a>:帐号名/仓库名.git  //  远程仓库</li><li>git push -u origin master  //  将本地分支的更新内容，全部推送至远程仓库 master 分支</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux、MySQL、Git常用命令&quot;&gt;&lt;a href=&quot;#Linux、MySQL、Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux、MySQL、Git常用命令&quot;&gt;&lt;/a&gt;Linux、MySQL、Git常用命令&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://aliveseven.github.io/tags/Linux/"/>
    
    <category term="MySQL" scheme="https://aliveseven.github.io/tags/MySQL/"/>
    
    <category term="git" scheme="https://aliveseven.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Java返回时间带T，LocalDateTime时间格式化方案</title>
    <link href="https://aliveseven.github.io/posts/dae630a7/"/>
    <id>https://aliveseven.github.io/posts/dae630a7/</id>
    <published>2023-08-15T14:52:25.943Z</published>
    <updated>2023-04-09T16:58:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java返回时间带T，LocalDateTime时间格式化方案"><a href="#Java返回时间带T，LocalDateTime时间格式化方案" class="headerlink" title="Java返回时间带T，LocalDateTime时间格式化方案"></a>Java返回时间带T，LocalDateTime时间格式化方案</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了标题的问题，Redis在存储LocalDateTime的时候也会有相关的问题，解决方案其实也很简单，在相对应的实体类，对LocalDateTime类型加几条注解即可</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过LocalDateTime的源码可以发现，问题出现的原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> date.toString() + <span class="string">&#x27;T&#x27;</span> + time.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个问题可以前端处理，也可以后端处理，前端处理就是可以通过格式化的方式去掉T</p><p>而后端处理的方式，最简单就是加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime time;</span><br></pre></td></tr></table></figure><ul><li>如果这个时候，后台返回还有T的话，可能是引用了fastJson的api，需要加多一条注解，@JSONField</li><li>同样适用于Redis保存</li><li>所以最好用下面的这个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="meta">@JSONField(format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java返回时间带T，LocalDateTime时间格式化方案&quot;&gt;&lt;a href=&quot;#Java返回时间带T，LocalDateTime时间格式化方案&quot; class=&quot;headerlink&quot; title=&quot;Java返回时间带T，LocalDateTime时间格式化方</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Java中list的stream流详解</title>
    <link href="https://aliveseven.github.io/posts/55abbcd5/"/>
    <id>https://aliveseven.github.io/posts/55abbcd5/</id>
    <published>2023-08-15T14:52:25.942Z</published>
    <updated>2023-01-07T16:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中list的stream流详解"><a href="#Java中list的stream流详解" class="headerlink" title="Java中list的stream流详解"></a>Java中list的stream流详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Java8中提供了Stream对集合操作作出了极大的简化，学习了Stream之后，我们以后不用使用for循环就能对集合作出很好的操作</li><li>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询，也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>Java中的Stream的所有操作都是针对流的，所以，使用Stream必须要得到Stream对象</li><li>比如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream = list.stream(); <span class="comment">//获取一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class="comment">//获取一个并行流</span></span><br></pre></td></tr></table></figure><h3 id="获取流的方法"><a href="#获取流的方法" class="headerlink" title="获取流的方法"></a>获取流的方法</h3><ol><li>根据List集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建List集合</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;一号&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;二号&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;三号&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream();</span><br></pre></td></tr></table></figure><ol start="2"><li>根据Set集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream2 = set.stream();</span><br></pre></td></tr></table></figure><ol start="3"><li>根据Map集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Map集合</span></span><br><span class="line">Map&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;一号&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;二号&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>,<span class="string">&quot;三号&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 根据Map集合的键获取流</span></span><br><span class="line">Set&lt;Integer&gt; map1 = map.keySet();</span><br><span class="line">Stream&lt;Integer&gt; stream3 = map1.stream();</span><br><span class="line"><span class="comment">// 根据Map集合的值获取流</span></span><br><span class="line">Collection&lt;String&gt; map2 = map.values();</span><br><span class="line">Stream&lt;String&gt; stream4 = map2.stream();</span><br><span class="line"><span class="comment">// 根据Map集合的键值对对象获取瑞</span></span><br><span class="line">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; map3 = map.entrySet();</span><br><span class="line">Stream&lt;Map.Entry&lt;Integer, String&gt;&gt; stream5 = map3.stream();</span><br></pre></td></tr></table></figure><ol start="4"><li>根据数组获取流</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 根据数组获取流</span><br><span class="line">String[] arr = &#123;&quot;一号&quot;,&quot;二号&quot;,&quot;三号&quot;&#125;;</span><br><span class="line">Stream&lt;String&gt; stream6 = Stream.of(arr);</span><br></pre></td></tr></table></figure><h3 id="Stream流的常用方法"><a href="#Stream流的常用方法" class="headerlink" title="Stream流的常用方法"></a>Stream流的常用方法</h3><h4 id="collect-Collectors-toList"><a href="#collect-Collectors-toList" class="headerlink" title=".collect(Collectors.toList())"></a>.collect(Collectors.toList())</h4><ul><li>使用map操作可以遍历集合中的每个对象，并对其进行操作，map之后，用.collect(Collectors.toList())会得到操作后的集合</li><li>使用filter()函数之后也可以通过该方法得到集合。</li><li>Collectors.toList() 用来结束Stream流</li></ul><h4 id="stream-filter"><a href="#stream-filter" class="headerlink" title="stream().filter()"></a>stream().filter()</h4><p>stream().filter()一般适用于list集合，主要作用就是条件查询，从集合中查询想要的数据。<strong>filter里面的参数user是指集合里面的每一项</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建3个对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u1.setAge(<span class="number">23</span>);</span><br><span class="line">        u1.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        u1.setId(<span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u2.setAge(<span class="number">26</span>);</span><br><span class="line">        u2.setName(<span class="string">&quot;xiaofang&quot;</span>);</span><br><span class="line">        u2.setId(<span class="number">77777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u3.setAge(<span class="number">18</span>);</span><br><span class="line">        u3.setName(<span class="string">&quot;honghong&quot;</span>);</span><br><span class="line">        u3.setId(<span class="number">11111</span>);</span><br><span class="line">        <span class="comment">//添加对象到集合</span></span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line">        <span class="comment">//条件筛选</span></span><br><span class="line">        compare(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compare</span><span class="params">(List&lt;User&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//在集合中查询用户名为xiaofang的集合</span></span><br><span class="line">        List&lt;User&gt; userList = list.stream().filter(user -&gt; <span class="string">&quot;xiaofang&quot;</span>           .equals(user.getName())).collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; userList1 = list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">19</span> &amp;&amp; user.getAge() &lt; <span class="number">24</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(userList1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter：筛选（里面输入的筛选的条件（ <strong>user -&gt; “xiaofang”.equals(user.getName())</strong> ）），这里的条件是查询uesr对象中name属性。</p><h4 id="stream-map"><a href="#stream-map" class="headerlink" title="stream().map()"></a>stream().map()</h4><ol><li>stream().map()提取List对象的某一列值。然后可以通过<strong>forEach</strong>方法对该对象进行循环输出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static void printList(List&lt;User&gt; list) &#123;</span><br><span class="line">    List&lt;String&gt; userList = list.stream().map(User::getName).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    userList.forEach(u -&gt; System.out.println(u));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="stream-sorted"><a href="#stream-sorted" class="headerlink" title="stream().sorted()"></a>stream().sorted()</h4><ul><li>对list集合进行排序</li></ul><ol><li>对id进行升序排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSortList</span><span class="params">(List&lt;User&gt; list)</span> &#123;</span><br><span class="line"><span class="comment">// 升序排序</span></span><br><span class="line">    List&lt;User&gt; userList = list.stream().sorted(Comparator.comparing(User::getId)).collect(Collectors.toList());</span><br><span class="line">    userList.forEach(u -&gt; System.out.println(u));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对id进行降序排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSortList</span><span class="params">(List&lt;User&gt; list)</span> &#123;</span><br><span class="line">    <span class="comment">// 降序排序</span></span><br><span class="line">    List&lt;User&gt; userList = list.stream().sorted(Comparator.comparing(User::getId).reversed()).collect(Collectors.toList());</span><br><span class="line">    userList.forEach( u - &gt;System.out.println(u));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="流的中间操作"><a href="#流的中间操作" class="headerlink" title="流的中间操作"></a><strong>流的中间操作</strong></h3><ul><li>筛选与切片<pre><code>filter：过滤流中的某些元素limit(n)：获取n个元素skip(n)：跳过n元素，配合limit(n)可实现分页distinct：通过流中元素的 hashCode() 和 equals() 去除重复元素</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">14</span>);</span><br><span class="line"> </span><br><span class="line">Stream&lt;Integer&gt; newStream = stream.filter(s -&gt; s &gt; <span class="number">5</span>) <span class="comment">//6 6 7 9 8 10 12 14 14</span></span><br><span class="line">        .distinct() <span class="comment">//6 7 9 8 10 12 14</span></span><br><span class="line">        .skip(<span class="number">2</span>) <span class="comment">//9 8 10 12 14</span></span><br><span class="line">        .limit(<span class="number">2</span>); <span class="comment">//9 8</span></span><br><span class="line">newStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="Stream对象转换为集合"><a href="#Stream对象转换为集合" class="headerlink" title="Stream对象转换为集合"></a>Stream对象转换为集合</h3><ul><li><p><strong>collect(Collectors.toList())</strong> </p></li><li><p><strong>collect(Collectors.toSet())</strong></p></li><li><p><strong>collect(Collectors.toMap())</strong></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java中list的stream流详解&quot;&gt;&lt;a href=&quot;#Java中list的stream流详解&quot; class=&quot;headerlink&quot; title=&quot;Java中list的stream流详解&quot;&gt;&lt;/a&gt;Java中list的stream流详解&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView的简单使用</title>
    <link href="https://aliveseven.github.io/posts/6c6b2a18/"/>
    <id>https://aliveseven.github.io/posts/6c6b2a18/</id>
    <published>2023-08-15T14:52:25.940Z</published>
    <updated>2023-01-07T15:48:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-RecyclerView的简单使用"><a href="#Android-RecyclerView的简单使用" class="headerlink" title="Android RecyclerView的简单使用"></a>Android RecyclerView的简单使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>RecyclerView 是如何经过测量、布局，最终绘制到屏幕上</li><li>RecycleView 是在 Android 5.0 版本作为 support-v7 的一个组件出现，高效替代了最初的 ListView 等列表 组件。使用上实现了视图代码解耦，功能上具备强大的 item 复用机制，并且提供默认 多种 LayoutMananger 用来处理多种布局。</li><li>RecyclerView 使用了 ViewHolder 模式，这 样做可以提高性能，因为它无需频繁调用 findViewById()方法即可访问表项的视图。</li><li>在新版的Android开发中，RecyclerView控件被内置到Android Studio中，不需要再去引入依赖项，直接配置即可。</li></ul><h2 id="RecyclerView的基本使用"><a href="#RecyclerView的基本使用" class="headerlink" title="RecyclerView的基本使用"></a>RecyclerView的基本使用</h2><h3 id="RecyclerView组件"><a href="#RecyclerView组件" class="headerlink" title="RecyclerView组件"></a>RecyclerView组件</h3><ol><li>新建一个页面（Activity），在里面引入RecyclerView控件</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWHnv.png"></p><ol start="2"><li>新建一个子组件的item页面，来用作每个组件的展示模板，例如下图这样。</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWPGG.png"></p><h3 id="RecyclerViewHolder类"><a href="#RecyclerViewHolder类" class="headerlink" title="RecyclerViewHolder类"></a>RecyclerViewHolder类</h3><ul><li><p>RecyclerView中的ViewHolder类主要构造方法将<strong>子组件（单条数据）</strong>的ui和组件对象（Java类）关联起来。</p></li><li><p>比如上图我的子组件，我要多条展示的这些数据，每条数据的<strong>名字（name），图片（iv），描述（introduce）</strong>是各不相同的，所以要配置它们，将这些组件用Java类关联起来，然后用Java类方法进行<strong>修改和批量展示</strong>。</p></li><li><p><strong>相关代码：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">    <span class="comment">//展示单条数据的界面组件对象</span></span><br><span class="line">    TextView name;</span><br><span class="line">    ImageView iv;</span><br><span class="line">    TextView introduce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法：将组件（ui）与组件对象（java类）关联起来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecyclerViewHolder</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(view);</span><br><span class="line">        <span class="comment">//关联id = name的组件</span></span><br><span class="line">        name = (TextView) view.findViewById(R.id.name);</span><br><span class="line">        <span class="comment">//关联id = iv的组件</span></span><br><span class="line">        iv = (ImageView) view.findViewById(R.id.iv);</span><br><span class="line">        <span class="comment">//关联id = introduce的组件</span></span><br><span class="line">        introduce = (TextView) view.findViewById(R.id.introduce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RecyclerAdapter类"><a href="#RecyclerAdapter类" class="headerlink" title="RecyclerAdapter类"></a>RecyclerAdapter类</h3><ul><li>RecyclerView中的Adapter是适配器、数据和视图对接的桥梁。</li><li>简单来说，就是新建一个类，在里面设置一些方法，按照item页面的那个模板批量生产子组件，然后将生产的这些子组件塞到一开始新建的那个RecyclerView控件里面，由上往下一个一个排。</li><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;RecyclerViewHolder&gt;&#123;</span><br><span class="line">    <span class="comment">// 创建两个数组包含要展示的数据图片、姓名和它们的详细介绍</span></span><br><span class="line">    <span class="keyword">private</span> String[] names = &#123; <span class="string">&quot;橘猫&quot;</span>, <span class="string">&quot;葫芦娃&quot;</span>, <span class="string">&quot;小怪兽&quot;</span>, <span class="string">&quot;哆啦COS梦&quot;</span>, <span class="string">&quot;小猪佩奇&quot;</span>, <span class="string">&quot;睡爆emo&quot;</span>, <span class="string">&quot;逗乐表情包&quot;</span>, <span class="string">&quot;小松鼠&quot;</span>, <span class="string">&quot;小鲸鱼&quot;</span>, <span class="string">&quot;兔子&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] icons = &#123;R.drawable.a1,R.drawable.a2,R.drawable.a3,R.drawable.a4,R.drawable.a5,</span><br><span class="line">            R.drawable.a6,R.drawable.a7,R.drawable.a8,R.drawable.a9,R.drawable.a10&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] introduces = &#123;</span><br><span class="line">            <span class="string">&quot;橘猫，路边看到的小猫，好像隐藏着什么强大的力量，感觉这不是一只普通的小猫。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;葫芦娃，送头之王，有七兄弟，葫芦娃救爷爷一个一个送&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小怪兽，凹凸曼的好朋友，喜欢和凹凸曼一起去逗乐，特摄节目中的超级猪脚。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;COS哆啦A梦的小朋友，简称哆啦COS梦，可爱，萌，就是没有哆啦A梦那么圆那么胖。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小猪佩奇，一只可爱的粉色小猪，貌似很受小孩子的欢迎，虽然我不知道这有啥好看就是了，说不定很逗乐。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;睡爆emo，上数学课英文课的时候大概就是这样了，梦里什么都有。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;逗乐表情包，一个表情包，挺逗乐的，不过现在估计没什么人用了，时代变了大人。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小松鼠，挺可爱挺萌的，长得还挺像皮卡丘，好想抓一只拿回家里养，就是不知道会不会发电。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小鲸鱼，能够头上喷水的一种鱼，遭受人类的迫害和捕杀，现在濒临灭绝了。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;兔子，一种胆小的动物，突然喧闹声、生人和陌生动物，如猫狗等都会使它惊慌失措。&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="comment">//  加载展示单条数据的布局文件recycler_item.xml</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="type">RecyclerViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecyclerViewHolder</span>(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示单条数据,index代表数据在数组中的下标</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(RecyclerViewHolder holder, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//设置数组names[index]为展示的id为name的text组件</span></span><br><span class="line">        holder.name.setText(names[index]);</span><br><span class="line">        <span class="comment">//设置数组icons[index]为展示的id为iv的Image组件</span></span><br><span class="line">        holder.iv.setImageResource(icons[index]);</span><br><span class="line">        <span class="comment">//设置数组introduces[index]为展示的id为introduce的text组件</span></span><br><span class="line">        holder.introduce.setText(introduces[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  获取所有数据的数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> names.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码看上去可能有点长，其实一点都不复杂，一开始的新建的三个数组就是要批量生产的子组件的数据。</p><p>​    在onCreateViewHolder里，先加载子组件item的模板布局，然后将模板布局里面的子组件通过RecyclerHolder类匹配到Java对象上。</p><p>​    在onBindViewHolder里，将三个数组里的数据，set到item的模板布局上面，简单来说就是拿一个模板，向里面按格式写入东西。</p><p>​    最后，再设置一个getItemCount()方法，获取要批量生产的子组件数量。</p><h3 id="RecyclerViewActivtiy类"><a href="#RecyclerViewActivtiy类" class="headerlink" title="RecyclerViewActivtiy类"></a>RecyclerViewActivtiy类</h3><ol><li>到需要多条展示数据的页面Activtiy类里面</li><li>新建两个对象，一个是RecyclerView类的对象和适配器RecyclerViewAdapter类的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line"><span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br></pre></td></tr></table></figure><ol start="3"><li>布局文件通过findViewById()找到一开始新建的那个Recycler控件</li><li>然后直接按下面的代码一样配置即可</li></ol><ul><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 加载布局文件，里面有recyclerview组件</span></span><br><span class="line">        setContentView(R.layout.activity_recycler_view_activity);</span><br><span class="line">        <span class="comment">//建立组件对象与组件的关联</span></span><br><span class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.id_recyclerview);</span><br><span class="line">        <span class="comment">//设置recyclerview中展现多条数据的方式</span></span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">//创建适配器对象</span></span><br><span class="line">        mAdapter = <span class="keyword">new</span> <span class="title class_">RecyclerViewAdapter</span>();</span><br><span class="line">        <span class="comment">//recyclerview组件对象设置适配器对象，显示recyclerview组件</span></span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/Uq5DNY.gif" alt="Uq5DNY.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-RecyclerView的简单使用&quot;&gt;&lt;a href=&quot;#Android-RecyclerView的简单使用&quot; class=&quot;headerlink&quot; title=&quot;Android RecyclerView的简单使用&quot;&gt;&lt;/a&gt;Android Rec</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment（底部导航）的使用</title>
    <link href="https://aliveseven.github.io/posts/f8b76465/"/>
    <id>https://aliveseven.github.io/posts/f8b76465/</id>
    <published>2023-08-15T14:52:25.939Z</published>
    <updated>2023-01-07T15:51:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Fragment（底部导航）的使用"><a href="#Android-Fragment（底部导航）的使用" class="headerlink" title="Android Fragment（底部导航）的使用"></a>Android Fragment（底部导航）的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Fragment 是 activity 的界面中的一部分或一种行为。</li><li>你可以把多个 Fragment 们组合到一个activity中来创建一个多面界面并且你可以在多个 activity 中重用一个Fragment。</li><li>你可以把 Fragment 认为模块化的一段activity，它具有自己的生命周期，接收它自己的事件，并可以在 activity 运行时被添加或删除。同时，使用 Fragment 可以 轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸，从手机到平板电脑。 Fragment 替代 TabActivity 做导航，性能更好。</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="开启viewBinding"><a href="#开启viewBinding" class="headerlink" title="开启viewBinding"></a>开启viewBinding</h3><ol><li>首先新建好项目之后，在<strong>build.gradle</strong>文件里面加入一行东西</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启viewBinding</span></span><br><span class="line">buildFeatures &#123;</span><br><span class="line">    viewBinding <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/08/UqGgOh.png"></p><ul><li>在设置这个之后，通过<strong>View Binding替换findViewById。</strong>，可以更好地进行视图绑定</li></ul><h3 id="新建底部导航选项"><a href="#新建底部导航选项" class="headerlink" title="新建底部导航选项"></a>新建底部导航选项</h3><ol><li>在res文件夹里面新建一个名叫<strong>menu</strong>的文件夹，再新建一个<strong>Menu Resource File</strong>，填好菜单名之后即可</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqejXy.png"></p><ol start="2"><li>再在res文件夹里面新建一个名叫<strong>navigation</strong>的文件夹，然后新建一个<strong>Navigation Resource File</strong>，填好新建文件名即可，这里我填了：mobile_navigation</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeZjh.png"></p><p><img src="https://m1.im5i.com/2022/09/10/Uqeh9X.png"></p><ol start="3"><li>新建好文件之后，关掉再重新双击mobile_navigation，应该会弹出个警告，我们点OK就行了，弄好之后页面应该是下面这样的。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqecnM.png"></p><h3 id="新建导航页面"><a href="#新建导航页面" class="headerlink" title="新建导航页面"></a>新建导航页面</h3><ol><li>这里我们新建三个空页面作为底部导航要切换的Fragment页面</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqeq53.png"></p><ol start="2"><li>对三个空页面加个text元素作区别</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqe8w7.png"></p><ol start="3"><li>点击menu，增加底部导航选项item，<strong>注意：item的id必须与导航图mobile_navigation.xml中对应节点（fragment）的id一致（相同）</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeVip.png"></p><ol start="4"><li>返回主页面，找到<strong>NavHostFragment</strong>控件，增加，作为导航切换的地方。增加<strong>BottomNavigationView</strong>控件，增加，作为导航切换的底部选项栏。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeWcv.png"></p><ol start="5"><li>选择对应的导航xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJTvf.png"></p><ol start="6"><li>回到menu.xml文件，给每个item增加导航icon和id，注意：id必须与导航图<strong>mobile_navigation.xml</strong>中对应节点（fragment）的id一致（相同），<strong>id的格式为 @+id 加上导航页面节点的id</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ39h.png"></p><ol start="7"><li>回到主页面，点击<strong>BottomNavigationView</strong>，找到<strong>menu</strong>选项，加入我们刚刚配置好的menu.xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ41X.png"></p><p><img src="https://m1.im5i.com/2022/09/10/UqJX5M.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-Fragment（底部导航）的使用&quot;&gt;&lt;a href=&quot;#Android-Fragment（底部导航）的使用&quot; class=&quot;headerlink&quot; title=&quot;Android Fragment（底部导航）的使用&quot;&gt;&lt;/a&gt;Android Fra</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>通过axios下载/导出文件</title>
    <link href="https://aliveseven.github.io/posts/9957f058/"/>
    <id>https://aliveseven.github.io/posts/9957f058/</id>
    <published>2023-08-15T14:52:25.936Z</published>
    <updated>2023-01-07T17:32:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过axios下载-导出文件"><a href="#通过axios下载-导出文件" class="headerlink" title="通过axios下载/导出文件"></a>通过axios下载/导出文件</h1><h2 id="TypeScript代码"><a href="#TypeScript代码" class="headerlink" title="TypeScript代码"></a>TypeScript代码</h2><h3 id="API接口代码"><a href="#API接口代码" class="headerlink" title="API接口代码"></a>API接口代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exportUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        url : <span class="string">&#x27;/user/export&#x27;</span>,</span><br><span class="line">        method : <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出信息文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exportUserInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">exportUser</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res : <span class="built_in">any</span></span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> blob :<span class="built_in">any</span> = <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob); <span class="comment">// 创建一个临时的url指向blob对象</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&#x27;用户信息&#x27;</span>;  <span class="comment">// 自定义下载文件名</span></span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    <span class="comment">// 释放这个临时的对象url</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url); </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;网络错误&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最近阳了，鸽了好多天没更博客了😣😣</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过axios下载-导出文件&quot;&gt;&lt;a href=&quot;#通过axios下载-导出文件&quot; class=&quot;headerlink&quot; title=&quot;通过axios下载/导出文件&quot;&gt;&lt;/a&gt;通过axios下载/导出文件&lt;/h1&gt;&lt;h2 id=&quot;TypeScript代码&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发Vant，Popover点击外面无法关闭？</title>
    <link href="https://aliveseven.github.io/posts/5ef1779d/"/>
    <id>https://aliveseven.github.io/posts/5ef1779d/</id>
    <published>2023-08-15T14:52:25.935Z</published>
    <updated>2023-03-19T11:23:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端开发Vant，Popover点击外面无法关闭？"><a href="#移动端开发Vant，Popover点击外面无法关闭？" class="headerlink" title="移动端开发Vant，Popover点击外面无法关闭？"></a>移动端开发Vant，Popover点击外面无法关闭？</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行HyBridge开发的时候，遇到这样的问题，在移动端端使用Vant中的Popover组件，点击组件外的任意地方能实现组件的关闭，但是<strong>到了PC端这个效果就没了</strong>。</p><p>因为Vant中的组件默认适配移动端，在PC端中没法监听到mouse事件。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>引入@vant/touch-emulator即可，这个库会在桌面端自动将 mouse 事件转换成对应的 touch 事件，使得组件能够在桌面端使用。</p><p>安装模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i &#x27;@vant/touch-emulator&#x27; -S</span><br></pre></td></tr></table></figure><p>引入模块</p><p>在main.js中引入即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@vant/touch-emulator&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端开发Vant，Popover点击外面无法关闭？&quot;&gt;&lt;a href=&quot;#移动端开发Vant，Popover点击外面无法关闭？&quot; class=&quot;headerlink&quot; title=&quot;移动端开发Vant，Popover点击外面无法关闭？&quot;&gt;&lt;/a&gt;移动端开发Van</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>禁止HTML页面进行缩放操作，以及meta标签的常见作用</title>
    <link href="https://aliveseven.github.io/posts/20b6931d/"/>
    <id>https://aliveseven.github.io/posts/20b6931d/</id>
    <published>2023-08-15T14:52:25.933Z</published>
    <updated>2023-08-19T14:16:46.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：开发H5的时候，有时候需要嵌入到IOS、安卓或者PC等其他端处，或者单纯是一个H5，可能有时候需要禁止用户对页面进行缩放和放大的操作。</p></blockquote><h2 id="meta是什么"><a href="#meta是什么" class="headerlink" title="meta是什么"></a>meta是什么</h2><ul><li>HTML中的meta标签用于提供关于网页的元数据信息，这些信息可以帮助浏览器正确地展示网页内容，同时也对**搜索引擎优化(SEO)**和社交媒体分享有一定作用。</li><li>meta标签主要包含name属性、http-equiv属性和content属性。这三个属性都是meta标签必须的属性。</li></ul><h2 id="meta标签可以包含以下信息"><a href="#meta标签可以包含以下信息" class="headerlink" title="meta标签可以包含以下信息"></a>meta标签可以包含以下信息</h2><ul><li><strong>网页关键词（keywords）</strong>：指定与页面相关的关键词，以便搜索引擎更好地理解并索引该页面。</li><li><strong>网页描述（description）</strong>：提供一个简短的描述，告诉搜索引擎和用户这个页面是关于什么的。</li><li><strong>编码方式（charset）</strong>：指定网页使用的字符编码方式，避免出现乱码问题。</li><li><strong>视口（viewport）</strong>：指定如何在移动设备上显示网页，使得用户可以更好地浏览。</li><li>其他信息：还可以包含其他自定义的元数据信息，比如作者、生成日期等。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>name属性用来指定元数据的名称，如“keywords”、“description”等；content属性则用来设置元数据的具体内容；而http-equiv属性则可以用来模拟HTTP头部的作用，常见的值有“refresh”、“content-type”等。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML, CSS, JavaScript&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Learn HTML, CSS, and JavaScript online for free.&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=https://www.example.com/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以上代码中第一个meta标签定义了页面的关键词，在<strong>搜索引擎优化</strong>时有着很大的作用；第二个meta标签则用来描述页面，帮助用户更好地了解该网页的内容；第三个meta标签则指定在5秒后自动跳转到另一个网页。</li></ul><blockquote><p>需要注意的是，虽然不是所有的meta标签都需要这三个属性，但至少需要一个name或http-equiv属性和一个content属性才能正确地定义元数据信息。</p></blockquote><h2 id="禁止HTML页面进行缩放操作"><a href="#禁止HTML页面进行缩放操作" class="headerlink" title="禁止HTML页面进行缩放操作"></a>禁止HTML页面进行缩放操作</h2><p>其实很简单，在index.html里面加入下面这行代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置防止手机百度转码"><a href="#设置防止手机百度转码" class="headerlink" title="设置防止手机百度转码"></a>设置防止手机百度转码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：开发H5的时候，有时候需要嵌入到IOS、安卓或者PC等其他端处，或者单纯是一个H5，可能有时候需要禁止用户对页面进行缩放和放大的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;meta是什么&quot;&gt;&lt;a href=&quot;#meta是什么&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="https://aliveseven.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>尝试手写Ajax</title>
    <link href="https://aliveseven.github.io/posts/1d0f8d42/"/>
    <id>https://aliveseven.github.io/posts/1d0f8d42/</id>
    <published>2023-08-15T14:52:25.932Z</published>
    <updated>2023-01-07T17:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="尝试手写Ajax"><a href="#尝试手写Ajax" class="headerlink" title="尝试手写Ajax"></a>尝试手写Ajax</h1><h2 id="Ajax是什么"><a href="#Ajax是什么" class="headerlink" title="Ajax是什么"></a>Ajax是什么</h2><p><code>AJAX</code> 即 <code>Asynchronous Javascript And XML</code>（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。可以通过Ajax向服务端发起异步请求数据，最大的优势在于无需刷新即可获取到数据。</p><h2 id="Ajax的优缺点"><a href="#Ajax的优缺点" class="headerlink" title="Ajax的优缺点"></a>Ajax的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>可以无需刷新页面而与服务器端进行通信</li><li>充分利用客户端闲置的处理能力，减轻服务器和网络传输的负担</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>Ajax干掉了Back和History功能，即对浏览器机制的破坏。</li><li>没有浏览历史，不能回退</li><li>存在跨域问题(同源)</li><li>SEO 不友好</li></ol><h2 id="发起请求的常见响应状态码"><a href="#发起请求的常见响应状态码" class="headerlink" title="发起请求的常见响应状态码"></a>发起请求的常见响应状态码</h2><ul><li>200 OK 请求成功。一般用于GET 与POST 请求</li><li>201 Created 已创建。成功请求并创建了新的资源</li><li>401 Unauthorized 未授权/请求要求用户的身份认证</li><li>404 Not Found 服务器无法根据客户端的请求找到资源</li><li>500 Internal Server Error 服务器内部错误，无法完成请求</li></ul><h2 id="常见请求类型"><a href="#常见请求类型" class="headerlink" title="常见请求类型"></a>常见请求类型</h2><ul><li>GET: 从服务器端读取数据（查）</li><li>POST: 向服务器端添加新数据 （增）</li><li>PUT: 更新服务器端已经数据 （改）</li><li>DELETE: 删除服务器端数据 （删）</li></ul><h2 id="Ajax实现过程"><a href="#Ajax实现过程" class="headerlink" title="Ajax实现过程"></a>Ajax实现过程</h2><ol><li>创建Ajax的核心对象XMLHttpRequest对象</li><li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</li><li>在发起请求之前，通过setRequestHeader方法来为Ajax请求添加头信息</li><li>发送HTTP请求</li><li>获取异步调用返回的数据，XMLHttpRequest状态变化时会触发onreadystatechange事件，可以通过设置监听函数，来处理请求成功后的结果</li><li>使用JavaScript和DOM实现局部刷新</li></ol><h2 id="手写Ajax"><a href="#手写Ajax" class="headerlink" title="手写Ajax"></a>手写Ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建对象 </span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2. 初始化 设置请求方法和url</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;https://www.baidu.com/&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 3.设置请求头</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">// xhr.responseType = &quot;json&quot;;</span></span><br><span class="line"><span class="comment">// 4. 事件绑定 处理服务端返回的结果</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">    <span class="comment">// 判断 (服务端返回了所有的结果</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断响应状态码 200 404 403 401 500</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">        <span class="comment">// 处理结果 行 头 空行 体</span></span><br><span class="line">        <span class="comment">// 响应</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态码&#x27;</span>, xhr.<span class="property">status</span>); <span class="comment">// 状态码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态字符串&#x27;</span>, xhr.<span class="property">statusText</span>); <span class="comment">// 状态字符串</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有响应头&#x27;</span>, xhr.<span class="title function_">getAllResponseHeaders</span>()); <span class="comment">// 所有响应头</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应体&#x27;</span>, xhr.<span class="property">response</span>); <span class="comment">// 响应体</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置 result 的文本</span></span><br><span class="line">        result.<span class="property">innerHTML</span>=xhr.<span class="property">response</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5. 发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h2 id="加入Promise"><a href="#加入Promise" class="headerlink" title="加入Promise"></a>加入Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,url,<span class="literal">true</span>)</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;xxxx.com&#x27;</span></span><br><span class="line"><span class="title function_">ajax</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="API总结"><a href="#API总结" class="headerlink" title="API总结"></a>API总结</h2><ul><li><code>XMLHttpRequest()</code>：创建 XHR 对象的构造函数</li><li><code>status</code>：响应状态码值，如 200、404</li><li><code>statusText</code>：响应状态文本，如 ’ok‘、‘not found’</li><li><code>readyState</code>：标识请求状态的只读属性 0-1-2-3-4</li><li><code>onreadystatechange</code>：绑定 readyState 改变的监听</li><li><code>responseType</code>：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应</li><li><code>response</code>：响应体数据，类型取决于 responseType 的指定</li><li><code>timeout</code>：指定请求超时时间，默认为 0 代表没有限制</li><li><code>ontimeout</code>：绑定超时的监听</li><li><code>onerror</code>：绑定请求网络错误的监听</li><li><code>open()</code>：初始化一个请求，参数为：(method, url[, async])</li><li><code>send(data)</code>：发送请求</li><li><code>abort()</code>：中断请求 （发出到返回之间）</li><li><code>getResponseHeader(name)</code>：获取指定名称的响应头值</li><li><code>getAllResponseHeaders()</code>：获取所有响应头组成的字符串</li><li><code>setRequestHeader(name, value)</code>：设置请求头</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;尝试手写Ajax&quot;&gt;&lt;a href=&quot;#尝试手写Ajax&quot; class=&quot;headerlink&quot; title=&quot;尝试手写Ajax&quot;&gt;&lt;/a&gt;尝试手写Ajax&lt;/h1&gt;&lt;h2 id=&quot;Ajax是什么&quot;&gt;&lt;a href=&quot;#Ajax是什么&quot; class=&quot;header</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>小程序缓存操作(本地、同步、异步)</title>
    <link href="https://aliveseven.github.io/posts/e3e02fb9/"/>
    <id>https://aliveseven.github.io/posts/e3e02fb9/</id>
    <published>2023-08-15T14:52:25.930Z</published>
    <updated>2023-01-07T16:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序缓存操作-本地、同步、异步"><a href="#小程序缓存操作-本地、同步、异步" class="headerlink" title="小程序缓存操作(本地、同步、异步)"></a>小程序缓存操作(本地、同步、异步)</h1><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><ol><li>wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB</li><li>使用localStorage永久存储</li><li>使用uniapp进行开发的时候，可以将wx替换为uni来进行缓存的操作</li></ol><h2 id="异步缓存"><a href="#异步缓存" class="headerlink" title="异步缓存"></a>异步缓存</h2><p>wx.setStorage(object)</p><p>uni.setStorage(object)</p><ul><li>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="string">&quot;key&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorage(object)</p><p>uni.getStorage(object)</p><ul><li>从本地缓存中异步获取指定 key 对应的内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorageInfo(object)</p><p>uni.getStorageInfo(object)</p><ul><li>异步获取当前storage的相关信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorageInfo</span>(&#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">keys</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">currentSize</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">limitSize</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.removeStorage(object)</p><p>uni.removeStorage(object)</p><ul><li>从本地缓存中异步移除指定 key 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">removeStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="同步缓存"><a href="#同步缓存" class="headerlink" title="同步缓存"></a>同步缓存</h2><p>wx.setStorageSync(key,value)</p><p>uni.setStorageSync(key,value)</p><ul><li>将 value 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个<strong>同步</strong>接口。</li></ul><p>wx.getStorageSync(key)</p><p>uni.getStorageSync(key)</p><ul><li>从本地缓存中<strong>同步获取</strong>指定 key 对应的内容。</li></ul><p>wx.getStorageInfoSync</p><p>uni.getStorageInfoSync</p><ul><li><strong>同步获取</strong>当前storage的相关信息</li></ul><p>wx.removeStorageSync(key)</p><p>uni.removeStorageSync(key)</p><ul><li>从本地缓存中<strong>同步移除</strong>指定 key 。</li></ul><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>wx.clearStorage()</p><p>uni.clearStorage()</p><ul><li>清理本地数据缓存。</li></ul><p>wx.clearStorageSync()</p><p>uni.clearStorageSync()</p><ul><li>同步清理本地数据缓存</li></ul><h2 id="同步缓存和异步缓存的区别"><a href="#同步缓存和异步缓存的区别" class="headerlink" title="同步缓存和异步缓存的区别"></a>同步缓存和异步缓存的区别</h2><p>以Sync（同步，同时）结尾的都是都是同步缓存，二者的区别是，异步不会阻塞当前任务，同步缓存直到同步方法处理完才能继续往下执行。</p><h3 id="历史搜索"><a href="#历史搜索" class="headerlink" title="历史搜索"></a>历史搜索</h3><ul><li>案例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-icon&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要搜索的内容&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;searchNameInput&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">bindtap</span>=<span class="string">&quot;setSearchStorage&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>历史搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:right;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>删除搜索历史<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;search-list&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;searchData&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item == null?&#x27;暂无数据&#x27;:item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面</p><p>这里有三个绑定事件</p><ul><li>bindinput=”searchNameInput” 获取用户输入的数据</li><li>bindtap=”setSearchStorage” 设置本地存储</li><li>bindtap=”deleteHistory” 删除历史搜索</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户输入框的值</span></span><br><span class="line">    <span class="attr">searchNameInput</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">inputValue</span>:e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>e.detail.value就代表了当前输入值</p><p>当点击搜索的时候，bindtap=”setSearchStorage”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用户输入的内容存入本地缓存,并且将搜索数据放到首页</span></span><br><span class="line"><span class="attr">setSearchStorage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//调用API向本地缓存存入数据</span></span><br><span class="line">        <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || [] </span><br><span class="line">        searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)  </span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读取用户搜索商品</span></span><br><span class="line">        <span class="keyword">var</span> name = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span></span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;www.shop.com/home/product/search&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;<span class="attr">name</span>:name&#125;,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">                that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">goodsList</span>: res.<span class="property">data</span>.<span class="property">info</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程这么走：</p><ol><li><p>用户输入数据，点击搜索</p></li><li><p>如果数据不为空，加入（设置）本地缓存</p></li><li><p>去服务器搜索用户想要的数据，赋值给这个页面的变量</p></li><li><p>点击删除，去除本地这个key的value</p></li></ol><ul><li>这里的缓存形式的 key =&gt; value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || []</span><br></pre></td></tr></table></figure><p>获取本地名字为’searchData’的缓存，如果’searchData’这个缓存不存在就相当于重新什么一个空数组，赋值给searchData这个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)</span><br></pre></td></tr></table></figure><p>将用户输入的值PUSH进searchData这个变量里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br></pre></td></tr></table></figure><p>调用API接口，重新设置key = ‘searchData’的这个缓存的value等于searchData，下面的wx.request是请求数据的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从本地获取历史搜索数据</span></span><br><span class="line">          <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>)||[]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">searchData</span>:searchData</span><br><span class="line">            &#125;)</span><br><span class="line"> </span><br><span class="line"> deleteHistory</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除历史搜索数据</span></span><br><span class="line">    <span class="attr">deleteHistory</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">        wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;是否删除历史搜索&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, []);</span><br><span class="line">                wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;/pages/index/index&#x27;</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小程序缓存操作-本地、同步、异步&quot;&gt;&lt;a href=&quot;#小程序缓存操作-本地、同步、异步&quot; class=&quot;headerlink&quot; title=&quot;小程序缓存操作(本地、同步、异步)&quot;&gt;&lt;/a&gt;小程序缓存操作(本地、同步、异步)&lt;/h1&gt;&lt;h2 id=&quot;本地缓存&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    <category term="uniapp" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/uniapp/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="uniapp" scheme="https://aliveseven.github.io/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>Vue通过不同的值改变class</title>
    <link href="https://aliveseven.github.io/posts/6df76c49/"/>
    <id>https://aliveseven.github.io/posts/6df76c49/</id>
    <published>2023-08-15T14:52:25.913Z</published>
    <updated>2023-01-07T17:38:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue通过不同的值改变class"><a href="#Vue通过不同的值改变class" class="headerlink" title="Vue通过不同的值改变class"></a>Vue通过不同的值改变class</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>我们在进行组件化开发的时候，可能想让当前类有不同的样式，或者是多种样式。</li><li>亦或是我们想要通过<strong>props</strong>来进行父组件给子组件传值，然后子组件根据传过来的值进行判断，不同的值对应不同的样式（有点像组件库中的size）</li><li>这时候就引出上题了</li></ul><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>其实很简单，只需要给class加上<code>&#123; &#39;类名&#39; : &#39;条件&#39; &#125;</code>即可，比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pop&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; popB : popAct == true&#125;&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>这里就给盒子加入pop 和 popB的类名了，popB是**(popAct == true)**这个条件为true的时候才触发，也就是popAct == false的时候，这个时候就没有popB这个类名了。</p><p>即：</p><ul><li>当popAct == true的时候，class = “pop popB”</li><li>当popAct == false的时候，不满足触发popB的条件，class = “pop”</li></ul><h2 id="多个条件的情况下"><a href="#多个条件的情况下" class="headerlink" title="多个条件的情况下"></a>多个条件的情况下</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#123; big : size == &#x27;da&#x27; &#125;,&#123; mid : size == &#x27;zhong&#x27;&#125;,&#123;small : size==&#x27;xiao&#x27;&#125;]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码的意思：</p><ul><li>当size这个变量等于’da’的时候，即size == ‘da’ 为true的时候，class=”big”</li><li>当size这个变量等于’zhong’的时候，即size == ‘zhong’ 为true的时候，class=”mid”</li><li>当size这个变量等于’xiao’的时候，即size == ‘xiao’ 为true的时候，class=”small”</li></ul><p>这样看是不是很容易理解了。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue通过不同的值改变class&quot;&gt;&lt;a href=&quot;#Vue通过不同的值改变class&quot; class=&quot;headerlink&quot; title=&quot;Vue通过不同的值改变class&quot;&gt;&lt;/a&gt;Vue通过不同的值改变class&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue父子组件通过v-model双向绑定传值</title>
    <link href="https://aliveseven.github.io/posts/11d10164/"/>
    <id>https://aliveseven.github.io/posts/11d10164/</id>
    <published>2023-08-15T14:52:25.913Z</published>
    <updated>2023-04-09T15:20:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue父子组件通过v-model双向绑定传值"><a href="#Vue父子组件通过v-model双向绑定传值" class="headerlink" title="Vue父子组件通过v-model双向绑定传值"></a>Vue父子组件通过v-model双向绑定传值</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做毕设的时候，需要二次封装Naive UI的Input组件，达到多次复用的效果，然后遇到了需要v-model来二次传值的需求，实现方法本身不难，这里把Vue3的做法叙述一下，Vue2应该也差不多。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ul><li>所谓的<code>v-model</code>其实就是<code>v-bind</code>搭配<code>v-on</code>和<code>emit</code>的组合语法糖，可以通过这三个东西来定义需要双向绑定的变量名</li><li>直接上代码</li></ul><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model:value</span>=<span class="string">&quot;val&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><ul><li>子组件需要的做的事情其实不多，通过<code>props</code>定义一个叫<code>value</code>的变量，然后绑定到<code>input</code>属性的<code>:value</code>上面</li><li>props中的value你可以给他定义类型，也可以不定义，看你喜欢</li><li>然后需要定义一个<code>update:value</code>的emit事件，<strong>一定要叫这个名字</strong>，<strong>一定要叫这个名字</strong>——<code>update:value</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:value&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>如果你的props中定义的不是value，比如是title，那么你的父组件应该是这样的👇</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model:title</span>=<span class="string">&quot;val&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件则是</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;props.title&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:title&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>emit的事件名一定是<code>update:</code> + <code>你要用v-model双向绑定传值的变量名</code>，也就是上面props中的<code>value</code>或者是<code>title</code></p></blockquote><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>v-on:input绑定的方法，我不知道是Naive UI中的<code>@input</code>方法是不是和原生的不太一样</li><li>原生的似乎在输入的时候返回了$event事件，<strong>但是Naive UI中的input组件第一次是返回$event事件，第二次后面开始返回输入的值</strong></li><li>所以这里我做了一个判断，如果el是$event事件，那么它会有个target，然后取<code>$event.target.value</code>即可</li><li>如果没有则直接取它的值，不然会有**[object InputEvent]**的BUG</li></ul><h2 id="object-InputEvent-的BUG"><a href="#object-InputEvent-的BUG" class="headerlink" title="[object InputEvent]的BUG"></a>[object InputEvent]的BUG</h2><p><img src="https://pic.imgdb.cn/item/6432d0c30d2dde5777bad699.jpg"></p><p><img src="https://pic.imgdb.cn/item/6432d0f80d2dde5777bb24d0.jpg"></p><p>解决方案就是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value = el.target ? el.target.value : el</span><br></pre></td></tr></table></figure><p>如果是和我一样用了Navie UI中的Input进行一个v-model的二次封装的话，可以用 <code>:on-update:value</code>来进行emit方法的绑定</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">n-input</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul><li><p>除了上面说的这种通过原生的input事件搭配v-on的方法实现父子组件的v-model传值的方法外，还有其他可以用的方法</p></li><li><p>比如可以通过<code>watch</code>方法进行监听<code>props.value</code>，当value发生变化的时候，通过emit给父组件传改变后的值</p></li><li><p>也可以通过计算属性<code>computed</code>来拦截父组件传过来的value，进行修改。</p></li><li><p>另外，这个v-model的父子传值还能绑定多个，<strong>也就是说可以搞多个v-model的绑定</strong>，进行父子传值间的双向绑定。</p></li></ul><h2 id="最后附上自己的Naive-UI的Input组件二次封装"><a href="#最后附上自己的Naive-UI的Input组件二次封装" class="headerlink" title="最后附上自己的Naive UI的Input组件二次封装"></a>最后附上自己的Naive UI的Input组件二次封装</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center inputString&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!selfSelect &amp;&amp; (typeof (props.value) !== &#x27;number&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-input</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;props.value || &#x27;&#x27;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;w-50 m-2&quot;</span> <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:disabled</span>=<span class="string">&quot;props.disabled&quot;</span> <span class="attr">:maxlength</span>=<span class="string">&quot;selfMaxLength&quot;</span> <span class="attr">:allow-input</span>=<span class="string">&quot;selfAllow&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputInstRef&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prefix</span> <span class="attr">v-if</span>=<span class="string">&quot;props.Icon&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">:component</span>=<span class="string">&quot;Icon&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文字输入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center inputNumber&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;!selfSelect &amp;&amp; typeof (props.value) === &#x27;number&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-input-number</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center popInput w-full&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;props.disabled&quot;</span> <span class="attr">:show-button</span>=<span class="string">&quot;false&quot;</span> <span class="attr">:min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:validator</span>=<span class="string">&quot;validator&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ref</span>=<span class="string">&quot;inputInstRef&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prefix</span> <span class="attr">v-if</span>=<span class="string">&quot;props.Icon&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">:component</span>=<span class="string">&quot;Icon&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-input-number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">n-space</span> <span class="attr">vertical</span> <span class="attr">v-else-if</span>=<span class="string">&quot;selfSelect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-select</span> <span class="attr">:value</span>=<span class="string">&quot;props.value || &#x27;&#x27;&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;Options&quot;</span> @<span class="attr">update:value</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">n-space</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> vail <span class="keyword">from</span> <span class="string">&#x27;@/utils/validator&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Icon</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">placeholder</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">disabled</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:value&quot;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&#x27;Inputing&#x27;, el)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const value = el.target ? el.target.value : el</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, el)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vailRule = <span class="title function_">vail</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> index = <span class="title class_">Object</span>.<span class="title function_">keys</span>(vailRule).<span class="title function_">indexOf</span>(props.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfRequired = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfMaxLength = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfMessage = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfAllow = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfPattern = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfSelect = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; required, maxlength, message, allowInput, pattern, select &#125; = vailRule[props.<span class="property">title</span>]</span></span><br><span class="line"><span class="language-javascript">    selfRequired.<span class="property">value</span> = required</span></span><br><span class="line"><span class="language-javascript">    selfMaxLength.<span class="property">value</span> = maxlength</span></span><br><span class="line"><span class="language-javascript">    selfMessage.<span class="property">value</span> = message</span></span><br><span class="line"><span class="language-javascript">    selfAllow.<span class="property">value</span> = allowInput</span></span><br><span class="line"><span class="language-javascript">    selfPattern.<span class="property">value</span> = pattern</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (select) &#123;</span></span><br><span class="line"><span class="language-javascript">        selfSelect.<span class="property">value</span> = select</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">validator</span> = (<span class="params">x: number</span>) =&gt; x &gt;= <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 角色选项</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; <span class="title class_">Options</span> &#125; = <span class="title function_">toRefs</span>(<span class="title function_">useState</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: fit-content;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">    -webkit-line-clamp: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 显示的行数，这里限制为两行 */</span></span></span><br><span class="line"><span class="language-css">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 超出盒子部分隐藏 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 文字超出两行的部分为省略号 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue父子组件通过v-model双向绑定传值&quot;&gt;&lt;a href=&quot;#Vue父子组件通过v-model双向绑定传值&quot; class=&quot;headerlink&quot; title=&quot;Vue父子组件通过v-model双向绑定传值&quot;&gt;&lt;/a&gt;Vue父子组件通过v-model双向绑定</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue打包使用CDN优化项目</title>
    <link href="https://aliveseven.github.io/posts/e42836c1/"/>
    <id>https://aliveseven.github.io/posts/e42836c1/</id>
    <published>2023-08-15T14:52:25.913Z</published>
    <updated>2023-01-07T15:44:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue打包使用CDN优化项目"><a href="#Vue打包使用CDN优化项目" class="headerlink" title="Vue打包使用CDN优化项目"></a>Vue打包使用CDN优化项目</h1><h2 id="优化原因"><a href="#优化原因" class="headerlink" title="优化原因"></a>优化原因</h2><p>在没有使用CDN加速的情况下，打包后的js和css文件有时会很大，<strong>甚至有1M或者几M以上</strong>，而且随着项目的越做越大，打包出来的文件就更大了，而在页面加载的时候，会拖慢加载速度，如果有CDN全站加速可能还好，如果托管于GitHub Page上面的话，会让加载速度变得很慢。</p><ul><li>比如下图，在没有使用CDN加速的情况下，可以看出element-ui、vue、vuex、vue-router这些依赖都打进chunk-vendors.js中导致体积很大</li></ul><p><img src="https://m1.im5i.com/2022/09/03/Uq01GH.png" alt="Uq01GH.png"></p><h2 id="查看依赖版本"><a href="#查看依赖版本" class="headerlink" title="查看依赖版本"></a>查看依赖版本</h2><p>首先项目中需要使用依赖项，<strong>打开项目中的vue.config.js</strong>，查看要加速的包的版本，我这里项目中打算将element-ui、vue、vuex、vue-router这些包进行分离，让它们通过cdn加速来载入页面，记录其依赖版本方便后面使用。</p><p><img src="https://m1.im5i.com/2022/09/03/Uq03xT.png" alt="Uq03xT.png"></p><table><thead><tr><th>依赖名称</th><th>依赖版本</th></tr></thead><tbody><tr><td>vue</td><td>2.6.14</td></tr><tr><td>vue-router</td><td>3.1.3</td></tr><tr><td>vuex</td><td>3.6.2</td></tr><tr><td>element-ui</td><td>2.15.6</td></tr><tr><td>axios</td><td>0.26.1</td></tr></tbody></table><h2 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h2><ul><li><strong>打开vue.config.js</strong></li></ul><p>写入下面的代码，externals为要加速的包名和挂载在window上的对象属性名称，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue打包优化-CDN加速</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为生产环境</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 本地环境是否需要使用cdn</span></span><br><span class="line"><span class="keyword">const</span> devNeedCdn = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cdn = &#123;</span><br><span class="line">  <span class="comment">// cdn：模块名称和模块作用域命名（对应window里面挂载的变量名称）</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">      <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="attr">vuex</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;element-ui&quot;</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// cdn的css链接</span></span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.6/theme-chalk/index.min.css&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// cdn的js链接</span></span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue-router@3.1.3/dist/vue-router.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcss.com/axios/0.26.1/axios.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.6/index.min.js&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">lintOnSave</span>: <span class="literal">false</span>, <span class="comment">// 关闭eslint</span></span><br><span class="line"><span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? <span class="string">&#x27;&#x27;</span><span class="comment">//这里写展示页面的仓库名称</span></span><br><span class="line">    : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ============注入cdn start============</span></span><br><span class="line">config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 生产环境或本地需要cdn时，才注入cdn</span></span><br><span class="line"><span class="keyword">if</span> (isProduction || devNeedCdn) args[<span class="number">0</span>].<span class="property">cdn</span> = cdn</span><br><span class="line"><span class="keyword">return</span> args</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 用cdn方式引入，则构建时要忽略相关资源</span></span><br><span class="line"><span class="keyword">if</span> (isProduction || devNeedCdn) config.<span class="property">externals</span> = cdn.<span class="property">externals</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><ul><li>这里也需要说明一下，这个index.html页面的位置一般在public目录下。<br>需要给index.html的<code>&lt;head&gt;</code>里面加点东西，才能使上面的加速链接载入到head里面。</li><li>写入下面的代码到<code>&lt;head&gt;</code>里面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class="line"> htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class="line"> htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/03/Uq04qA.png" alt="Uq04qA.png"></p><blockquote><p><strong>注意，CDN的引用必须写在上面</strong></p></blockquote><ul><li>配置好之后，重写执行打包操作即可。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue打包使用CDN优化项目&quot;&gt;&lt;a href=&quot;#Vue打包使用CDN优化项目&quot; class=&quot;headerlink&quot; title=&quot;Vue打包使用CDN优化项目&quot;&gt;&lt;/a&gt;Vue打包使用CDN优化项目&lt;/h1&gt;&lt;h2 id=&quot;优化原因&quot;&gt;&lt;a href=&quot;#优</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="CDN" scheme="https://aliveseven.github.io/tags/CDN/"/>
    
  </entry>
  
  <entry>
    <title>Vue虚拟列表</title>
    <link href="https://aliveseven.github.io/posts/4d7fcd88/"/>
    <id>https://aliveseven.github.io/posts/4d7fcd88/</id>
    <published>2023-08-15T14:52:25.913Z</published>
    <updated>2023-04-03T08:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue虚拟列表"><a href="#Vue虚拟列表" class="headerlink" title="Vue虚拟列表"></a>Vue虚拟列表</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>最近在开发一个通用组件排行榜的时候，需要展示多条数据，数据量虽然不大，但是开发的组件需要嵌入到PC、安卓、IOS多端适配。</li><li>适配的时候需要处理一下这些数据量，不然会产生性能问题</li><li>然后在浏览谷歌的时候就发现虚拟列表这个东西</li></ul><h2 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h2><ul><li>虚拟列表是指对列表的 <code>可视区域</code> 进行渲染，对 <code>非可见区域</code> 不渲染或部分渲染，从而极大提高渲染性能的一种技术。</li></ul><h2 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h2><ul><li>目前我觉得比较好用的库是**<a href="https://github.com/Akryum/vue-virtual-scroller">vue-virtual-scroller</a>**</li><li>此外还有vue*-*virtual-scroll-list、react-virtualized等</li></ul><h2 id="Vue-Virtual-Scroller的使用"><a href="#Vue-Virtual-Scroller的使用" class="headerlink" title="Vue-Virtual-Scroller的使用"></a>Vue-Virtual-Scroller的使用</h2><ul><li>官方教程：<a href="https://github.com/Akryum/vue-virtual-scroller/blob/master/packages/vue-virtual-scroller/README.md">https://github.com/Akryum/vue-virtual-scroller/blob/master/packages/vue-virtual-scroller/README.md</a></li><li>官方的较为详细哦</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller@next</span><br><span class="line"></span><br><span class="line">yarn add vue-virtual-scroller@next</span><br><span class="line"></span><br><span class="line">npm install --save vue-virtual-scroller@next --legacy-peer-deps</span><br></pre></td></tr></table></figure><h2 id="在main-js中全局使用"><a href="#在main-js中全局使用" class="headerlink" title="在main.js中全局使用"></a>在main.js中全局使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class="line">import VueVirtualScroller from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(VueVirtualScroller)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h3 id="RecycleScroller组件"><a href="#RecycleScroller组件" class="headerlink" title="RecycleScroller组件"></a>RecycleScroller组件</h3><ul><li>使用该组件的时候，需要给定每个item的高度</li><li>而DynamicScroller组件，则是不需要知道item的高度，自动计算其值</li><li>首先在需要使用的组件中引入 ↓</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; DynamicScroller &#125; from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import &#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;;</span><br></pre></td></tr></table></figure><ul><li>然后直接使用即可，有几个props需要在使用的时候传入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;reyclerList&quot;&gt;</span><br><span class="line">    &lt;RecycleScroller</span><br><span class="line">      style=&quot;height: 100%;&quot;</span><br><span class="line">      v-if=&quot;list.length &gt; 0&quot;</span><br><span class="line">      :items=&quot;list&quot;</span><br><span class="line">      :item-size=&quot;50&quot;</span><br><span class="line">      key-field=&quot;id&quot;</span><br><span class="line">      :minItemSize=&quot;0&quot;</span><br><span class="line">      :buffer=&quot;200&quot;</span><br><span class="line">      v-slot=&quot;&#123; item , index &#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; index &#125;&#125; :&#123;&#123; item.nums &#125;&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/RecycleScroller&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; RecycleScroller &#125; from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import &#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    RecycleScroller</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const list = []</span><br><span class="line">    for(let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">      list.push(&#123;</span><br><span class="line">        id: i,</span><br><span class="line">        nums: `list-nums $&#123;i&#125;`</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.reyclerList&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="https://pic.imgdb.cn/item/642a8911a682492fcc2e522f.gif"></p><ul><li>可以看到，使用了RecycleScroller加载1万条数据，只会渲染部分dom，而不会全部加载出来，通过这种方式可以减少dom的加载，极大优化性能</li></ul><h2 id="DynamicScroller组件"><a href="#DynamicScroller组件" class="headerlink" title="DynamicScroller组件"></a>DynamicScroller组件</h2><ul><li>DynamicScroller和RecycleScroller差不多，但是它可以不</li></ul><h2 id="相关props传参"><a href="#相关props传参" class="headerlink" title="相关props传参"></a>相关props传参</h2><ul><li><code>items</code>: 要在滚动条中显示的总列表。</li><li><code>direction</code> (default: <code>&#39;vertical&#39;</code>): 滚动的方向，列表的方向，有垂直和水平，默认是垂直方向， <code>&#39;vertical&#39;</code> or <code>&#39;horizontal&#39;</code>.</li><li><code>itemSize</code>: 子列表的高度，默认为null，在RecycleScroller中必须要设置这个</li><li><code>minItemSize</code>: 如果子列表的高度（或水平模式下的宽度）未知，则使用最小尺寸。</li><li><code>keyField</code>: 默认是是<code>id</code>，列表循环的key值，一般这个也是必传的</li><li><code>buffer</code>: 默认是<code>200</code>，到滚动可见区域的边缘以开始渲染更远的项目的像素量。默认是上下200px处的都会进行缓存渲染</li><li><code>emitUpdate</code>: 默认是<code>false</code>，表示是否要开启更新模式，官方描述：触发一个 <code>&#39;update&#39;</code> 时间，一般会配合钩子函数<code>update</code>一起使用</li></ul><h2 id="相关Events，钩子函数"><a href="#相关Events，钩子函数" class="headerlink" title="相关Events，钩子函数"></a>相关Events，钩子函数</h2><ul><li><code>update (startIndex, endIndex, visibleStartIndex, visibleEndIndex)</code>: 每次滚动的时候，当可使区域发生变化，触发该钩子函数的方法，仅当props——<code>emitUpdate</code> 为true的时候生效</li><li><code>scroll-start</code>: 当第一个item渲染完的时候触发</li><li><code>scroll-end</code>: 当最后的一个item渲染完的时候触发</li></ul><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><ul><li><code>item</code>: 可视区域的item</li><li><code>index</code>: item的下标</li><li><code>active</code>: 可视活动状态下的item</li></ul><h2 id="虚拟列表的原理"><a href="#虚拟列表的原理" class="headerlink" title="虚拟列表的原理"></a>虚拟列表的原理</h2><ul><li>这里参考了掘金大佬的图，可以很好的解释了虚拟列表的原理</li></ul><p><img src="https://pic.imgdb.cn/item/642a8e9aa682492fcc371e6d.jpg"></p><ul><li>简单来说就是在滚动的时候，让上面和下面的item通过transform向上平移，这样做就可以只渲染少量的dom，减少不必要真实dom的渲染。</li><li>监听滚动</li><li>需要知道item的高度，每次滚动对每个item进行transform计算</li><li>根据滚动的距离和item的高度，计算出<code>startIndex</code></li><li>再根据<code>startIndex</code>和可视区高度计算出<code>endIndex</code></li><li>滚动时候，计算出可视区列表的偏移距离 <code>startOffset</code>，再重新计算<code>startIndex</code>和<code>endIndex</code></li></ul><h2 id="手写虚拟列表"><a href="#手写虚拟列表" class="headerlink" title="手写虚拟列表"></a>手写虚拟列表</h2><p>…待更</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue虚拟列表&quot;&gt;&lt;a href=&quot;#Vue虚拟列表&quot; class=&quot;headerlink&quot; title=&quot;Vue虚拟列表&quot;&gt;&lt;/a&gt;Vue虚拟列表&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
