<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2022-09-11T12:43:07.180Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue2和Vue3的区别</title>
    <link href="https://aliveseven.github.io/posts/94db3a18/"/>
    <id>https://aliveseven.github.io/posts/94db3a18/</id>
    <published>2022-09-09T17:54:23.130Z</published>
    <updated>2022-09-11T12:43:07.180Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2和Vue3的区别"><a href="#Vue2和Vue3的区别" class="headerlink" title="Vue2和Vue3的区别"></a>Vue2和Vue3的区别</h1><h2 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h2><ol><li><strong>Vue2</strong>使用的是<strong>Object.defineProperty()</strong>进行数据劫持，结合<strong>发布订阅</strong>的方式实现。</li><li><strong>Vue3</strong>使用的是<strong>Proxy代理</strong>，使用<strong>ref或者reactive</strong>将数据转化为响应式数据</li></ol><h3 id="使用proxy代理的优势"><a href="#使用proxy代理的优势" class="headerlink" title="使用proxy代理的优势"></a>使用proxy代理的优势</h3><ol><li>defineProperty只能监听某个属性，不能对全对象监听</li><li>可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</li><li>可以监听数组，不用再去单独的对数组做特异性操作，通过Proxy可以直接拦截所有对象类型数据的操作。</li></ol><h2 id="数据和方法的定义"><a href="#数据和方法的定义" class="headerlink" title="数据和方法的定义"></a>数据和方法的定义</h2><ol><li><p>Vue2使用的是选项类型API（Options API），Vue3使⽤的是合成型API（Composition API）</p></li><li><p>Vue2：</p><p>data() { return {}; }, methods:{ }</p></li><li><p>Vue3：</p><p>数据和方法都定义在setup中，并return出来，在vue3中this是undefined，所以在setup中不能用this</p></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><div class="table-container"><table><thead><tr><th>vue2</th><th>vue3</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td><td>组件创建之前</td></tr><tr><td>created</td><td>setup()</td><td>组件创建完成</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>onMounted</td><td>组件挂载完成</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td><td>数据更新，虚拟DOM打补丁之前</td></tr><tr><td>updated</td><td>onUpdated</td><td>数据更新，虚拟DOM渲染完成</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td><td>组件销毁之前</td></tr><tr><td>destroyed</td><td>onUnmounted</td><td>组件销毁后</td></tr><tr><td>activated</td><td>onActivated</td><td></td></tr><tr><td>deactivated</td><td>onDeactivated</td></tr></tbody></table></div><h2 id="指令与插槽"><a href="#指令与插槽" class="headerlink" title="指令与插槽"></a>指令与插槽</h2><ol><li>vue2中使用slot可以直接使用slot,而vue3中必须使用v-slot的形式</li><li>v-for与v-if在vue2中优先级高的是v-for指令，vue3中v-if优先级更高</li><li>vue3中移除keyCode作为v-on的修饰符，当然也不支持config.keyCodes</li><li>vue3中移除v-on.native修饰符</li><li><strong>vue3中移除过滤器filter</strong></li><li>vue3在组件模板<code>&lt;template/&gt;</code>中，不需要跟根节点<code>&lt;div/&gt;</code>，就是说在组件可以拥有多个根节点。</li></ol><h2 id="Composition-API-组合API"><a href="#Composition-API-组合API" class="headerlink" title="Composition API (组合API)"></a>Composition API (组合API)</h2><p>Vue2和Vue3最大的区别就是Vue3使用了Composition API (组合api)</p><p>Vue2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">// 数据</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;&#125;,</span><br><span class="line">    // 方法</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    components:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;h</span><br></pre></td></tr></table></figure><p>Vue3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这样代码会更加简洁和整洁。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        // 数据 和 方法都在setup里面使用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="全局API改动"><a href="#全局API改动" class="headerlink" title="全局API改动"></a>全局API改动</h2><div class="table-container"><table><thead><tr><th>2.x 全局 API</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config</td><td>app.config</td></tr><tr><td>Vue.config.productionTip</td><td><em>removed</em> 已移除</td></tr><tr><td>Vue.config.ignoredElements</td><td>app.config.isCustomElement</td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.version</td><td>app.version</td></tr><tr><td>Vue.filter</td><td><em>removed</em> 已移除</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr><tr><td>Vue.extend</td><td><em>removed</em> 已移除</td></tr></tbody></table></div><blockquote><p><code>app</code>通过<code>createApp</code>方法创建。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const app = createApp(App);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>vue经历从2.0到3.0更新之后，简而言之就是变得更轻，更快，有更好的TypeScript支持，使用起来更加方便</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2和Vue3的区别&quot;&gt;&lt;a href=&quot;#Vue2和Vue3的区别&quot; class=&quot;headerlink&quot; title=&quot;Vue2和Vue3的区别&quot;&gt;&lt;/a&gt;Vue2和Vue3的区别&lt;/h1&gt;&lt;h2 id=&quot;数据双向绑定原理&quot;&gt;&lt;a href=&quot;#数据双向绑</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment（底部导航）的使用</title>
    <link href="https://aliveseven.github.io/posts/f8b76465/"/>
    <id>https://aliveseven.github.io/posts/f8b76465/</id>
    <published>2022-09-09T15:24:11.506Z</published>
    <updated>2022-09-10T14:50:49.528Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Fragment（底部导航）的使用"><a href="#Android-Fragment（底部导航）的使用" class="headerlink" title="Android Fragment（底部导航）的使用"></a>Android Fragment（底部导航）的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Fragment 是 activity 的界面中的一部分或一种行为。</li><li>你可以把多个 Fragment 们组合到一个activity中来创建一个多面界面并且你可以在多个 activity 中重用一个Fragment。</li><li>你可以把 Fragment 认为模块化的一段activity，它具有自己的生命周期，接收它自己的事件，并可以在 activity 运行时被添加或删除。同时，使用 Fragment 可以 轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸，从手机到平板电脑。 Fragment 替代 TabActivity 做导航，性能更好。</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="开启viewBinding"><a href="#开启viewBinding" class="headerlink" title="开启viewBinding"></a>开启viewBinding</h3><ol><li>首先新建好项目之后，在<strong>build.gradle</strong>文件里面加入一行东西</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启viewBinding</span></span><br><span class="line">buildFeatures &#123;</span><br><span class="line">    viewBinding <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/08/UqGgOh.png" alt=""></p><ul><li>在设置这个之后，通过<strong>View Binding替换findViewById。</strong>，可以更好地进行视图绑定</li></ul><h3 id="新建底部导航选项"><a href="#新建底部导航选项" class="headerlink" title="新建底部导航选项"></a>新建底部导航选项</h3><ol><li>在res文件夹里面新建一个名叫<strong>menu</strong>的文件夹，再新建一个<strong>Menu Resource File</strong>，填好菜单名之后即可</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqejXy.png" alt=""></p><ol><li>再在res文件夹里面新建一个名叫<strong>navigation</strong>的文件夹，然后新建一个<strong>Navigation Resource File</strong>，填好新建文件名即可，这里我填了：mobile_navigation</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeZjh.png" alt=""></p><p><img src="https://m1.im5i.com/2022/09/10/Uqeh9X.png" alt=""></p><ol><li>新建好文件之后，关掉再重新双击mobile_navigation，应该会弹出个警告，我们点OK就行了，弄好之后页面应该是下面这样的。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqecnM.png" alt=""></p><h3 id="新建导航页面"><a href="#新建导航页面" class="headerlink" title="新建导航页面"></a>新建导航页面</h3><ol><li>这里我们新建三个空页面作为底部导航要切换的Fragment页面</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqeq53.png" alt=""></p><ol><li>对三个空页面加个text元素作区别</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqe8w7.png" alt=""></p><ol><li>点击menu，增加底部导航选项item，<strong>注意：item的id必须与导航图mobile_navigation.xml中对应节点（fragment）的id一致（相同）</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeVip.png" alt=""></p><ol><li>返回主页面，找到<strong>NavHostFragment</strong>控件，增加，作为导航切换的地方。增加<strong>BottomNavigationView</strong>控件，增加，作为导航切换的底部选项栏。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeWcv.png" alt=""></p><ol><li>选择对应的导航xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJTvf.png" alt=""></p><ol><li>回到menu.xml文件，给每个item增加导航icon和id，注意：id必须与导航图<strong>mobile_navigation.xml</strong>中对应节点（fragment）的id一致（相同），<strong>id的格式为 @+id 加上导航页面节点的id</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ39h.png" alt=""></p><ol><li>回到主页面，点击<strong>BottomNavigationView</strong>，找到<strong>menu</strong>选项，加入我们刚刚配置好的menu.xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ41X.png" alt=""></p><p><img src="https://m1.im5i.com/2022/09/10/UqJX5M.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-Fragment（底部导航）的使用&quot;&gt;&lt;a href=&quot;#Android-Fragment（底部导航）的使用&quot; class=&quot;headerlink&quot; title=&quot;Android Fragment（底部导航）的使用&quot;&gt;&lt;/a&gt;Android Fra</summary>
      
    
    
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/Java/"/>
    
    <category term="Android" scheme="https://aliveseven.github.io/categories/Android/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux、MySQL、Git常用命令</title>
    <link href="https://aliveseven.github.io/posts/f3b9a43e/"/>
    <id>https://aliveseven.github.io/posts/f3b9a43e/</id>
    <published>2022-09-08T08:28:52.217Z</published>
    <updated>2022-09-08T17:11:31.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux、MySQL、Git常用命令"><a href="#Linux、MySQL、Git常用命令" class="headerlink" title="Linux、MySQL、Git常用命令"></a>Linux、MySQL、Git常用命令</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><ol><li><strong>pwd</strong> //显示当前工作目录</li><li><strong>mkdir</strong> mydir  //创建工作目录</li><li><strong>cd</strong> mydir  //更改工作目录</li><li><strong>rmdir</strong> mydir //删除工作目录</li><li><strong>touch</strong> myfile  //创建文件</li><li><strong>mv</strong> myfile mydir  //移动目录或文件</li><li><strong>cp</strong> myfile myfir  //复制目录或文件</li><li><strong>rm</strong> -rf mydir  //删除目录或文件</li><li><strong>ls</strong> //列出所有文件和目录</li><li><strong>ls -a</strong> //查看所有文件</li><li><strong>ls -l</strong> //详细显示</li></ol><h3 id="文件内容显示和处理"><a href="#文件内容显示和处理" class="headerlink" title="文件内容显示和处理"></a>文件内容显示和处理</h3><ol><li><strong>cat</strong> &gt; myfile  //创建文件并编辑内容（ctrl+D结束编辑）</li><li><strong>cat -n</strong> myfile  //查看文件</li><li><strong>sort</strong> myfile  //对文件内容进行排序</li><li><strong>sort -r</strong> myfile  //逆序</li><li><strong>uniq</strong> myfile  //检查文件中的重复内容</li><li><strong>cut</strong> -b(-c)(-d) 2(3) myfile  //对文件内容进行剪切</li><li><strong>paste</strong> myfile02 myfile01 //对文件内容进行粘贴 02-）01</li></ol><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ol><li><strong>zip</strong> myfile.zip myfile  //压缩</li><li><strong>zip -d</strong> myfile.zip myfile  //添加</li><li><strong>zip -m</strong> myfile.zip myfile  //删除</li><li><strong>unzip -o</strong> myfile.zip  //解压（覆盖）</li><li><strong>unzip -n</strong> myfile.zip  //解压（不覆盖）</li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li><p><strong>create</strong> database name  //创建数据库</p></li><li><p><strong>use</strong> database name  // 选择数据库</p></li><li><p><strong>drop</strong> database name // 直接删除数据库，不提醒</p></li><li><p><strong>insert into</strong> 表名(列1，列2，列3，列4，…) values(值，值，值)  // 增 Insert</p><ul><li>例子 ：insert into student(name,sex,age) values(‘张三’，18，’男’)</li></ul></li><li><p><strong>delete from</strong> 表名 <strong>where</strong> 列=值                                           <strong>// 删delete</strong></p><ul><li>例子 ：<strong>delete from</strong> student where id=1</li></ul></li><li><p><strong>update</strong> 表名 set 列=值，列=值，…. where…                    <strong>// 改 update</strong></p><ul><li>例子 ：<strong>update</strong> student <strong>set</strong> name = ‘张三’ <strong>where</strong> id=1 </li></ul></li><li><p><strong>select</strong> * from 表名                                                                 <strong>// 查询所有</strong></p></li></ol><ul><li>例子：<strong>select</strong> * from student(查询student表中所有列)</li><li>例子2  ：<strong>select</strong> * from student where id =1(表示查询student表中id=1的学生的所有列)</li><li>#去重查询 <strong>DISTINCT</strong>。例子：查询出表当中有哪些性别  SELECT <strong>DISTINCT</strong> sex FROM student</li><li>模糊查询，使用<strong>like</strong>。select * from student where name <strong>like</strong> ‘%王’ 表示模糊查询name以王结束的</li><li>排序查询 <strong>ORDER BY</strong> 倒序关键字<strong>DESC</strong></li></ul><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>git init  // 初始化</li><li>git add // 在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动</li><li>git commit -m “提交的备注信息”  // 提交到仓库</li><li>git remote add origin <a href="mailto:&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#111;&#109;">&#103;&#105;&#116;&#64;&#x67;&#x69;&#116;&#x68;&#117;&#98;&#46;&#x63;&#111;&#109;</a>:帐号名/仓库名.git  //  远程仓库</li><li>git push -u origin master  //  将本地分支的更新内容，全部推送至远程仓库 master 分支</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux、MySQL、Git常用命令&quot;&gt;&lt;a href=&quot;#Linux、MySQL、Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux、MySQL、Git常用命令&quot;&gt;&lt;/a&gt;Linux、MySQL、Git常用命令&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://aliveseven.github.io/tags/Linux/"/>
    
    <category term="MySQL" scheme="https://aliveseven.github.io/tags/MySQL/"/>
    
    <category term="git" scheme="https://aliveseven.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础</title>
    <link href="https://aliveseven.github.io/posts/dc8ffbe9/"/>
    <id>https://aliveseven.github.io/posts/dc8ffbe9/</id>
    <published>2022-09-07T18:04:53.056Z</published>
    <updated>2022-09-08T17:29:37.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript基础"><a href="#TypeScript基础" class="headerlink" title="TypeScript基础"></a>TypeScript基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TS是JS的超集，所以JS基础的类型都包含在内</p><ul><li><strong>首先安装 npm install typescript -g</strong></li></ul><p>安装完之后，运行<strong>tsc -v</strong>可以看到当前ts的版本号</p><ul><li>nodejs环境执行ts文件</li><li><strong>npm i @types/node —save-dev </strong>（node环境支持的依赖必装）</li><li><strong>npm i ts-node —g</strong></li></ul><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>基础类型：Boolean、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的 Symbol 和 ES10 的 BigInt。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>用string来定义，其中可以用`来定义ES6中的模板字符串，${expr}用来表示在模板字符串中的嵌入表达式。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str : <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 : <span class="built_in">string</span> = <span class="string">`web <span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li>支持十六<a href="https://so.csdn.net/so/search?q=进制&amp;spm=1001.2101.3001.7020">进制</a>、十进制、八进制和二进制；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notANumber : <span class="built_in">number</span> = <span class="title class_">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> num : <span class="built_in">number</span> = <span class="number">1234</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> infinityNumber : <span class="built_in">number</span> = <span class="title class_">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> decimal : <span class="built_in">number</span> = <span class="number">8</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> hex : <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> binary : <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> octal : <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//八进制s</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b : <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 : <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b3 : <span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个Boolean对象</span></span><br><span class="line"><span class="keyword">let</span> b4 : <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a>空值类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n : <span class="built_in">void</span> = <span class="literal">undefined</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m : <span class="built_in">void</span> = <span class="literal">null</span> <span class="comment">// 严格模式下不允许</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,m) <span class="comment">// undefined,null</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空类型函数，不需要return</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) : <span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></li></ul><h4 id="void和undefined和null的区别"><a href="#void和undefined和null的区别" class="headerlink" title="void和undefined和null的区别"></a>void和undefined和null的区别</h4><ul><li>void类型不能赋值为undefined</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写会报错 void类型不可以分给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样是没问题的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br><span class="line"> </span><br><span class="line"><span class="comment">//或者这样的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><hr><p>注意：如果你配置了tsconfig.json 开启了严格模式，<strong>null 不能 赋予 void 类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><ul><li>没有特定要哪个类型的时候，可以用any进行声明，而且可以随意切换类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">any</span> = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;AliveSeven&#x27;</span></span><br><span class="line">a = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>声明变量的时候没有指定任意类型默认为any</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">a = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;Aliving&#x27;</span></span><br><span class="line">a = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注意：如果使用any 就失去了TS类型检测的作用</p><p>TypeScript 3.0中引入的 <strong>unknown</strong> 类型，它是<strong>any</strong>类型对应的安全类型，比<strong>any</strong>更安全。</p><ul><li>unknown类型比any更加严格当你要使用any 的时候可以尝试使用unknow</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span>;</span><br><span class="line"> </span><br><span class="line">value = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">value = [];               <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br><span class="line"><span class="comment">//unknown类型不能赋值给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样就没问题 any类型是可以的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">any</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a   </span><br><span class="line"> </span><br><span class="line"><span class="comment">//unknown可赋值对象只有unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bbb</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aaa</span>:<span class="built_in">any</span>= <span class="string">&#x27;456&#x27;</span></span><br><span class="line"> </span><br><span class="line">aaa = bbb</span><br></pre></td></tr></table></figure><h2 id="接口和对象类型"><a href="#接口和对象类型" class="headerlink" title="接口和对象类型"></a>接口和对象类型</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>在ts中，我们定义对象的方式要用<strong>interface</strong>（接口）。</li><li>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种<strong>限制和规范</strong>的作用。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span></span><br><span class="line"><span class="comment">//使用接口约束的时候不能多一个属性也不能少一个属性</span></span><br><span class="line"><span class="comment">//必须与接口保持一致</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;213&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同名的接口，会合并</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名interface  可以合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,age : 20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>B接口继承了A接口，那么B接口的对象要有A接口的变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">interface</span> A&#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A&#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> obj : B = &#123;</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line">    name : <span class="string">&quot;AliveSeven&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)  <span class="comment">// &#123; age: 20, name: &#x27;AliveSeven&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="可选属性：-操作符"><a href="#可选属性：-操作符" class="headerlink" title="可选属性：?操作符"></a>可选属性：?操作符</h3><ul><li>?操作符用于声明<strong>可有可无的</strong>变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性的含义是该属性可以不存在</span></span><br><span class="line"><span class="comment">//所以说这样写也是没问题的</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    b?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意属性-propName-string"><a href="#任意属性-propName-string" class="headerlink" title="任意属性 [propName: string]"></a>任意属性 [propName: string]</h3><p>注意：<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这个例子当中我们看到接口中并没有定义sex但是并没有报错</span></span><br><span class="line"><span class="comment">//应为我们定义了[propName: string]: any;</span></span><br><span class="line"><span class="comment">//允许添加新的任意属性</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,sex : &#x27;boy&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h3><ul><li>readonly 只读属性是不允许被赋值的只能读取</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的</span></span><br><span class="line"><span class="comment">//因为sex是只读的不允许重新赋值</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">a.<span class="property">sex</span> = <span class="string">&#x27;girl&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="增加函数"><a href="#增加函数" class="headerlink" title="增加函数"></a>增加函数</h3><ul><li>接口里面可以声明函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="title function_">exam</span>() : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    <span class="attr">exam</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name: &#x27;AliveSeven&#x27;, sex: &#x27;boy&#x27;, exam: [Function: exam] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><ul><li>常见的声明数组方法👇</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   <span class="comment">// 数字类型数组</span></span><br><span class="line"><span class="keyword">let</span> b : <span class="built_in">string</span>[] = [<span class="string">&#x27;Alive&#x27;</span>,<span class="string">&#x27;Seven&#x27;</span>]  <span class="comment">//字符串类型数组</span></span><br><span class="line"><span class="keyword">let</span> c : <span class="built_in">boolean</span>[] = [<span class="literal">true</span> , <span class="literal">false</span>]  <span class="comment">// 布尔类型数组</span></span><br><span class="line"><span class="keyword">let</span> d : <span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Love&#x27;</span>,<span class="literal">true</span>]   <span class="comment">// 任意类型数组</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)  <span class="comment">// [ 1, 2, 3 ] [ &#x27;Alive&#x27;, &#x27;Seven&#x27; ] [ true, false ] [ 1, 2, &#x27;Love&#x27;, true ]</span></span><br></pre></td></tr></table></figure><ul><li>数组泛型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr : <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">66</span> , <span class="number">77</span> , <span class="number">88</span>]</span><br><span class="line"><span class="keyword">let</span> str : <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Love&#x27;</span> , <span class="string">&#x27;You&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> x : <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span>&gt; = [<span class="literal">true</span> , <span class="literal">false</span>]</span><br><span class="line"><span class="keyword">let</span> y : <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; = [<span class="number">1</span> , <span class="literal">true</span> , <span class="string">&#x27;Fly&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="keyword">let</span> z : <span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;&gt; = [[<span class="number">1</span> , <span class="number">2</span> , <span class="string">&#x27;Alive&#x27;</span>] , [<span class="number">66</span> , <span class="string">&#x27;Seven&#x27;</span> , <span class="string">&#x27;77&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr,str,x,y) <span class="comment">//  [ 66, 77, 88 ] [ &#x27;Love&#x27;, &#x27;You&#x27; ] [ true, false ] [ 1, true, &#x27;Fly&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z)  <span class="comment">// [ [ 1, 2, &#x27;Alive&#x27; ], [ 66, &#x27;Seven&#x27;, &#x27;77&#x27; ] ]</span></span><br></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    [index : <span class="built_in">number</span>] : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// [ 1,2,3,4 ]</span></span><br></pre></td></tr></table></figure><h3 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">//错误的arguments 是类数组不能这样定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) </span><br><span class="line">    <span class="comment">//ts内置对象IArguments 定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">IArguments</span> = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArguments</span> &#123;</span><br><span class="line">[<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line"><span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><ul><li>fn = (函数变量1 , 函数变量2 …) : 函数类型 =&gt; { 函数返回值 }</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn = (函数变量1 , 函数变量2 , 可选函数变量3 ) : 函数类型 =&gt; &#123; 函数返回值 &#125;</span></span><br><span class="line"><span class="keyword">const</span> fn = (name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex? : <span class="built_in">string</span>) : <span class="function"><span class="params">string</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (name + age + sex)  <span class="comment">// 返回name+age+sex组合字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : <span class="built_in">string</span> = <span class="title function_">fn</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// AliveSeven20undefined</span></span><br></pre></td></tr></table></figure><ul><li>可以接口来约束方法变量和类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = (a : A) : <span class="function"><span class="params">A</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x : A = &#123; name : <span class="string">&#x27;步君&#x27;</span> , age : <span class="number">21</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( x ) <span class="comment">// &#123; name: &#x27;步君&#x27;, age: 21 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul><li>重载是<strong>方法名字相同</strong>，而<strong>参数不同</strong>，返回类型可以相同也可以不同。</li><li>参数类型不同时，应设置为 <strong>any</strong>。</li><li>参数数量不同时，可以将不同的参数设置为<strong>可选</strong>。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">string</span>, params2: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">any</span>, params2?: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params2)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>,<span class="number">456</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript基础&quot;&gt;&lt;a href=&quot;#TypeScript基础&quot; class=&quot;headerlink&quot; title=&quot;TypeScript基础&quot;&gt;&lt;/a&gt;TypeScript基础&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>css开发中一些常用的文本规划</title>
    <link href="https://aliveseven.github.io/posts/5e549d65/"/>
    <id>https://aliveseven.github.io/posts/5e549d65/</id>
    <published>2022-09-07T17:09:45.694Z</published>
    <updated>2022-09-07T18:05:24.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css开发中一些常用的文本规划"><a href="#css开发中一些常用的文本规划" class="headerlink" title="css开发中一些常用的文本规划"></a>css开发中一些常用的文本规划</h1><h2 id="文本限制行数，超出后显示为省略号"><a href="#文本限制行数，超出后显示为省略号" class="headerlink" title="文本限制行数，超出后显示为省略号"></a>文本限制行数，超出后显示为省略号</h2><p>主要把装着文字的盒子设为-webkit-box布局，然后设置以下的属性即可，主要-webkit-line-clamp是为限制的行数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box; <span class="comment">/* 对象作为伸缩盒子模型显示 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; <span class="comment">/* 显示的行数，这里限制为两行 */</span></span><br><span class="line">-webkit-box-orient: vertical; <span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式，这里为向下排 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/* 超出盒子部分隐藏 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;  <span class="comment">/* 文字超出两行的部分为省略号 */</span></span><br><span class="line"><span class="attribute">word-break</span>: break-all;  <span class="comment">/* break-all(允许在单词内换行。) */</span>  </span><br></pre></td></tr></table></figure><h2 id="文本识别’-n’换行符"><a href="#文本识别’-n’换行符" class="headerlink" title="文本识别’\n’换行符"></a>文本识别’\n’换行符</h2><ul><li>将文本盒子<strong>white-space</strong>设为pre-wrap</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// pre-wrap保留空白符序列，但是正常地进行换行。</span><br><span class="line">text&#123;</span><br><span class="line">   <span class="attribute">white-space</span>: pre-wrap; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里讲一下<strong>white-space</strong>这个属性</li></ul><p><img src="https://m1.im5i.com/2022/09/08/UqG043.png"></p><table><thead><tr><th>white-space属性</th><th>源码空格</th><th>源码换行</th><th><br>换行</th><th>容器边界换行</th></tr></thead><tbody><tr><td>normal</td><td>合并</td><td>忽略</td><td>换行</td><td>换行</td></tr><tr><td>nowrap</td><td>合并</td><td>忽略</td><td>换行</td><td>不换行</td></tr><tr><td>pre</td><td>保留</td><td>换行</td><td>换行</td><td>不换行</td></tr><tr><td>pre-wrap</td><td>保留</td><td>换行</td><td>换行</td><td>换行</td></tr><tr><td>pre-line</td><td>合并</td><td>换行</td><td>换行</td><td>换行</td></tr></tbody></table><h2 id="灵活运用rem单位实现文字大小自适应"><a href="#灵活运用rem单位实现文字大小自适应" class="headerlink" title="灵活运用rem单位实现文字大小自适应"></a>灵活运用rem单位实现文字大小自适应</h2><ul><li><strong>rem是一种相对长度单位，通过这个长度单位可以实现元素宽高等比例缩放，从而完成不同宽度屏幕的适配。</strong></li></ul><blockquote><p>rem 主要是为了解决字体随屏幕变化，flex上的高度问题，实现高度和宽度等比例缩放</p></blockquote><ul><li><strong>css3规定：1rem的大小就是根元素<code>&lt;html&gt;</code>的font-size的值。</strong></li></ul><p>​    使用rem单位的好处呢，就是我们如果相对页面的文字大小作修改，那么我们只需要改<code>&lt;html&gt;</code>的font-size值就行了，其它的用了rem单位的文本就会相对的一起作出改变。</p><h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        我是AliveSeven</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">980px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">880px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">780px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">680px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">580px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h3><p><img src="https://m1.im5i.com/2022/09/08/UqGM07.gif" alt="rem演示"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css开发中一些常用的文本规划&quot;&gt;&lt;a href=&quot;#css开发中一些常用的文本规划&quot; class=&quot;headerlink&quot; title=&quot;css开发中一些常用的文本规划&quot;&gt;&lt;/a&gt;css开发中一些常用的文本规划&lt;/h1&gt;&lt;h2 id=&quot;文本限制行数，超出后显示为</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView的简单使用</title>
    <link href="https://aliveseven.github.io/posts/6c6b2a18/"/>
    <id>https://aliveseven.github.io/posts/6c6b2a18/</id>
    <published>2022-09-06T14:06:30.763Z</published>
    <updated>2022-09-06T14:59:06.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-RecyclerView的简单使用"><a href="#Android-RecyclerView的简单使用" class="headerlink" title="Android RecyclerView的简单使用"></a>Android RecyclerView的简单使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>RecyclerView 是如何经过测量、布局，最终绘制到屏幕上</li><li>RecycleView 是在 Android 5.0 版本作为 support-v7 的一个组件出现，高效替代了最初的 ListView 等列表 组件。使用上实现了视图代码解耦，功能上具备强大的 item 复用机制，并且提供默认 多种 LayoutMananger 用来处理多种布局。</li><li>RecyclerView 使用了 ViewHolder 模式，这 样做可以提高性能，因为它无需频繁调用 findViewById()方法即可访问表项的视图。</li><li>在新版的Android开发中，RecyclerView控件被内置到Android Studio中，不需要再去引入依赖项，直接配置即可。</li></ul><h2 id="RecyclerView的基本使用"><a href="#RecyclerView的基本使用" class="headerlink" title="RecyclerView的基本使用"></a>RecyclerView的基本使用</h2><h3 id="RecyclerView组件"><a href="#RecyclerView组件" class="headerlink" title="RecyclerView组件"></a>RecyclerView组件</h3><ol><li>新建一个页面（Activity），在里面引入RecyclerView控件</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWHnv.png"></p><ol start="2"><li>新建一个子组件的item页面，来用作每个组件的展示模板，例如下图这样。</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWPGG.png"></p><h3 id="RecyclerViewHolder类"><a href="#RecyclerViewHolder类" class="headerlink" title="RecyclerViewHolder类"></a>RecyclerViewHolder类</h3><ul><li><p>RecyclerView中的ViewHolder类主要构造方法将<strong>子组件（单条数据）</strong>的ui和组件对象（Java类）关联起来。</p></li><li><p>比如上图我的子组件，我要多条展示的这些数据，每条数据的<strong>名字（name），图片（iv），描述（introduce）</strong>是各不相同的，所以要配置它们，将这些组件用Java类关联起来，然后用Java类方法进行<strong>修改和批量展示</strong>。</p></li><li><p><strong>相关代码：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">    <span class="comment">//展示单条数据的界面组件对象</span></span><br><span class="line">    TextView name;</span><br><span class="line">    ImageView iv;</span><br><span class="line">    TextView introduce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法：将组件（ui）与组件对象（java类）关联起来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecyclerViewHolder</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(view);</span><br><span class="line">        <span class="comment">//关联id = name的组件</span></span><br><span class="line">        name = (TextView) view.findViewById(R.id.name);</span><br><span class="line">        <span class="comment">//关联id = iv的组件</span></span><br><span class="line">        iv = (ImageView) view.findViewById(R.id.iv);</span><br><span class="line">        <span class="comment">//关联id = introduce的组件</span></span><br><span class="line">        introduce = (TextView) view.findViewById(R.id.introduce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RecyclerAdapter类"><a href="#RecyclerAdapter类" class="headerlink" title="RecyclerAdapter类"></a>RecyclerAdapter类</h3><ul><li>RecyclerView中的Adapter是适配器、数据和视图对接的桥梁。</li><li>简单来说，就是新建一个类，在里面设置一些方法，按照item页面的那个模板批量生产子组件，然后将生产的这些子组件塞到一开始新建的那个RecyclerView控件里面，由上往下一个一个排。</li><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;RecyclerViewHolder&gt;&#123;</span><br><span class="line">    <span class="comment">// 创建两个数组包含要展示的数据图片、姓名和它们的详细介绍</span></span><br><span class="line">    <span class="keyword">private</span> String[] names = &#123; <span class="string">&quot;橘猫&quot;</span>, <span class="string">&quot;葫芦娃&quot;</span>, <span class="string">&quot;小怪兽&quot;</span>, <span class="string">&quot;哆啦COS梦&quot;</span>, <span class="string">&quot;小猪佩奇&quot;</span>, <span class="string">&quot;睡爆emo&quot;</span>, <span class="string">&quot;逗乐表情包&quot;</span>, <span class="string">&quot;小松鼠&quot;</span>, <span class="string">&quot;小鲸鱼&quot;</span>, <span class="string">&quot;兔子&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] icons = &#123;R.drawable.a1,R.drawable.a2,R.drawable.a3,R.drawable.a4,R.drawable.a5,</span><br><span class="line">            R.drawable.a6,R.drawable.a7,R.drawable.a8,R.drawable.a9,R.drawable.a10&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] introduces = &#123;</span><br><span class="line">            <span class="string">&quot;橘猫，路边看到的小猫，好像隐藏着什么强大的力量，感觉这不是一只普通的小猫。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;葫芦娃，送头之王，有七兄弟，葫芦娃救爷爷一个一个送&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小怪兽，凹凸曼的好朋友，喜欢和凹凸曼一起去逗乐，特摄节目中的超级猪脚。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;COS哆啦A梦的小朋友，简称哆啦COS梦，可爱，萌，就是没有哆啦A梦那么圆那么胖。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小猪佩奇，一只可爱的粉色小猪，貌似很受小孩子的欢迎，虽然我不知道这有啥好看就是了，说不定很逗乐。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;睡爆emo，上数学课英文课的时候大概就是这样了，梦里什么都有。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;逗乐表情包，一个表情包，挺逗乐的，不过现在估计没什么人用了，时代变了大人。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小松鼠，挺可爱挺萌的，长得还挺像皮卡丘，好想抓一只拿回家里养，就是不知道会不会发电。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小鲸鱼，能够头上喷水的一种鱼，遭受人类的迫害和捕杀，现在濒临灭绝了。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;兔子，一种胆小的动物，突然喧闹声、生人和陌生动物，如猫狗等都会使它惊慌失措。&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="comment">//  加载展示单条数据的布局文件recycler_item.xml</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="type">RecyclerViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecyclerViewHolder</span>(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示单条数据,index代表数据在数组中的下标</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(RecyclerViewHolder holder, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//设置数组names[index]为展示的id为name的text组件</span></span><br><span class="line">        holder.name.setText(names[index]);</span><br><span class="line">        <span class="comment">//设置数组icons[index]为展示的id为iv的Image组件</span></span><br><span class="line">        holder.iv.setImageResource(icons[index]);</span><br><span class="line">        <span class="comment">//设置数组introduces[index]为展示的id为introduce的text组件</span></span><br><span class="line">        holder.introduce.setText(introduces[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  获取所有数据的数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> names.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码看上去可能有点长，其实一点都不复杂，一开始的新建的三个数组就是要批量生产的子组件的数据。</p><p>​    在onCreateViewHolder里，先加载子组件item的模板布局，然后将模板布局里面的子组件通过RecyclerHolder类匹配到Java对象上。</p><p>​    在onBindViewHolder里，将三个数组里的数据，set到item的模板布局上面，简单来说就是拿一个模板，向里面按格式写入东西。</p><p>​    最后，再设置一个getItemCount()方法，获取要批量生产的子组件数量。</p><h3 id="RecyclerViewActivtiy类"><a href="#RecyclerViewActivtiy类" class="headerlink" title="RecyclerViewActivtiy类"></a>RecyclerViewActivtiy类</h3><ol><li>到需要多条展示数据的页面Activtiy类里面</li><li>新建两个对象，一个是RecyclerView类的对象和适配器RecyclerViewAdapter类的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line"><span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br></pre></td></tr></table></figure><ol start="3"><li>布局文件通过findViewById()找到一开始新建的那个Recycler控件</li><li>然后直接按下面的代码一样配置即可</li></ol><ul><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 加载布局文件，里面有recyclerview组件</span></span><br><span class="line">        setContentView(R.layout.activity_recycler_view_activity);</span><br><span class="line">        <span class="comment">//建立组件对象与组件的关联</span></span><br><span class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.id_recyclerview);</span><br><span class="line">        <span class="comment">//设置recyclerview中展现多条数据的方式</span></span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">//创建适配器对象</span></span><br><span class="line">        mAdapter = <span class="keyword">new</span> <span class="title class_">RecyclerViewAdapter</span>();</span><br><span class="line">        <span class="comment">//recyclerview组件对象设置适配器对象，显示recyclerview组件</span></span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/Uq5DNY.gif" alt="Uq5DNY.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-RecyclerView的简单使用&quot;&gt;&lt;a href=&quot;#Android-RecyclerView的简单使用&quot; class=&quot;headerlink&quot; title=&quot;Android RecyclerView的简单使用&quot;&gt;&lt;/a&gt;Android Rec</summary>
      
    
    
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/Java/"/>
    
    <category term="Android" scheme="https://aliveseven.github.io/categories/Android/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）</title>
    <link href="https://aliveseven.github.io/posts/a4ce3df7/"/>
    <id>https://aliveseven.github.io/posts/a4ce3df7/</id>
    <published>2022-09-05T17:38:47.132Z</published>
    <updated>2022-09-06T12:23:05.339Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）"><a href="#Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）" class="headerlink" title="Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）"></a>Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）</h1><h2 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h2><ul><li>给整个document添加监听点击事件，隐藏div</li><li>给div添加监听点击事件，阻止冒泡</li></ul><p><strong>HTML代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;Nav&quot;</span>&gt;</span>导肮展开栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Js代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Nav&#x27;</span>)</span><br><span class="line">   <span class="keyword">var</span> menu = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;menu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 点击body触发函数</span></span><br><span class="line">       <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止冒泡，即阻止触发点击事件</span></span><br><span class="line">   nav[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">       <span class="title function_">stopMaoPao</span>(e)</span><br><span class="line">       menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">   &#125; , <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 阻止菜单冒泡事件</span></span><br><span class="line">   menu[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">       <span class="title function_">stopMaoPao</span>(e)</span><br><span class="line">   &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 阻止事件向上传递，事件冒泡</span></span><br><span class="line">   <span class="comment">// cancelBubble:设置或获取当前事件是否要在事件句柄中向上冒泡</span></span><br><span class="line">   <span class="comment">// stopPropagation符合w3c标准，是应用于firefox浏览器，而不支持IE浏览器</span></span><br><span class="line">   <span class="comment">// 而cancelBubble则相反，不符合w3c标准，只支持ＩＥ浏览器。</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">stopMaoPao</span>(<span class="params">e</span>) &#123; </span><br><span class="line">       e.<span class="property">stopPropagation</span> ? e.<span class="title function_">stopPropagation</span>() : e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Js小提示"><a href="#Js小提示" class="headerlink" title="Js小提示"></a>Js小提示</h3><ul><li>使用addEventListener要注意</li><li>getElementsByClassName getElementByTagName()获取到的都是数组，即使满足条件的元素只有一个，也是数组， 因此在事件监听时，必须加[0]，否则会报错误</li><li>getElementById就不需要加[0]</li><li>addEventListener 第三个参数默认是false，false为冒泡事件，true为捕获事件</li></ul><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/UqMoWH.gif" alt="UqMoWH.gif"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;Nav&quot;</span>&gt;</span>导肮展开栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Nav&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> menu = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;menu&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击body触发函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用addEventListener要注意，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementsByClassName getElementByTagName()获取到的都是数组，即使满足条件的元素只有一个，也是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 因此在事件监听时，必须加[0]，否则会报错误</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementById就不需要加[0]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// addEventListener 第三个参数默认是 false false为冒泡事件 true为捕获事件</span></span></span><br><span class="line"><span class="language-javascript">    nav[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止冒泡，即阻止触发点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">stopMaoPao</span>(e)</span></span><br><span class="line"><span class="language-javascript">        menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; , <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止菜单冒泡事件</span></span></span><br><span class="line"><span class="language-javascript">    menu[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">stopMaoPao</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止事件向上传递，事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// cancelBubble:设置或获取当前事件是否要在事件句柄中向上冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// stopPropagation符合w3c标准，是应用于firefox浏览器，而不支持IE浏览器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 而cancelBubble则相反，不符合w3c标准，只支持ＩＥ浏览器。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">stopMaoPao</span>(<span class="params">e</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">stopPropagation</span> ? e.<span class="title function_">stopPropagation</span>() : e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.Nav</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#a6a6e3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#cbd9dc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最好是采用一个透明的遮罩层进行点击事件从而达到隐藏。</p><p>为什么不采用监听body的监听事件呢，一方面是因为可能会发生点击事故，就是不小心点到其他a标签、跳转标签或者事件触发元素，会直接触发其他函数或者跳转页面；另一方面是因为可维护性不好，假设可以通过点击多个元素关闭，那么需要挨个判断id。</p></blockquote><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li>使用Vue来处理相比Js会灵活很多</li><li>可以在盒子外层加一层固定的遮罩层进行点击事件从而达到隐藏。</li></ul><p><strong>实现代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 采用一个透明的遮罩层进行点击事件从而达到隐藏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;navPhoneOpen&quot;</span> <span class="attr">id</span>=<span class="string">&quot;menu-mask&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;hideNav()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavPhone</span>&gt;</span><span class="tag">&lt;/<span class="name">NavPhone</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用v-show给遮罩层设定展示条件，当<strong>盒子处于显示</strong>时，遮罩层也一起显示，z-index大于body小于盒子即可，点击遮罩层即可触发hideNav()事件，可以<strong>利用vuex定义一个变量用来控制盒子的隐藏和出现</strong></li><li>或者不定义也行，在data()里面定义也可以，方法有很多，反正用一个变量通过v-show来控制盒子的隐藏和显示就行了。</li><li>hideNav()函数就是更改那个控制盒子显示的变量</li></ul><p><img src="https://m1.im5i.com/2022/09/06/UqMtRa.png" alt="UqMtRa.png"></p><h3 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/UqM1dT.gif" alt="UqM1dT.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）&quot;&gt;&lt;a href=&quot;#Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）&quot; class=&quot;headerlink&quot; title=&quot;Js/Vue实现点击div区域外隐藏div区域（</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Flex弹性布局详解</title>
    <link href="https://aliveseven.github.io/posts/8a0f1987/"/>
    <id>https://aliveseven.github.io/posts/8a0f1987/</id>
    <published>2022-09-03T15:42:50.397Z</published>
    <updated>2022-09-03T15:51:25.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex弹性布局详解"><a href="#Flex弹性布局详解" class="headerlink" title="Flex弹性布局详解"></a>Flex弹性布局详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>flex就是flexible box的缩写，意为弹性布局，任何一个容器都可以指定为flex布局</p><p><strong>Webkit</strong>内核的浏览器，必须加上-webkit前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p></blockquote><p>🌀<em><strong>Flex布局与传统布局对比：</strong></em></p><p><strong>传统布局：</strong></p><ul><li>兼容性好</li><li>布局繁琐</li><li>局限（不能在移动端很好的布局）</li></ul><p><strong>FLex布局：</strong></p><ul><li>操作方便，布局简单，移动端广泛应用</li><li>PC端浏览器支持较差</li><li>IE11或更低版本不支持或部分支持</li></ul><p>🌀<em><strong>Flex布局原理：</strong></em></p><p>–通过给父元素添加flex属性来控制子元素的位置和排列方式</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>容器默认存在两根轴：水平的<strong>主轴</strong>（main axis）和垂直的<strong>交叉轴</strong>（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code></p><p>项目默认沿主轴排列，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code></p><p><img src="https://m1.im5i.com/2022/09/03/Uq0A6S.png" alt="Uq0A6S.png"></p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><ol><li><strong>flex-direction：设置主轴方向，一般默认为x轴</strong></li><li><strong>justify-content：设置主轴上的子元素排列方式，一般默认为y轴</strong></li><li><strong>flex-wrap：设置子元素是否换行</strong></li><li><strong>align-items：设置侧轴上子元素排列方式（单行）</strong></li><li><strong>align-content：设置侧轴上子元素排列方式（多行）</strong></li><li><strong>align-self：控制子元素本身在交叉轴上的对齐方式</strong></li><li><strong>flex-flow：复合属性，同时设置了flex-direction和flex-wrap</strong></li></ol><h3 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h3><ul><li><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>row</code>：默认值，主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li></ul><p><img src="https://m1.im5i.com/2022/09/03/Uq0IH0.png" alt="Uq0IH0.png"></p><h3 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h3><ul><li><p><code>justify-content</code> 是用于控制项目在主轴上的对齐方式。</p></li><li><p>常用属性有以下六个</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>flex-start</code><strong>：默认值，子盒子在主轴方向上排列，一般是在x轴水平方向，从左到右。</strong></li><li><code>flex-end</code><strong>：子盒子在主轴方向上反向排列，一般是在x轴水平方向，从右到左边。</strong></li><li><code>center</code><strong>：子盒子在主轴方向上居中。</strong></li><li><code>space-between</code><strong>：子盒子在主轴方向上，两端对齐，然后项目中间间隔是相等的。</strong></li><li><code>space-around</code><strong>：在主轴方向上，在左右两侧会留下边距。</strong></li><li><code>space-evenly</code><strong>：均匀排列每个元素，每个元素之间的间隔相等</strong></li></ul><p><img src="https://image-static.segmentfault.com/250/241/2502411604-75463c5584aa3aff"></p><h4 id="space-around和space-evenly的区别"><a href="#space-around和space-evenly的区别" class="headerlink" title="space-around和space-evenly的区别"></a>space-around和space-evenly的区别</h4><p>​                    <img src="https://m1.im5i.com/2022/09/03/Uq0Hez.md.png" alt="Uq0Hez.md.png"></p><h3 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h3><ul><li><strong>flex-wrap：</strong> 控制项目(子元素)是否换行</li></ul><p>它可能取三个值：</p><ul><li>nowrap：（默认值）不换行；</li><li>wrap：换行，第一行在上方；</li><li>wrap-reverse：换行，第一行在下方。</li></ul><blockquote><p><strong>注意：默认情况下是不换行的，如果父元素装不下会缩小所有子元素的宽度，使子元素挤在一起。</strong></p></blockquote><p><img src="https://m1.im5i.com/2022/09/03/Uq0mTB.png" alt="Uq0mTB.png"></p><h3 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h3><ul><li><code>align-items</code> 是控制项目在交叉轴上的对齐方式，一般是垂直方向y轴上面的。</li><li>有常用的五个属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch | flex-start | flex-end | center | baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>stretch</code>：默认值，如果项目没有设置固定高度，则会被拉伸填充满交叉轴方向剩余的空间。</li><li><code>flex-start</code>：项目在沿交叉轴起始线位置对齐。</li><li><code>flex-end</code>：项目沿交叉轴终点线位置对齐。</li><li><code>center</code>：项目在交叉轴方向居中对齐。</li><li><code>baseline</code>：项目在交叉轴方向沿项目中第一行文字的基线对齐。</li></ul><p><img src="https://image-static.segmentfault.com/352/840/3528400318-699131d320f31e62"></p><blockquote><ol><li>stretch 是“拉伸，拉长”的意思，所以项目会被拉伸</li><li>start、end、center 分别的“起始”、“终点”、“中间”的意思，所以项目分别是起始位置、终端位置、居中对齐。</li><li>baseline 是“基线、底线”的意思，这里是沿文字的基线对齐的意思。</li></ol></blockquote><h3 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h3><ul><li><code>align-content</code> 控制多行项目（多根主轴线）对齐方式。类似 <code>justify-content</code> ，只不过，<code>align-content</code> 是控制行与行之间的空间分配，<code>justify-content</code> 是控制子盒子与子盒子之间的空间分配。</li><li>有七个常用的属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch | flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除了<strong>stretch属性</strong>外，其他的属性功能和性质基本和<strong>justify-content</strong>那里的属性一样</li><li><code>stretch</code><strong>：默认值，交叉轴方向剩余的空间平均分配到每一行，并且行的高度会拉伸，填满整行的空间</strong></li></ul><p><img src="https://image-static.segmentfault.com/719/027/719027543-420f34821a508347"></p><h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><ul><li><code>align-self</code> 控制子盒子本身在交叉轴上的对齐方式。优先级高于 <code>align-items</code>。<code>align-items</code> 是容器统一控制容器里的每个子盒子的对齐方式，<code>align-self</code> 则是子盒子控制子盒子本身的对齐方式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>align-self: auto;</code> ，继承容器设置的 <code>align-items</code> 的值。也就是默认是由容器设置 <code>align-items</code> 统一控制项目在交叉轴上的对齐方式。</li><li>除了比 <code>align-items</code> 多一个 <code>auto</code> 选项外，其他选项与 <code>align-items</code> 一致。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  dispaly: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; // 容器控制所有项目顶部对齐排列</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-class">.four</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end; // 第四个项目控制底部对齐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/110/315/1103156958-4717e400ec943764"></p><h3 id="flow-grow属性"><a href="#flow-grow属性" class="headerlink" title="flow-grow属性"></a>flow-grow属性</h3><ul><li><code>flex-grow</code> 用于控制子盒子在主轴方向上拉伸放大占剩余空间（如果有的话）的比例。</li><li>grow 的意思是“扩大，使生长”，所以就是让项目放大的意思。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>0</code>，不放大。</li></ul><p><img src="https://image-static.segmentfault.com/114/795/1147952730-93479b1ca8af8f91"></p><blockquote><p>例子中，容器宽设为 300px，项目宽设为 50px。项目总宽 150px，剩余空间宽 150px</p><p>flex-grow 都设置为 1 的时候，项目拉伸成 100px，剩余空间被按 1:1:1 分配，每个项目各占了 1/3。</p><p>flex-grow 分别设为 33、66、66 的时候，项目分别被拉伸成 87.5px、125px、87.5px，剩余空间被按 1:2:1 分配，项目分别占了剩余空间的 1/4、1/2、1/4。</p><p><strong>可以看到，放大的比例跟数值的大小无关，跟数值的比例有关。</strong></p></blockquote><h3 id="flow-shrink属性"><a href="#flow-shrink属性" class="headerlink" title="flow-shrink属性"></a>flow-shrink属性</h3><ul><li><code>flex-shrink</code> 用于控制项目在主轴方向上缩小的程度。数值越大，收缩越多</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认是 <code>flex-shrink: 1</code> ，同等比例收缩。</li></ul><p><img src="https://image-static.segmentfault.com/153/086/1530865475-13fb240e2cab993d"></p><blockquote><p>例子中，容器宽为 400px，项目宽为100px。因为项目超过了容器空间，所以自动被缩小了。默认 flex-shrink 是 1，所有项目同等比例缩小成 80px。</p><p>右上，设置 flex-shrink，全部设置为 0，项目保存原来设置的宽度 100px，不缩小，所以溢出容器空间。</p><p>右中，设置 flex-shrink 分别为 6、6、6、默认、默认，项目宽变成 70px、70px、70px、95px、95px，超出的 100px 分成 20 份，按比例缩小。</p><p>右上，设置 flex-shrink 分别为 999、默认、默认、默认、默认，项目宽变成 16px、96px、96px、96px、96px，可以看到这里就不按比例缩小的了。</p></blockquote><h3 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h3><ul><li><code>flex-basis</code> 用于初始化每个项目占据主轴空间的尺寸（main size）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex-basis: auto</code> , 自动检测尺寸，如果项目有设置尺寸，则取项目设置的值，否则根据项目内容计算出尺寸。</li></ul><h3 id="flex-项目的属性：flex"><a href="#flex-项目的属性：flex" class="headerlink" title="flex 项目的属性：flex"></a>flex 项目的属性：flex</h3><ul><li><code>flex</code> 是上面三个合并的简写。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: &lt;flex-grow&gt; [&lt;flex-shrink&gt;] [&lt;flex-basis&gt;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex: 0 1 auto;</code> 后两个参数为可选参数。</li></ul><ul><li><code>flex: auto</code>：等同于 <code>flex: 1 1 auto</code>。可以拉伸，可以缩小，自动计算项目尺寸，一般情况下会自动拉伸填充满整个容器。</li><li><code>flex: none</code>： 等同于 <code>flex: 0 0 auto</code>。不能拉伸，不能缩小，直接使用获取到项目的 <code>flex-basis</code> 尺寸。</li><li><code>flex: &lt;positive-number&gt;</code>：等同于 <code>flex: &lt;positive-number&gt; 1 0</code> 。positive-number 为正数，例如 <strong><code>flex: 1</code> 等同于 <code>flex: 1 1 0</code>。</strong></li></ul><h3 id="flex-项目的属性：order"><a href="#flex-项目的属性：order" class="headerlink" title="flex 项目的属性：order"></a>flex 项目的属性：order</h3><ul><li><code>order</code> 用于控制项目在主轴上的排列顺序。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值： <code>order: 0;</code> ，参数值正负数都可以，全部项目按主轴方向依次排列。设置后，按数值大小，从小到大排列。</li></ul><p><img src="https://image-static.segmentfault.com/144/234/1442340051-b6045f89bffe1540"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flex弹性布局详解&quot;&gt;&lt;a href=&quot;#Flex弹性布局详解&quot; class=&quot;headerlink&quot; title=&quot;Flex弹性布局详解&quot;&gt;&lt;/a&gt;Flex弹性布局详解&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue打包使用CDN优化项目</title>
    <link href="https://aliveseven.github.io/posts/e42836c1/"/>
    <id>https://aliveseven.github.io/posts/e42836c1/</id>
    <published>2022-09-03T13:44:47.406Z</published>
    <updated>2022-09-03T13:55:16.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue打包使用CDN优化项目"><a href="#Vue打包使用CDN优化项目" class="headerlink" title="Vue打包使用CDN优化项目"></a>Vue打包使用CDN优化项目</h1><h2 id="优化原因"><a href="#优化原因" class="headerlink" title="优化原因"></a>优化原因</h2><p>在没有使用CDN加速的情况下，打包后的js和css文件有时会很大，<strong>甚至有1M或者几M以上</strong>，而且随着项目的越做越大，打包出来的文件就更大了，而在页面加载的时候，会拖慢加载速度，如果有CDN全站加速可能还好，如果托管于GitHub Page上面的话，会让加载速度变得很慢。</p><ul><li>比如下图，在没有使用CDN加速的情况下，可以看出element-ui、vue、vuex、vue-router这些依赖都打进chunk-vendors.js中导致体积很大</li></ul><p><img src="https://m1.im5i.com/2022/09/03/Uq01GH.png" alt="Uq01GH.png"></p><h2 id="查看依赖版本"><a href="#查看依赖版本" class="headerlink" title="查看依赖版本"></a>查看依赖版本</h2><p>首先项目中需要使用依赖项，<strong>打开项目中的vue.config.js</strong>，查看要加速的包的版本，我这里项目中打算将element-ui、vue、vuex、vue-router这些包进行分离，让它们通过cdn加速来载入页面，记录其依赖版本方便后面使用。</p><p><img src="https://m1.im5i.com/2022/09/03/Uq03xT.png" alt="Uq03xT.png"></p><table><thead><tr><th>依赖名称</th><th>依赖版本</th></tr></thead><tbody><tr><td>vue</td><td>2.6.14</td></tr><tr><td>vue-router</td><td>3.1.3</td></tr><tr><td>vuex</td><td>3.6.2</td></tr><tr><td>element-ui</td><td>2.15.6</td></tr><tr><td>axios</td><td>0.26.1</td></tr></tbody></table><h2 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h2><ul><li><strong>打开vue.config.js</strong></li></ul><p>写入下面的代码，externals为要加速的包名和挂载在window上的对象属性名称，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue打包优化-CDN加速</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为生产环境</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 本地环境是否需要使用cdn</span></span><br><span class="line"><span class="keyword">const</span> devNeedCdn = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cdn = &#123;</span><br><span class="line">  <span class="comment">// cdn：模块名称和模块作用域命名（对应window里面挂载的变量名称）</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">      <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="attr">vuex</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;element-ui&quot;</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// cdn的css链接</span></span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.6/theme-chalk/index.min.css&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// cdn的js链接</span></span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue-router@3.1.3/dist/vue-router.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcss.com/axios/0.26.1/axios.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.6/index.min.js&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">lintOnSave</span>: <span class="literal">false</span>, <span class="comment">// 关闭eslint</span></span><br><span class="line"><span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? <span class="string">&#x27;&#x27;</span><span class="comment">//这里写展示页面的仓库名称</span></span><br><span class="line">    : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ============注入cdn start============</span></span><br><span class="line">config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 生产环境或本地需要cdn时，才注入cdn</span></span><br><span class="line"><span class="keyword">if</span> (isProduction || devNeedCdn) args[<span class="number">0</span>].<span class="property">cdn</span> = cdn</span><br><span class="line"><span class="keyword">return</span> args</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 用cdn方式引入，则构建时要忽略相关资源</span></span><br><span class="line"><span class="keyword">if</span> (isProduction || devNeedCdn) config.<span class="property">externals</span> = cdn.<span class="property">externals</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><ul><li>这里也需要说明一下，这个index.html页面的位置一般在public目录下。<br>需要给index.html的<code>&lt;head&gt;</code>里面加点东西，才能使上面的加速链接载入到head里面。</li><li>写入下面的代码到<code>&lt;head&gt;</code>里面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class="line"> htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class="line"> htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/03/Uq04qA.png" alt="Uq04qA.png"></p><blockquote><p><strong>注意，CDN的引用必须写在上面</strong></p></blockquote><ul><li>配置好之后，重写执行打包操作即可。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue打包使用CDN优化项目&quot;&gt;&lt;a href=&quot;#Vue打包使用CDN优化项目&quot; class=&quot;headerlink&quot; title=&quot;Vue打包使用CDN优化项目&quot;&gt;&lt;/a&gt;Vue打包使用CDN优化项目&lt;/h1&gt;&lt;h2 id=&quot;优化原因&quot;&gt;&lt;a href=&quot;#优</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CDN" scheme="https://aliveseven.github.io/tags/CDN/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的开发环境跨域问题</title>
    <link href="https://aliveseven.github.io/posts/c99149db/"/>
    <id>https://aliveseven.github.io/posts/c99149db/</id>
    <published>2022-08-31T15:12:01.209Z</published>
    <updated>2022-09-06T12:37:27.002Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue之axios在开发环境-生产环境中跨域问题的解决"><a href="#Vue之axios在开发环境-生产环境中跨域问题的解决" class="headerlink" title="Vue之axios在开发环境/生产环境中跨域问题的解决"></a>Vue之axios在开发环境/生产环境中跨域问题的解决</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>什么是跨域？</strong></li></ul><p><img src="https://img.jbzj.com/file_images/article/202110/2021102410464313.png"></p><p>​        简单来说就是有上图这样的问题出现，控制台报错。</p><h3 id="为什么会出现跨域？"><a href="#为什么会出现跨域？" class="headerlink" title="为什么会出现跨域？"></a>为什么会出现跨域？</h3><ul><li><p>受到浏览器的同源策略限制，浏览器<strong>从一个域名</strong>的网页去请求<strong>另一个域名</strong>的资源时，<strong>域名、端口、协议</strong>任一不同，都是跨域。</p></li><li><p>跨域问题主要分出现在开发环境（本地运行）中的跨域，以及生产环境（部署于线上的环境）中的跨域</p></li></ul><h2 id="开发环境（即本地运行）"><a href="#开发环境（即本地运行）" class="headerlink" title="开发环境（即本地运行）"></a>开发环境（即本地运行）</h2><h3 id="在Vue2-0中"><a href="#在Vue2-0中" class="headerlink" title="在Vue2.0中"></a><strong>在Vue2.0中</strong></h3><ol><li>先配置好axios的baseURL，即下面代码段中的 axios.defaults.baseURL = ‘/api/‘，作用是我们每次发送的请求都会带一个/api/的前缀。<strong>这段代码可以写在main.js中，也可以写在一个request.js的文件中单独作为axios的配置文件，方便维护。</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置请求的根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api/&#x27;</span></span><br><span class="line"><span class="comment">// 挂载到原型对象之前 先设置拦截器 通过axios请求拦截器添加token，保证拥有获取数据的权限</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//在 request 拦截器中， 展示进度条 NProgress.start() </span></span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">  <span class="comment">// 为请求头对象添加Token验证的Authorization字段</span></span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  <span class="comment">// 最后都必须 return config</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 在 response 拦截器中， 隐藏进度条 NProgress.done()</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置代理</strong>，（配置在vue.config.js文件中的proxyTable字段中）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="comment">//要解决跨域的接口的域名</span></span><br><span class="line">          <span class="attr">secure</span>:<span class="literal">false</span>,           <span class="comment">//如果是https接口，需要配置这个参数</span></span><br><span class="line">          <span class="attr">ws</span>: <span class="literal">true</span>,  <span class="comment">//如果要代理 websockets，配置这个参数</span></span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 允许跨域</span></span><br><span class="line">          <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">           <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>   <span class="comment">// 标识替换，使用 &#x27;/api&#x27; 代替真实的接口地址，路径重写</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>target后面的就是需要请求的网址的公共部分，然后用<code>/apis</code>来代理这个，最后重写一些路径，请求的时候使用的我们的代理的apis来作为前缀。</li></ol><p><img src="https://m1.im5i.com/2022/09/01/Uqn3xD.png" alt="Uqn3xD.png"></p><ul><li>简单来说，就是用<code>/apis</code>来代替前面要跨域的接口网站，比如上面要跨域的网站域名是<a href="http://localhost:8080/%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E4%B8%AA%60/apis%60%E5%B0%B1%E6%98%AF%E4%BB%A3%E6%9B%BF%E5%AE%83%E7%9A%84%E5%88%AB%E7%A7%B0%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8D%A2%E4%BA%86%E4%B8%AA%E5%90%8D%E5%AD%97%E8%80%8C%E5%B7%B2%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%83%E8%B5%B7%E5%88%B0%E4%BA%86%E4%BB%A3%E7%90%86%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E3%80%82">http://localhost:8080/，那么这个`/apis`就是代替它的别称，就是换了个名字而已，但是它起到了代理的作用，可以实现跨域请求。</a></li></ul><h3 id="在Vue3-0中"><a href="#在Vue3-0中" class="headerlink" title="在Vue3.0中"></a><strong>在Vue3.0中</strong></h3><ul><li><p>vue-cli3 脚手架搭建完成后，项目目录中没有 vue.config.js 文件，需要手动创建</p><p>新建一个vue.config.js，配置以下信息，同样可以解决。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;   </span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;^/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,<span class="comment">//接口的前缀</span></span><br><span class="line">                <span class="attr">ws</span>:<span class="literal">true</span>,<span class="comment">//代理websocked</span></span><br><span class="line">                <span class="attr">changeOrigin</span>:<span class="literal">true</span>,<span class="comment">//虚拟的站点需要更管origin</span></span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span><span class="comment">//重写路径</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><ul><li><p><strong>changeOrigin: true</strong> ：开启代理：在本地会创建一个虚假服务器，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端就可以进行数据的交互。</p></li><li><p><code>apis</code>就是接口实际请求的前缀，去代理了我们的实际的接口前缀的公共部分</p></li><li><p>比如 请求接口为<code>localhost:8080/getData</code> 我们只需要传入：getData</p></li></ul><h2 id="withCredentials属性"><a href="#withCredentials属性" class="headerlink" title="withCredentials属性"></a><strong>withCredentials属性</strong></h2><ul><li>最近在开发调试的过程出现了跨域的另一种情况</li><li><strong>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’.</strong></li></ul><blockquote><p>对于附带身份凭证的请求，服务器不得设置 Access-Control-Allow-Origin 的值为“<em>”。这是因为请求的首部中携带了 Cookie 信息，如果 Access-Control-Allow-Origin 的值为“</em>”，请求将会失败。而将 Access-Control-Allow-Origin 的值设置为 <a href="https://link.segmentfault.com/?enc=AVaUqvTmgIKHbpBJZHrIVg==.kM+bUI+qP58augszCqHbghZF3x7rrhsC14KON9bw/14=">http://foo.example</a>，则请求将成功执行。</p></blockquote><ul><li><p>也就是说<code>Access-Control-Allow-Credentials</code>设置为<code>true</code>的情况下<br><code>Access-Control-Allow-Origin</code>不能设置为<code>*</code></p></li><li><p>ps: 关于指定域名 可以在后端用个<code>array</code>类似的存一个白名单域名列表<br>如果有请求 先判断 <code>Origin</code> 是否在白名单里 然后再动态设置 <code>Access-Control-Allow-Origin</code></p></li><li><p>前端的解决办法就是将withCredentials属性设为false即可</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// withCredentials: true, //axios 设置请求自动携带cookie</span></span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// 不携带cookie请求</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>我的项目是不需要cookie的，如果项目需要携带cookie的话，那么是要后端配置的。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue之axios在开发环境-生产环境中跨域问题的解决&quot;&gt;&lt;a href=&quot;#Vue之axios在开发环境-生产环境中跨域问题的解决&quot; class=&quot;headerlink&quot; title=&quot;Vue之axios在开发环境/生产环境中跨域问题的解决&quot;&gt;&lt;/a&gt;Vue之a</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="axios" scheme="https://aliveseven.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>css之div盒子居中常用方法</title>
    <link href="https://aliveseven.github.io/posts/2566378a/"/>
    <id>https://aliveseven.github.io/posts/2566378a/</id>
    <published>2022-08-31T05:16:21.991Z</published>
    <updated>2022-08-31T11:30:59.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css之div盒子居中常用方法"><a href="#css之div盒子居中常用方法" class="headerlink" title="css之div盒子居中常用方法"></a>css之div盒子居中常用方法</h1><h2 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a><strong>绝对定位居中</strong></h2><ul><li>这个方法就是利用绝对定位，使它的top、left、right、bottom都为0就可以实现居中</li></ul><p>​    <strong>演示结构：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父盒子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子盒子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children_box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <strong>CSS样式结构：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* margin要设为auto，作用是通过分配auto元素的左右边距，它们可以平等地占据元素容器中的可用水平空间 - 因此元素将居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>样式效果</strong>：</p><p><img src="https://m1.im5i.com/2022/08/31/Uqn9jK.png" alt="Uqn9jK.png"></p><ul><li>这个方法用在垂直居中都可以，就使它的上下为 0 就可以实现垂直居中</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnSSC.png" alt="UqnSSC.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line">    <span class="comment">/* 上下设为0 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* margin要设为auto，作用是通过分配auto元素的左右边距，它们可以平等地占据元素容器中的可用水平空间 - 因此元素将居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="flex布局居中"><a href="#flex布局居中" class="headerlink" title="flex布局居中"></a>flex布局居中</h2><ul><li>主轴设为居中，justify-content: center，一般主轴默认为x轴方向，那么就是水平居中，像下面这样👇</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqneBH.png" alt="UqneBH.png"></p><ul><li>侧轴设为居中，align-items: center，一般侧轴默认为y轴方向，那么就是垂直居中，像下面这样👇</li></ul><p><a href="https://macimg.com/image/UqnJna"><img src="https://m1.im5i.com/2022/08/31/UqnJna.png" alt="UqnJna.png"></a></p><ul><li><strong>综上，父盒子设为flex布局，然后再将主轴和侧轴都设为center，就可以让子盒子达到整体居中的效果了</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="comment">/* 弹性布局设置 */</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* justify-content 设置主轴上子元素排列方式,如果主轴是x轴则水平居中（一般默认是x轴） */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/* align-items 设置了侧轴上元素的排列方式，如果主轴是y轴则垂直居中（一般默认是y轴） */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>实现效果：</strong></li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnaGT.png" alt="UqnaGT.png"></p><h2 id="translate居中"><a href="#translate居中" class="headerlink" title="translate居中"></a>translate居中</h2><ul><li><strong>移动 translate(x, y)</strong></li></ul><p>​        比如 <strong>translate(50px,50px);</strong></p><p>​        上面这条可以通过translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素</p><p>​        可以改变元素的位置，x、y可为负值；</p><blockquote><p><strong>translate(x,y);</strong> 水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</p><p><strong>translateX(x);</strong> 仅水平方向移动（X轴移动）</p><p><strong>translateY(y);</strong> 仅垂直方向移动（Y轴移动）</p></blockquote><ul><li>可以通过设置父盒子为<strong>relative</strong>，即相对定位，子盒子设为<strong>absolute</strong>，即绝对定位，然后<strong>上和左</strong>都设为50%，再利用translate(-50% , -50%)实现在水平和垂直方向都移动-50%的相对距离，实现子盒子整体的居中效果。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span> , -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css之div盒子居中常用方法&quot;&gt;&lt;a href=&quot;#css之div盒子居中常用方法&quot; class=&quot;headerlink&quot; title=&quot;css之div盒子居中常用方法&quot;&gt;&lt;/a&gt;css之div盒子居中常用方法&lt;/h1&gt;&lt;h2 id=&quot;绝对定位居中&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Github+jsDelivr给网站静态资源键入免费的CDN加速</title>
    <link href="https://aliveseven.github.io/posts/b93f757/"/>
    <id>https://aliveseven.github.io/posts/b93f757/</id>
    <published>2022-08-30T17:15:10.001Z</published>
    <updated>2022-09-06T04:57:58.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github-jsDelivr给网站静态资源键入免费的CDN加速"><a href="#Github-jsDelivr给网站静态资源键入免费的CDN加速" class="headerlink" title="Github+jsDelivr给网站静态资源键入免费的CDN加速"></a>Github+jsDelivr给网站静态资源键入免费的CDN加速</h1><ul><li><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p></li><li><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p></li><li><p>jsDelivr可以为发布在GitHub上面的js、css、jpg等文件进行免费的CDN加速，虽然速度可能不算很快，但是相比于用GitHub直接来打开，速度还是有显著的提升的。</p></li><li><p>比如我自己发布的一个js文件：<a href="https://cdn.jsdelivr.net/gh/AliveLeqi/MyResume@v1.0/js/scripts.js">https://cdn.jsdelivr.net/gh/AliveLeqi/MyResume@v1.0/js/scripts.js</a></p></li><li><p>除此之外，还有其他CDN加速的方法，比如又拍云、七牛云、腾讯云等服务商都提供了国内的全站资源加速，若想要更快的速度，最好还是用上面的这些服务商提供的CDN。<strong>不过，jsDelivr可以白嫖，直接免费使用，而且也是大厂，一般来说也不会崩掉，所以还是非常Nice的，这个东西。</strong></p></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>创建新的Github仓库，用于存放要进行加速的文件，比如js、css等静态资源文件。</li></ol><p><img src="https://m1.im5i.com/2022/08/31/UqnqB7.png" alt="UqnqB7.png"></p><ol start="2"><li>上传要加速的文件</li></ol><p><img src="https://m1.im5i.com/2022/08/31/UqnFnp.png" alt="UqnFnp.png"></p><ul><li>这里我作演示，就直接上传一个css文件示范一下，所以直接在网站上传即可，如果要上传多个文件或者是文件夹，最好用git工具上传，用git上传也很简单，按照上图旁边的演示来操作即可。</li></ul><ol start="3"><li>创建一个release</li></ol><p><img src="https://m1.im5i.com/2022/08/31/UqnV5v.png" alt="UqnV5v.png"></p><ul><li>新建一个发布版本为1.0，选好分支，一般要选加速文件所在的分支，填好必要信息之后即可发布。</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnWwG.png" alt="UqnWwG.png"></p><ul><li>发布成功页面，可以看到版本号</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnGiY.png" alt="UqnGiY.png"></p><ol start="4"><li>用jsDelivr访问即可</li></ol><blockquote><p><a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>&lt;github账号&gt;/&lt;仓库名称&gt;@&lt;版本号&gt;/&lt;文件路径&gt;/&lt;文件名&gt; 不输入版本号默认访问最新版本</p></blockquote><ul><li><p>前面的域名+gh是固定的</p></li><li><p>需要改的是后面，这里我的github账号用户名是”<strong>AliveSeven</strong>“，刚才的仓库名称是”<strong>jsDelivrFile</strong>“，版本号是1.0，文件路径是”<strong>/流光按钮.css</strong>“</p></li><li><p>所以加速的地址是<a href="https://cdn.jsdelivr.net/gh/AliveSeven/jsDelivrFile@v1.0/%E6%B5%81%E5%85%89%E6%8C%89%E9%92%AE.css">https://cdn.jsdelivr.net/gh/AliveSeven/jsDelivrFile@v1.0/流光按钮.css</a></p></li></ul><hr><p><strong>以上就是整个加速过程，是不是很简单捏</strong></p><blockquote><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 加载任何Github发布、提交或分支</span><br><span class="line">https://cdn.jsdelivr.net/gh/user/repo@version/file</span><br><span class="line"></span><br><span class="line">// 加载 jQuery v3.2.1</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line">// 使用版本范围而不是特定版本</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line">// 完全省略该版本以获取最新版本</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line">// 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</span><br><span class="line"></span><br><span class="line">// 在末尾添加 / 以获取资源目录列表</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery/</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Github-jsDelivr给网站静态资源键入免费的CDN加速&quot;&gt;&lt;a href=&quot;#Github-jsDelivr给网站静态资源键入免费的CDN加速&quot; class=&quot;headerlink&quot; title=&quot;Github+jsDelivr给网站静态资源键入免费的C</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="jsDelivr" scheme="https://aliveseven.github.io/tags/jsDelivr/"/>
    
    <category term="CDN" scheme="https://aliveseven.github.io/tags/CDN/"/>
    
    <category term="GitHub" scheme="https://aliveseven.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>Vue中组件的props属性</title>
    <link href="https://aliveseven.github.io/posts/cc0645d9/"/>
    <id>https://aliveseven.github.io/posts/cc0645d9/</id>
    <published>2022-08-30T16:31:18.856Z</published>
    <updated>2022-08-30T17:01:37.820Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue中组件的props属性"><a href="#Vue中组件的props属性" class="headerlink" title="Vue中组件的props属性"></a>Vue中组件的props属性</h1><h2 id="props的使用和原理"><a href="#props的使用和原理" class="headerlink" title="props的使用和原理"></a>props的使用和原理</h2><p>​        props主要用于组件的传值，他的工作就是为了接收外面传过来的数据，与data、el、ref是一个级别的配置项</p><p><strong>1. 定义被调用组件</strong></p><p>​        首先，我们先定义一个person组件，用于显示个人信息的组件，我们放了一个人的姓名，性别，以及年龄，定义好这个组件之后，就可以等待其他组件进行调用。那么既然别的组件可以调用，我们就需要再定义一个props属性，用于接收别的组件传进来的值。</p><p><img src="https://m1.im5i.com/2022/08/30/UqnDRS.png" alt="UqnDRS.png"></p><blockquote><p><strong>注意：</strong>组件中name、sex、age都是一个prop，将三个属性放到一起，就是props，这就是props的由来，是prop的复数形式，代表多个prop属性的集合。</p></blockquote><p><strong>2. 调用组件</strong></p><p>​        此时我们再定义一个info组件，用于展示这个人的基本信息，进行对person组价的调用实现信息的展示，分为下图四个步骤进行调用。并传入参数</p><p><img src="https://m1.im5i.com/2022/08/31/Uqndd0.png" alt="Uqndd0.png"></p><p><strong>3. 传入效果</strong></p><p><img src="https://m1.im5i.com/2022/08/31/UqniCB.png" alt="UqniCB.png"></p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><ul><li>那如果我们想给年龄加1岁，怎么实现？</li></ul><p>​        我们可能会直接这样加1</p><p><img src="https://m1.im5i.com/2022/08/31/Uqnxlz.png" alt="Uqnxlz.png"></p><p>​        看效果是否能实现，变成19，看下图显然是不正确的。因为你传入的年龄是个字符串18，所以加1只会在18后面进行拼接。</p><p><img src="https://m1.im5i.com/2022/08/31/UqnLXs.png" alt="UqnLXs.png"></p><p>​        <strong>然后有的人说，那传数字，怎么传数字呢？很简单，一个符号搞定。</strong></p><p>​        我们只需要在<strong>age前面加上冒号</strong> ：他就会只识别双引号里面的东西18 ，否则识别的是双引号18</p><p><img src="https://m1.im5i.com/2022/08/31/UqngMo.png" alt="UqngMo.png"></p><p>​        看下效果，此时就成功了。</p><p><img src="https://m1.im5i.com/2022/08/31/Uqns9W.png" alt="Uqns9W.png"></p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><ul><li>对于年龄这一类型，我们最希望拿到的是什么数据类型？肯定是数字类型，但是有人非要传字符串类型，就会影响我们对年龄的计算，比如上面的加1……那么我们如何限制类型呢</li></ul><p>​        这时候props不能再用[]去定义，需要用{}，因为限制类型时，props就是作为一个对象去使用；</p><p>​        下面就是我们将三个属性分别做了限制。</p><p><img src="https://m1.im5i.com/2022/08/31/UqnnBx.png" alt="UqnnBx.png"></p><p>​        我们把年龄做了number类型限制后，再传入字符串18，看有什么变化？</p><p><img src="https://m1.im5i.com/2022/08/31/UqnrsQ.png" alt="UqnrsQ.png"></p><p>​         <strong>此时发现控制台，会报错，显示age的数据类型不匹配。</strong></p><p><a href="https://macimg.com/image/Uqn05q"><img src="https://m1.im5i.com/2022/08/31/Uqn05q.png" alt="Uqn05q.png"></a></p><p>​        虽然不影响展示，但是会报错。这可以给我们提供一个明确的提示。方便我们规范的传入数据。</p><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><ul><li><strong>可以限制类型，那么可以限制必传吗</strong></li></ul><p>​                <strong>答：可以</strong></p><p>​        假设姓名必传，其他非必传。</p><p>​        <strong>类型属性：</strong>type:xx</p><p>​        <strong>必传属性：</strong>required：true</p><p>​        <strong>默认属性：</strong>default：xx</p><p><img src="https://m1.im5i.com/2022/08/31/UqnEwD.png" alt="UqnEwD.png"></p><blockquote><p>对以上总结：</p><p>props在接收数据的同时，对数据进行了<strong>类型限制+默认值的指定+必要性的限制</strong></p></blockquote><h2 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h2><ul><li><strong>props接收的属性值可以修改吗？</strong></li></ul><p>​            <strong>答：不可以</strong></p><p>​        我们添加一个button，以及点击事件</p><p><img src="https://m1.im5i.com/2022/08/31/Uqnjdy.png" alt="Uqnjdy.png"></p><p>​        注意：我们要访问props里面的属性值，通过this.即可找到</p><p><img src="https://m1.im5i.com/2022/08/31/UqnTch.png" alt="UqnTch.png"></p><pre><code>     查看结果，发现页面可以显示，但是控制台报错，因此它是不可修改的</code></pre><p><img src="https://m1.im5i.com/2022/08/31/UqnZlX.png" alt="UqnZlX.png"></p><p><img src="https://m1.im5i.com/2022/08/31/UqnhXf.png" alt="UqnhXf.png"></p><h3 id="必须要修改props属性值，怎么办？"><a href="#必须要修改props属性值，怎么办？" class="headerlink" title="必须要修改props属性值，怎么办？"></a>必须要修改props属性值，怎么办？</h3><ul><li><strong>通过data去间接修改</strong></li></ul><p>​        我们在data里面重新定义一个变量去接收props属性。这个变量最好不要重名，<strong>重名</strong>的话，优先获取props属性值，<strong>优先级props&gt;data</strong>。然后我们在操作或者html绑定值的时候，都去操作data里面新定义的变量</p><p><img src="https://m1.im5i.com/2022/08/31/UqnCjM.png" alt="UqnCjM.png"></p><p>​        此时可以看到，修改成功，也没有报错：</p><p><img src="https://m1.im5i.com/2022/08/31/Uqnc93.png" alt="Uqnc93.png"></p><h2 id="总结：配置项props"><a href="#总结：配置项props" class="headerlink" title="总结：配置项props"></a>总结：配置项props</h2><p><strong>——-让组件接收外部传来的数据</strong></p><p><strong>接收数据三种方式：</strong></p><p><strong>（1）</strong>只接收：<strong>props: [‘name’,’age’,’sex’]</strong></p><p><strong>（2）</strong>接收并限制类型：<strong>props: {“name”:String}</strong></p><p><strong>（3）</strong>限制类型、限制必要性指定默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>注意：props是只读的，vue底层会检测你对props的修改，如果进行了修改，控制台会报错，必须修改，就复制一份到data中，通过data去修改数据。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue中组件的props属性&quot;&gt;&lt;a href=&quot;#Vue中组件的props属性&quot; class=&quot;headerlink&quot; title=&quot;Vue中组件的props属性&quot;&gt;&lt;/a&gt;Vue中组件的props属性&lt;/h1&gt;&lt;h2 id=&quot;props的使用和原理&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础</title>
    <link href="https://aliveseven.github.io/posts/4b668c47/"/>
    <id>https://aliveseven.github.io/posts/4b668c47/</id>
    <published>2022-08-29T15:14:40.551Z</published>
    <updated>2022-08-30T02:18:56.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><h2 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el:挂载点"></a>el:挂载点</h2><p>先导入Vue.js到HTML中，在创建Vue实例时，需要传入一个选项对象，选项对象的el属性指向View</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// #是id选择器，点.是class的选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el: &quot;#app&quot;，通过el挂载id为app的标签，对里面的data作出编辑，可以进行嵌套，如下面的设置是对data中的&#123;&#123;message&#125;&#125;作出编辑输出&quot;Hello Vue!&quot;，凡是挂载的标签里面的&#123;&#123;message&#125;&#125;都有这个效果，就是可以嵌套</span></span></span><br><span class="line"><span class="language-javascript">        el : <span class="string">&quot;.app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue实例的作用范围？"><a href="#Vue实例的作用范围？" class="headerlink" title="Vue实例的作用范围？"></a>Vue实例的作用范围？</h3><ul><li>Vue会管理el选项命中的元素及其内部的后台元素</li></ul><h3 id="是否可以使用其他的选择器？"><a href="#是否可以使用其他的选择器？" class="headerlink" title="是否可以使用其他的选择器？"></a>是否可以使用其他的选择器？</h3><ul><li>可以使用其他选择器，建议用id</li></ul><h3 id="是否可以设置其他的dom元素？"><a href="#是否可以设置其他的dom元素？" class="headerlink" title="是否可以设置其他的dom元素？"></a>是否可以设置其他的dom元素？</h3><ul><li>dom是文档对象模型，假如有一段这样的代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>我的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么它的dom模型树就是长这样的</p><p><img src="https://pica.zhimg.com/v2-69d53b19c03ddc8bd3bc047f328de929_r.jpg?source=1940ef5c" alt="preview"></p><p>回到正题，一般Vue的el挂载点不能使用html和body来挂载，其他双标签可以</p><h2 id="data-数据对象"><a href="#data-数据对象" class="headerlink" title="data:数据对象"></a>data:数据对象</h2><ul><li><p>Vue可以像Java、Python等编程语言那样，用xxx.xxx来表示要展示的对象</p><p>比如↓</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;school.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;campus[0]&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//注意要加逗号，字符串要加双引号</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">school</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&quot;逗乐哥&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                mobile : <span class="string">&quot;10086&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">campus</span>: [<span class="string">&quot;香港校区&quot;</span>,<span class="string">&quot;深圳校区&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后输出结果如下↓</p><p><img src="https://m1.im5i.com/2022/08/29/Uqgvfo.png" alt="Uqgvfo.png"></p><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><ul><li><p>在标签如<code>&lt;div&gt;，&lt;h1&gt;</code>这样的标签里面插入v-text，只会显示v-text所指向的那个的对象的内容，而用双括号可以在后面加上东西</p><p>看代码和输出结果↓</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span> = <span class="string">&quot;message + &#x27;！！哈哈哈哈&#x27;&quot;</span>&gt;</span>这里输入什么都不会显示出来<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span> = <span class="string">&quot;message + &#x27;！！哈哈哈哈&#x27;&quot;</span>&gt;</span>还是没有显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;！！呵呵<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;真别逗我乐&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            info : <span class="string">&quot;我直接杀爆&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/08/29/Uqg14W.png" alt="Uqg14W.png"></p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><ul><li>和v-text没有多大区别，区别在于要是修饰的标签是超链接，或者是有html结构的，可以用这个，这个修饰之后表现出来的就是一个超链接，而不是文本，如果修饰的是文本，用v-text</li></ul><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ul><li><p>v-on指令的作用是：为元素绑定事件</p></li><li><p>事件名不需要写no</p></li><li><p>指令可以简写为@</p></li><li><p>绑定的方法定义在methods属性中</p><p>实例代码：按下h1那部分的代码可以增加””好好吃！”字样到data的food后面，按下上面三个按钮会弹出警告”做It”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on指令&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doIt&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on简写&quot;</span> @<span class="attr">click</span> = <span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;双击事件&quot;</span> @<span class="attr">dbclikck</span> = <span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span> = <span class="string">&quot;changeFood&quot;</span>&gt;</span>&#123;&#123;food&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">food</span>:<span class="string">&quot;西兰花炒鸡蛋&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//方法名是doIt</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">doIt</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//发出警告提示“做It”</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;做It&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">changeFood</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">food</span> += <span class="string">&quot;好好吃！&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="keyup"><a href="#keyup" class="headerlink" title="keyup"></a>keyup</h3><ul><li>v-on:keyup.enter/@keyup.enter ：按下回车触发事件</li><li>v-on:keyup.alt.enter/@keyup.alt.enter ：按下alt+enter键触发事件</li></ul><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><ul><li>Vue.js中的该方法实现了对数组的增删改操作</li><li>结构：splice(index,len,[item])</li><li>index ：数组开始的下标</li><li>len：替换/删除的长度</li><li>item：替换的值，删除操作的话item为空</li></ul><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><ul><li>根据表达式的真假，切换元素的显示和隐藏，v-show = true的时候显示，false的时候隐藏。</li></ul><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul><li><p>在html代码中，v-bind绑定的是动态的表达式，而非固定的字符串，在v-bind后，就可以动态获取数据。</p><p>可以将v-bind理解为： <strong>被v-bind修饰的都是动态获取的值。 而非被v-bind修饰的，仅仅是一个字符串</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li><p>根据数据生成列表结构</p><p>使用效果代码↓</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arr&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125; 逗乐了 &#123;&#123;item&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in vegetables&quot;</span> <span class="attr">v-bind:title</span> = <span class="string">&quot;item.name&quot;</span> &gt;</span></span><br><span class="line">            &#123;&#123;item.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arr</span>: [<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;香港&quot;</span>,<span class="string">&quot;深圳&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">vegetables</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;西兰花炒蛋&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;蛋炒西兰花&quot;</span>&#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/08/29/Uqgu0x.png" alt="Uqgu0x.png"></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>获取和设置表单元素的值（双向数据绑定），元素一方改变了，另一个地方也跟着变了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;我是张杰，逗乐了&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-lazy"><a href="#v-lazy" class="headerlink" title="v-lazy"></a>v-lazy</h2><ul><li>v-lazy：懒加载</li><li>使用懒加载的目的：当页面需要加载大量图片时（需要向下滚动页面），使用懒加载可以实现只优先加载页面可视区域的图片，从而使得页面加载更为流畅。</li><li>需要安装，cnpm i vue-lazyload -S</li><li>目标页面使用👇</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//直接将 &#x27;:src&#x27; 替换为 &#x27;v-lazy&#x27; 即可</span><br><span class="line">&lt;img v-lazy=&quot;img.src&quot; &gt;</span><br><span class="line">&lt;img :src=&quot;img.src&quot; &gt;</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>网络请求库，Axios 是一个基于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> 的 HTTP 库，可以用在浏览器和 node.js 中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取笑话&quot;</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span> @<span class="attr">click</span> = <span class="string">&quot;getJoke&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;joke&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            joke : <span class="string">&quot;笑话&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//方法getJoke</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">getJoke</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">//调用axios.get方法，后面紧跟接口链接，链接返回结果保存在res里面，通过console.log将res输出到控制台上面</span></span></span><br><span class="line"><span class="language-javascript">               axios.<span class="title function_">get</span>(<span class="string">&quot;https://autumnfish.cn/api/joke/list?num=1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">               .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">//改变参数joke的值</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">joke</span> = res.<span class="property">data</span>.<span class="property">jokes</span>[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">               &#125;)</span></span><br><span class="line"><span class="language-javascript">               .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">console</span>.<span class="title function_">error</span>(err); </span></span><br><span class="line"><span class="language-javascript">               &#125;)</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        接口1:随机笑话</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        请求地址:https://autumnfish.cn/api/joke/list</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        请求方法:get</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        请求参数:num(笑话条数,数字)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        响应内容:随机笑话</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         接口2:用户注册</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         请求地址:https://autumnfish.cn/api/user/reg</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         请求方法:post</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         请求参数:username(用户名,字符串)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         响应内容:注册成功或失败</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/08/29/Uqg3zQ.gif" alt="Uqg3zQ.gif"></p><h1 id="Vue进阶"><a href="#Vue进阶" class="headerlink" title="Vue进阶"></a>Vue进阶</h1><h2 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>和var关键字的用法基本一致，但是要先声明变量，才能使用</li></ul><h3 id="function可以省略"><a href="#function可以省略" class="headerlink" title="function可以省略"></a>function可以省略</h3><ul><li><p>function可以省略，替换为 =&gt;，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func1</span> = (<span class="params"></span>)=&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>参数只有一个的时候可以省略（），例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func2 = <span class="keyword">function</span>(<span class="params">p1</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func2</span> = p1=&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>参数有两个的话，不可以省略（），{}也不能省略，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func3 = <span class="title function_">functino</span>(<span class="params">p1,p2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func3</span> = (<span class="params">p1,p2</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>没有参数，只有一行，有返回值的函数，如果 省略了{}，必须也要省略return，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func4 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> func4 ()=&gt; <span class="string">&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h2><h3 id="el-input-无法触发-keyup-enter-解决方法"><a href="#el-input-无法触发-keyup-enter-解决方法" class="headerlink" title="el-input 无法触发@keyup.enter 解决方法"></a>el-input 无法触发@keyup.enter 解决方法</h3><ul><li>@keyup.enter后面加上.<strong>native</strong></li><li>ps: 在 Vue 2.0 中，为自定义组件绑定原生事件必须使用 .native 修饰符，只有Button 组件可以监听 click 事件。</li><li>注意：v-model数据层一定要在@keyup.enter 事件之前。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue基础&quot;&gt;&lt;a href=&quot;#Vue基础&quot; class=&quot;headerlink&quot; title=&quot;Vue基础&quot;&gt;&lt;/a&gt;Vue基础&lt;/h1&gt;&lt;h2 id=&quot;el-挂载点&quot;&gt;&lt;a href=&quot;#el-挂载点&quot; class=&quot;headerlink&quot; title=&quot;e</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>axios详细封装</title>
    <link href="https://aliveseven.github.io/posts/7217ca4c/"/>
    <id>https://aliveseven.github.io/posts/7217ca4c/</id>
    <published>2022-08-29T13:18:52.383Z</published>
    <updated>2022-08-31T14:48:27.455Z</updated>
    
    <content type="html"><![CDATA[<h1 id="axios-详细封装"><a href="#axios-详细封装" class="headerlink" title="axios 详细封装"></a>axios 详细封装</h1><h2 id="一、axios的封装"><a href="#一、axios的封装" class="headerlink" title="一、axios的封装"></a>一、axios的封装</h2><p>在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，<strong>它是基于promise的http库</strong>，<strong>可运行在浏览器端和node.js中</strong>。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御XSRF等。所以我们的尤大大也是果断放弃了对其官方库vue-resource的维护，直接推荐我们使用axios库。如果还对axios不了解的，可以移步axios文档。</p><ul><li>安装</li></ul><p>​    npm install axios;    // 安装axios</p><ul><li>引入</li></ul><p>​    一般我会在项目的src目录中，新建一个request文件夹，然后在里面新建一个http.js和一个api.js文件。http.js文件用来封装我们的axios，api.js用来统一管理我们的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在http.js中引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>; <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">QS</span> <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>; <span class="comment">// 引入qs模块，用来序列化post类型的数据，后面会提到</span></span><br><span class="line"><span class="comment">// vant的toast提示框组件，大家可根据自己的ui组件更改。</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>环境的切换</li></ul><p>​        我们的项目环境可能有开发环境、测试环境和生产环境。我们通过node的环境变量来匹配我们的默认的接口url前缀。axios.defaults.baseURL可以设置axios的默认请求地址就不多说了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;development&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://www.baidu.com&#x27;</span>;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;debug&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://www.ceshi.com&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;production&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://www.production.com&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置请求超时</li></ul><p>​        通过axios.defaults.timeout设置默认的请求超时时间。例如超过了10s，就会告知用户当前请求超时，请刷新等。axios.defaults.timeout = 10000;</p><ul><li>post请求头的设置</li></ul><p>​        post请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置post的请求头为application/x-www-form-urlencoded;charset=UTF-8</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>;</span><br></pre></td></tr></table></figure><p>​    我们在发送请求前可以进行一个请求的拦截，为什么要拦截呢，我们拦截请求是用来做什么的呢？比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，我们需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p><ul><li>请求拦截</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先导入vuex,因为我们要使用到里面的状态对象</span></span><br><span class="line"><span class="comment">// vuex的路径根据自己的路径去写</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">config</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="comment">// 每次发送请求之前判断vuex中是否存在token        </span></span><br><span class="line">        <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line">        <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断 </span></span><br><span class="line">        <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;        </span><br><span class="line">        token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token);        </span><br><span class="line">        <span class="keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​        这里说一下token，一般是在登录完成之后，将用户的token通过localStorage或者cookie存在本地，然后用户每次在进入页面的时候（即在main.js中），会首先从本地存储中读取token，如果token存在说明用户已经登陆过，则更新vuex中的token状态。然后，在每次请求接口的时候，都会在请求的header中携带token，后台人员就可以根据你携带的token来判断你的登录是否过期，如果没有携带，则说明没有登录过。这时候或许有些小伙伴会有疑问了，就是每个请求都携带token，那么要是一个页面不需要用户登录就可以访问的怎么办呢？其实，你前端的请求可以携带token，但是后台可以选择不接收啊！</p><ul><li>响应的拦截</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;   </span><br><span class="line">        <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据     </span></span><br><span class="line">        <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response);        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line">    <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码    </span></span><br><span class="line">    <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line">    <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;            </span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;            </span><br><span class="line">            <span class="keyword">switch</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;                </span><br><span class="line">                <span class="comment">// 401: 未登录</span></span><br><span class="line">                <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">                <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:                    </span><br><span class="line">                    router.<span class="title function_">replace</span>(&#123;                        </span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">query</span>: &#123; </span><br><span class="line">                            <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 403 token过期</span></span><br><span class="line">              <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">              <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">              <span class="comment">// 跳转登录页面                </span></span><br><span class="line">              <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">                   <span class="title class_">Toast</span>(&#123;</span><br><span class="line">                      <span class="attr">message</span>: <span class="string">&#x27;登录过期，请重新登录&#x27;</span>,</span><br><span class="line">                      <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">                      <span class="attr">forbidClick</span>: <span class="literal">true</span></span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="comment">// 清除token</span></span><br><span class="line">                  <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">                  store.<span class="title function_">commit</span>(<span class="string">&#x27;loginSuccess&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">                  <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 </span></span><br><span class="line">                  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;                        </span><br><span class="line">                      router.<span class="title function_">replace</span>(&#123;                            </span><br><span class="line">                          <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                            </span><br><span class="line">                          <span class="attr">query</span>: &#123; </span><br><span class="line">                              <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> </span><br><span class="line">                          &#125;                        </span><br><span class="line">                      &#125;);                    </span><br><span class="line">                  &#125;, <span class="number">1000</span>);                    </span><br><span class="line">                  <span class="keyword">break</span>; </span><br><span class="line">  </span><br><span class="line">              <span class="comment">// 404请求不存在</span></span><br><span class="line">              <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">                  <span class="title class_">Toast</span>(&#123;</span><br><span class="line">                      <span class="attr">message</span>: <span class="string">&#x27;网络请求不存在&#x27;</span>,</span><br><span class="line">                      <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">                      <span class="attr">forbidClick</span>: <span class="literal">true</span></span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">              <span class="attr">default</span>:</span><br><span class="line">                  <span class="title class_">Toast</span>(&#123;</span><br><span class="line">                      <span class="attr">message</span>: error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>,</span><br><span class="line">                      <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">                      <span class="attr">forbidClick</span>: <span class="literal">true</span></span><br><span class="line">                  &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p><p>​    要注意的是，上面的Toast()方法，是我引入的vant库中的toast轻提示组件，你根据你的ui库，对应使用你的一个提示组件。</p><ul><li>封装get方法和post方法</li></ul><p>​    我们常用的ajax请求方法有get、post、put等方法，相信小伙伴都不会陌生。axios对应的也有很多类似的方法，不清楚的可以看下文档。但是为了简化我们的代码，我们还是要对其进行一个简单的封装。下面我们主要封装两个方法：get和post。</p><ul><li>get方法：</li></ul><p>​    我们通过定义一个get函数，get函数有两个参数，第一个参数表示我们要请求的url地址，第二个参数是我们要携带的请求参数。get函数返回一个promise对象，当axios其请求成功时resolve服务器返回 值，请求失败时reject错误值。最后通过export抛出get函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>)&#123;    </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;        </span><br><span class="line">       axios.<span class="title function_">get</span>(url, &#123;            </span><br><span class="line">           <span class="attr">params</span>: params        </span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);</span><br><span class="line">       &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)        </span><br><span class="line">   &#125;)    </span><br><span class="line">   &#125;);&#125;</span><br></pre></td></tr></table></figure><ul><li>post方法：</li></ul><p>​        原理同get基本一样，但是要注意的是，post方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过node的qs模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的。这就是文章开头我们import QS from ‘qs’;的原因。如果不明白序列化是什么意思的，就百度一下吧，答案一大堆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">post</span>(url, <span class="variable constant_">QS</span>.<span class="title function_">stringify</span>(params))</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​        这里有个小细节说下，axios.get()方法和axios.post()在提交数据时参数的书写方式还是有区别的。区别就是，get的第二个参数是一个{}，然后这个对象的params属性值是一个参数对象的。而post的第二个参数就是一个参数对象。两者略微的区别要留意哦！</p><ul><li>axios的封装基本就完成了，下面再简单说下api的统一管理。</li></ul><p>​        整齐的api就像电路板一样，即使再复杂也能很清晰整个线路。上面说了，我们会新建一个api.js,然后在这个文件中存放我们所有的api接口。</p><p>首先我们在api.js中引入我们封装的get和post方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  api接口统一管理 </span></span><br><span class="line"><span class="keyword">import</span> &#123; get, post &#125; <span class="keyword">from</span> <span class="string">&#x27;./http&#x27;</span></span><br></pre></td></tr></table></figure><p>现在，例如我们有这样一个接口，是一个post请求：</p><p><a href="http://www.baiodu.com/api/v1/users/my_address/address_edit_before">http://www.baiodu.com/api/v1/users/my_address/address_edit_before</a><br>我们可以在api.js中这样封装：</p><p>export const apiAddress = p =&gt; post(‘api/v1/users/my_address/address_edit_before’, p);</p><p>​        我们定义了一个apiAddress方法，这个方法有一个参数p，p是我们请求接口时携带的参数对象。而后调用了我们封装的post方法，post方法的第一个参数是我们的接口地址，第二个参数是apiAddress的p参数，即请求接口时携带的参数对象。最后通过export导出apiAddress。</p><p>​        然后在我们的页面中可以这样调用我们的api接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; apiAddress &#125; <span class="keyword">from</span> <span class="string">&#x27;@/request/api&#x27;</span>;<span class="comment">// 导入我们的api接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;        </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Address&#x27;</span>,    </span><br><span class="line">    created () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">onLoad</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;            </span><br><span class="line">        <span class="comment">// 获取数据            </span></span><br><span class="line">        <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 调用api接口，并且提供了两个参数                </span></span><br><span class="line">            <span class="title function_">apiAddress</span>(&#123;                    </span><br><span class="line">                <span class="attr">type</span>: <span class="number">0</span>,                    </span><br><span class="line">                <span class="attr">sort</span>: <span class="number">1</span>                </span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 获取数据成功后的其他操作</span></span><br><span class="line">                ………………                </span><br><span class="line">            &#125;)            </span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        其他的api接口，就在pai.js中继续往下面扩展就可以了。友情提示，为每个接口写好注释哦！！！</p><p>​        api接口管理的一个好处就是，我们把api统一集中起来，如果后期需要修改接口，我们就直接在api.js中找到对应的修改就好了，而不用去每一个页面查找我们的接口然后再修改会很麻烦。关键是，万一修改的量比较大，就规格gg了。还有就是如果直接在我们的业务代码修改接口，一不小心还容易动到我们的业务代码造成不必要的麻烦。</p><p>​        好了，最后把完成的axios封装代码奉上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**axios封装</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 请求拦截、相应拦截、错误统一处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;<span class="keyword">import</span> <span class="variable constant_">QS</span> <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;development&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;debug&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;production&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://api.123dailu.com/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求超时时间</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求头</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line">        <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">        <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;        </span><br><span class="line">        token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token);        </span><br><span class="line">        <span class="keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error);    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response);        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 服务器状态码不是200的情况    </span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;            </span><br><span class="line">            <span class="keyword">switch</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;                </span><br><span class="line">                <span class="comment">// 401: 未登录                </span></span><br><span class="line">                <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径                </span></span><br><span class="line">                <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:                    </span><br><span class="line">                    router.<span class="title function_">replace</span>(&#123;                        </span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> &#125; </span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 403 token过期                </span></span><br><span class="line">                <span class="comment">// 登录过期对用户进行提示                </span></span><br><span class="line">                <span class="comment">// 清除本地token和清空vuex中token对象                </span></span><br><span class="line">                <span class="comment">// 跳转登录页面                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">403</span>:                     </span><br><span class="line">                    <span class="title class_">Toast</span>(&#123;                        </span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;登录过期，请重新登录&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">1000</span>,                        </span><br><span class="line">                        <span class="attr">forbidClick</span>: <span class="literal">true</span>                    </span><br><span class="line">                    &#125;);                    </span><br><span class="line">                    <span class="comment">// 清除token                    </span></span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);                    </span><br><span class="line">                    store.<span class="title function_">commit</span>(<span class="string">&#x27;loginSuccess&#x27;</span>, <span class="literal">null</span>);                    </span><br><span class="line">                    <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;                        </span><br><span class="line">                        router.<span class="title function_">replace</span>(&#123;                            </span><br><span class="line">                            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                            </span><br><span class="line">                            <span class="attr">query</span>: &#123; </span><br><span class="line">                                <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> </span><br><span class="line">                            &#125;                        </span><br><span class="line">                        &#125;);                    </span><br><span class="line">                    &#125;, <span class="number">1000</span>);                    </span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                <span class="comment">// 404请求不存在                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">404</span>:                    </span><br><span class="line">                    <span class="title class_">Toast</span>(&#123;                        </span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;网络请求不存在&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">1500</span>,                        </span><br><span class="line">                        <span class="attr">forbidClick</span>: <span class="literal">true</span>                    </span><br><span class="line">                    &#125;);                    </span><br><span class="line">                <span class="keyword">break</span>;                </span><br><span class="line">                <span class="comment">// 其他错误，直接抛出错误提示                </span></span><br><span class="line">                <span class="attr">default</span>:                    </span><br><span class="line">                    <span class="title class_">Toast</span>(&#123;                        </span><br><span class="line">                        <span class="attr">message</span>: error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>,                        </span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">1500</span>,                        </span><br><span class="line">                        <span class="attr">forbidClick</span>: <span class="literal">true</span>                    </span><br><span class="line">                    &#125;);            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>);        </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * get方法，对应get请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>)&#123;    </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;        </span><br><span class="line">       axios.<span class="title function_">get</span>(url, &#123;            </span><br><span class="line">           <span class="attr">params</span>: params        </span><br><span class="line">       &#125;)        </span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);        </span><br><span class="line">       &#125;)        </span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)        </span><br><span class="line">       &#125;)    </span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;    </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;         </span><br><span class="line">       axios.<span class="title function_">post</span>(url, <span class="variable constant_">QS</span>.<span class="title function_">stringify</span>(params))        </span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);        </span><br><span class="line">       &#125;)        </span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)        </span><br><span class="line">       &#125;)    </span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="二、axios的封装根据需求的不同而不同。"><a href="#二、axios的封装根据需求的不同而不同。" class="headerlink" title="二、axios的封装根据需求的不同而不同。"></a>二、axios的封装根据需求的不同而不同。</h2><blockquote><p>1.优化axios封装，去掉之前的get和post</p><p>2.断网情况处理</p><p>3.更加模块化的api管理</p><p>4.接口域名有多个的情况</p><p>5.api挂载到vue.prototype上省去引入的步骤</p></blockquote><ul><li>http.js中axios封装的优化，先直接贴代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * axios封装</span></span><br><span class="line"><span class="comment"> * 请求拦截、响应拦截、错误统一处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store/index&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 提示函数 </span></span><br><span class="line"><span class="comment"> * 禁止点击蒙层、显示一秒后关闭</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">tip</span> = msg =&gt; &#123;    </span><br><span class="line">   <span class="title class_">Toast</span>(&#123;        </span><br><span class="line">       <span class="attr">message</span>: msg,        </span><br><span class="line">       <span class="attr">duration</span>: <span class="number">1000</span>,        </span><br><span class="line">       <span class="attr">forbidClick</span>: <span class="literal">true</span>    </span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 跳转登录页</span></span><br><span class="line"><span class="comment"> * 携带当前页面路由，以期在登录页面完成登录后返回当前页面</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">toLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   router.<span class="title function_">replace</span>(&#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,        </span><br><span class="line">       <span class="attr">query</span>: &#123;</span><br><span class="line">           <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 请求失败后的错误统一处理 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; status 请求失败的状态码</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">errorHandle</span> = (<span class="params">status, other</span>) =&gt; &#123;</span><br><span class="line">   <span class="comment">// 状态码判断</span></span><br><span class="line">   <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">       <span class="comment">// 401: 未登录状态，跳转登录页</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">           <span class="title function_">toLogin</span>();</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="comment">// 403 token过期</span></span><br><span class="line">       <span class="comment">// 清除token并跳转登录页</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">           <span class="title function_">tip</span>(<span class="string">&#x27;登录过期，请重新登录&#x27;</span>);</span><br><span class="line">           <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">           store.<span class="title function_">commit</span>(<span class="string">&#x27;loginSuccess&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="title function_">toLogin</span>();</span><br><span class="line">           &#125;, <span class="number">1000</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="comment">// 404请求不存在</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">           <span class="title function_">tip</span>(<span class="string">&#x27;请求的资源不存在&#x27;</span>); </span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="attr">default</span>:</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(other);   </span><br><span class="line">       &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.<span class="title function_">create</span>(&#123;    <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">12</span>&#125;);</span><br><span class="line"><span class="comment">// 设置post请求头</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 请求拦截器 </span></span><br><span class="line"><span class="comment"> * 每次请求前，如果存在token则在请求头中携带token </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">   instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(    </span><br><span class="line">   <span class="function"><span class="params">config</span> =&gt;</span> &#123;        </span><br><span class="line">       <span class="comment">// 登录流程控制中，根据本地是否存在token判断用户的登录情况        </span></span><br><span class="line">       <span class="comment">// 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        </span></span><br><span class="line">       <span class="comment">// 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        </span></span><br><span class="line">       <span class="comment">// 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        </span></span><br><span class="line">       <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;        </span><br><span class="line">       token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token);        </span><br><span class="line">       <span class="keyword">return</span> config;    </span><br><span class="line">   &#125;,    </span><br><span class="line">   <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    <span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">status</span> === <span class="number">200</span> ? <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res) : <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res),    </span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">            <span class="comment">// 请求已发出，但是不在2xx的范围 </span></span><br><span class="line">            <span class="title function_">errorHandle</span>(response.<span class="property">status</span>, response.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理断网的情况</span></span><br><span class="line">            <span class="comment">// eg:请求超时或断网时，更新state的network状态</span></span><br><span class="line">            <span class="comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span></span><br><span class="line">            <span class="comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">onLine</span>) &#123;</span><br><span class="line">               store.<span class="title function_">commit</span>(<span class="string">&#x27;changeNetwork&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure><p>​    这个axios和之前的大同小异，做了如下几点改变：</p><blockquote><p>1.去掉了之前get和post方法的封装，通过创建一个axios实例然后export default方法导出，这样使用起来更灵活一些。</p><p>2.去掉了通过环境变量控制baseUrl的值。考虑到接口会有多个不同域名的情况，所以准备通过js变量来控制接口域名。这点具体在api里会介绍。</p><p>3.增加了请求超时，即断网状态的处理。说下思路，当断网时，通过更新vuex中network的状态来控制断网提示组件的显示隐藏。断网提示一般会有重新加载数据的操作，这步会在后面对应的地方介绍。</p><p>4.公用函数进行抽出，简化代码，尽量保证单一职责原则。</p></blockquote><p>​    下面说下api这块，考虑到一下需求：</p><blockquote><p>1.更加模块化</p><p>2.更方便多人开发，有效减少解决命名冲突</p><p>3.处理接口域名有多个情况</p></blockquote><p>​        这里这里呢新建了一个api文件夹，里面有一个index.js和一个base.js，以及多个根据模块划分的接口js文件。index.js是一个api的出口，base.js管理接口域名，其他js则用来管理各个模块的接口。</p><p>先放index.js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * api接口的统一出口</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="comment">// 文章模块接口</span></span><br><span class="line">   <span class="keyword">import</span> article <span class="keyword">from</span> <span class="string">&#x27;@/api/article&#x27;</span>;</span><br><span class="line">   <span class="comment">// 其他模块的接口……</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">    article,</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        index.js是一个api接口的出口，这样就可以把api接口根据功能划分为多个模块，利于多人协作开发，比如一个人只负责一个模块的开发等，还能方便每个模块中接口的命名哦。</p><p>​        base.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 接口域名的管理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> base = &#123;    </span><br><span class="line">   <span class="attr">sq</span>: <span class="string">&#x27;https://xxxx111111.com/api/v1&#x27;</span>,    </span><br><span class="line">   <span class="attr">bd</span>: <span class="string">&#x27;http://xxxxx22222.com/api&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> base;</span><br></pre></td></tr></table></figure><p>​    通过base.js来管理我们的接口域名，不管有多少个都可以通过这里进行接口的定义。即使修改起来，也是很方便的。</p><p>​    最后就是接口模块的说明，例如上面的article.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * article模块接口列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">&#x27;./base&#x27;</span>; <span class="comment">// 导入接口域名列表</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;@/utils/http&#x27;</span>; <span class="comment">// 导入http中创建的axios实例</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>; <span class="comment">// 根据需求是否导入qs模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> article = &#123;    </span><br><span class="line">    <span class="comment">// 新闻列表    </span></span><br><span class="line">    articleList () &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/topics`</span>);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment">// 新闻详情,演示    </span></span><br><span class="line">    articleDetail (id, params) &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/topic/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;            </span><br><span class="line">            <span class="attr">params</span>: params        </span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// post提交    </span></span><br><span class="line">    login (params) &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/accesstoken`</span>, qs.<span class="title function_">stringify</span>(params));    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他接口…………</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> article;</span><br></pre></td></tr></table></figure><p>​        1.通过直接引入我们封装好的axios实例，然后定义接口、调用axios实例并返回，可以更灵活的使用axios，比如你可以对post请求时提交的数据进行一个qs序列化的处理等。</p><p>​        2.请求的配置更灵活，你可以针对某个需求进行一个不同的配置。关于配置的优先级，axios文档说的很清楚，这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。</p><p>​        3.restful风格的接口，也可以通过这种方式灵活的设置api接口地址。</p><p>​        最后，为了方便api的调用，我们需要将其挂载到vue的原型上。在main.js中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">// 导入路由文件</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span> <span class="comment">// 导入vuex文件</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span> <span class="comment">// 导入api接口</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$api</span> = api; <span class="comment">// 将api挂载到vue的原型上</span></span><br><span class="line">然后我们可以在页面中这样调用接口，eg：</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;    </span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params">id</span>) &#123;      </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$api</span>.<span class="property">article</span>.<span class="title function_">articleDetail</span>(id, &#123;        </span><br><span class="line">            <span class="attr">api</span>: <span class="number">123</span>      </span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 执行某些操作      </span></span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再提一下断网的处理，这里只做一个简单的示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;    </span><br><span class="line">        &lt;div v-if=&quot;!network&quot;&gt;      </span><br><span class="line">            &lt;h3&gt;我没网了&lt;/h3&gt;      </span><br><span class="line">            &lt;div @click=&quot;onRefresh&quot;&gt;刷新&lt;/div&gt;      </span><br><span class="line">        &lt;/div&gt;    </span><br><span class="line">        &lt;router-view/&gt;      </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,  </span><br><span class="line">        <span class="attr">computed</span>: &#123;    </span><br><span class="line">            ...<span class="title function_">mapState</span>([<span class="string">&#x27;network&#x27;</span>])  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="attr">methods</span>: &#123;    </span><br><span class="line">            <span class="comment">// 通过跳转一个空页面再返回的方式来实现刷新当前页面数据的目的</span></span><br><span class="line">            onRefresh () &#123;      </span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/refresh&#x27;</span>)    </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​    </p><p>​        这是app.vue，这里简单演示一下断网。在http.js中介绍了，我们会在断网的时候，来更新vue中network的状态，那么这里我们根据network的状态来判断是否需要加载这个断网组件。断网情况下，加载断网组件，不加载对应页面的组件。当点击刷新的时候，我们通过跳转refesh页面然后立即返回的方式来实现重新获取数据的操作。因此我们需要新建一个refresh.vue页面，并在其beforeRouteEnter钩子中再返回当前页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// refresh.vue</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;            </span><br><span class="line">        vm.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="keyword">from</span>.<span class="property">fullPath</span>)        </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;axios-详细封装&quot;&gt;&lt;a href=&quot;#axios-详细封装&quot; class=&quot;headerlink&quot; title=&quot;axios 详细封装&quot;&gt;&lt;/a&gt;axios 详细封装&lt;/h1&gt;&lt;h2 id=&quot;一、axios的封装&quot;&gt;&lt;a href=&quot;#一、axios的封装&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="axios" scheme="https://aliveseven.github.io/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://aliveseven.github.io/posts/4a17b156/"/>
    <id>https://aliveseven.github.io/posts/4a17b156/</id>
    <published>2022-08-28T05:35:57.003Z</published>
    <updated>2022-08-30T15:20:29.153Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to My Blog! This is my first post.If you are interested in it.You can follow my <a href="https://github.com/AliveSeven">GitHub</a><br>.You can also contact me by QQ or Email.Thank you for seeing this.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to My Blog! This is my first post.If you are interested in it.You can follow my &lt;a href=&quot;https://github.com/AliveSeven&quot;&gt;GitHub&lt;/a</summary>
      
    
    
    
    
    <category term="Hello" scheme="https://aliveseven.github.io/tags/Hello/"/>
    
  </entry>
  
</feed>
