<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2023-06-04T14:08:45.605Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果</title>
    <link href="https://aliveseven.github.io/posts/fc56fa96/"/>
    <id>https://aliveseven.github.io/posts/fc56fa96/</id>
    <published>2023-06-04T14:02:57.327Z</published>
    <updated>2023-06-04T14:08:45.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果"><a href="#Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果" class="headerlink" title="Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果"></a>Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>移动端H5开发的时候有时需要H5里面的图片或者说是盒子（div）实现，随着用户的手机晃动，里面的盒子也跟着一起晃动</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h2 id="通过deviceorientation-的浏览器API处理方法"><a href="#通过deviceorientation-的浏览器API处理方法" class="headerlink" title="通过deviceorientation 的浏览器API处理方法"></a>通过<code>deviceorientation</code> 的浏览器API处理方法</h2><p>具体来说，可以先在组件的 setup 函数中监听 <code>deviceorientation</code> 事件，并在回调函数中获取设备的 <strong>beta 和 gamma</strong> 值，它们分别表示手机前后倾斜和左右倾斜的角度。然后根据这两个值计算出需要移动的距离，通过修改图片或盒子的 <code>transform</code> 属性来实现平移的效果。</p><h2 id="deviceorientation的浏览器兼容性"><a href="#deviceorientation的浏览器兼容性" class="headerlink" title="deviceorientation的浏览器兼容性"></a>deviceorientation的浏览器兼容性</h2><p><img src="https://pic.imgdb.cn/item/647c97ab1ddac507cc490303.jpg"></p><ul><li>可以看出来这个API的在各个浏览器兼容性还是相当可以的。</li></ul><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><ul><li>可以尝试使用以下代码来检查设备是否支持<code>deviceorientation</code>事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">DeviceOrientationEvent</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Device orientation is supported&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Device orientation is not supported&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果设备支持<code>deviceorientation</code>事件，则应该会输出“Device orientation is supported”。如果它不支持，则应该会输出“Device orientation is not supported”。</li><li>另外，您还需要确保将<code>handleOrientation</code>函数正确定义，并且它能够正确地处理<code>deviceorientation</code>事件。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>首先是html代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 岛屿 --&gt;</span><br><span class="line">&lt;div id=&quot;isle&quot; ref=&quot;isle&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;left w-176 h-202 absolute top-441&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;center w-637 h-736 absolute top-156 left-48 right-65&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 右边的岛屿 --&gt;</span><br><span class="line">  &lt;div class=&quot;left w-160 h-110 absolute right-0 top-515&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#isle</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vue3的代码实现案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import &#123; onMounted, onUnmounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const isle = ref(null); // 获取岛屿（图片）元素</span><br><span class="line">    let startX = null;</span><br><span class="line">    let startY = null;</span><br><span class="line"></span><br><span class="line">    // 监听 deviceorientation 事件</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      window.addEventListener(&#x27;deviceorientation&#x27;, handleOrientation);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 移除事件监听</span><br><span class="line">    onUnmounted(() =&gt; &#123;</span><br><span class="line">      window.removeEventListener(&#x27;deviceorientation&#x27;, handleOrientation);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function handleOrientation(event) &#123;</span><br><span class="line">      const beta = event.beta || 0; // 前后倾斜的角度</span><br><span class="line">      const gamma = event.gamma || 0; // 左右倾斜的角度</span><br><span class="line"></span><br><span class="line">      if (startX === null &amp;&amp; startY === null) &#123;</span><br><span class="line">        startX = gamma;</span><br><span class="line">        startY = beta;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const deltaX = gamma - startX; // 计算需要平移的距离</span><br><span class="line">      const deltaY = beta - startY;</span><br><span class="line"></span><br><span class="line">      isle.value.style.transform = `translate3d($&#123;deltaX&#125;px, $&#123;-deltaY&#125;px, 0)`;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>在组件的模板中，需要给岛屿元素添加一个 ref 属性，然后在 setup 函数中使用 <code>ref</code> 函数获取该元素的引用。同时，在 element 中增加 <code>transition: transform 0.2s ease-out;</code> 的样式，以实现平滑过渡的效果。</li></ul><h2 id="效果调试——浏览器怎么模拟设备晃动"><a href="#效果调试——浏览器怎么模拟设备晃动" class="headerlink" title="效果调试——浏览器怎么模拟设备晃动"></a>效果调试——浏览器怎么模拟设备晃动</h2><blockquote><p>在浏览器中模拟设备晃动，您可以使用 Chrome 开发者工具。以下是一些步骤：</p></blockquote><ol><li>打开 Chrome 浏览器并访问您要调试的网站。</li><li>打开 Chrome 开发者工具 (F12)。</li><li>点击 Toggle Device Toolbar (Ctrl+Shift+M)，以便在开发者工具中打开设备模式工具栏。</li><li>选择一个设备，例如 iPhone 或 Android 设备。</li><li>在设备模式工具栏上，单击三个点图标，然后选择 Senssors 选项卡。</li><li>在 Sensors 选项卡中，您可以模拟设备的晃动和其他运动。</li></ol><blockquote><p>注：这个功能可能不适用于所有版本的 Chrome 浏览器。如果您的 Chrome 浏览器不支持此功能，您可以尝试使用其他浏览器或安装 Chrome 插件来模拟设备晃动。</p></blockquote><p><img src="https://pic.imgdb.cn/item/647c99531ddac507cc4b5b72.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果&quot;&gt;&lt;a href=&quot;#Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果&quot; class=&quot;headerlink&quot; title=&quot;Vue实现随着手机的晃动，里面的图片也跟着一起晃</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>禁止HTML页面进行缩放操作，以及meta标签的常见作用</title>
    <link href="https://aliveseven.github.io/posts/20b6931d/"/>
    <id>https://aliveseven.github.io/posts/20b6931d/</id>
    <published>2023-05-30T15:34:17.079Z</published>
    <updated>2023-05-30T15:40:59.414Z</updated>
    
    <content type="html"><![CDATA[<h1 id="禁止HTML页面进行缩放操作，以及meta标签的常见作用"><a href="#禁止HTML页面进行缩放操作，以及meta标签的常见作用" class="headerlink" title="禁止HTML页面进行缩放操作，以及meta标签的常见作用"></a>禁止HTML页面进行缩放操作，以及meta标签的常见作用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发H5的时候，有时候需要嵌入到IOS、安卓或者PC等其他端处，或者单纯是一个H5，可能有时候需要禁止用户对页面进行缩放和放大的操作。</p><h2 id="meta是什么"><a href="#meta是什么" class="headerlink" title="meta是什么"></a>meta是什么</h2><ul><li>HTML中的meta标签用于提供关于网页的元数据信息，这些信息可以帮助浏览器正确地展示网页内容，同时也对**搜索引擎优化(SEO)**和社交媒体分享有一定作用。</li><li>meta标签主要包含name属性、http-equiv属性和content属性。这三个属性都是meta标签必须的属性。</li></ul><h2 id="meta标签可以包含以下信息"><a href="#meta标签可以包含以下信息" class="headerlink" title="meta标签可以包含以下信息"></a>meta标签可以包含以下信息</h2><ul><li><strong>网页关键词（keywords）</strong>：指定与页面相关的关键词，以便搜索引擎更好地理解并索引该页面。</li><li><strong>网页描述（description）</strong>：提供一个简短的描述，告诉搜索引擎和用户这个页面是关于什么的。</li><li><strong>编码方式（charset）</strong>：指定网页使用的字符编码方式，避免出现乱码问题。</li><li><strong>视口（viewport）</strong>：指定如何在移动设备上显示网页，使得用户可以更好地浏览。</li><li>其他信息：还可以包含其他自定义的元数据信息，比如作者、生成日期等。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>name属性用来指定元数据的名称，如“keywords”、“description”等；content属性则用来设置元数据的具体内容；而http-equiv属性则可以用来模拟HTTP头部的作用，常见的值有“refresh”、“content-type”等。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML, CSS, JavaScript&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Learn HTML, CSS, and JavaScript online for free.&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=https://www.example.com/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以上代码中第一个meta标签定义了页面的关键词，在<strong>搜索引擎优化</strong>时有着很大的作用；第二个meta标签则用来描述页面，帮助用户更好地了解该网页的内容；第三个meta标签则指定在5秒后自动跳转到另一个网页。</li></ul><blockquote><p>需要注意的是，虽然不是所有的meta标签都需要这三个属性，但至少需要一个name或http-equiv属性和一个content属性才能正确地定义元数据信息。</p></blockquote><h2 id="禁止HTML页面进行缩放操作"><a href="#禁止HTML页面进行缩放操作" class="headerlink" title="禁止HTML页面进行缩放操作"></a>禁止HTML页面进行缩放操作</h2><p>其实很简单，在index.html里面加入下面这行代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置防止手机百度转码"><a href="#设置防止手机百度转码" class="headerlink" title="设置防止手机百度转码"></a>设置防止手机百度转码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;禁止HTML页面进行缩放操作，以及meta标签的常见作用&quot;&gt;&lt;a href=&quot;#禁止HTML页面进行缩放操作，以及meta标签的常见作用&quot; class=&quot;headerlink&quot; title=&quot;禁止HTML页面进行缩放操作，以及meta标签的常见作用&quot;&gt;&lt;/a&gt;禁止</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="https://aliveseven.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象类型判断方法，以及通过value取key、key取value</title>
    <link href="https://aliveseven.github.io/posts/350cf89c/"/>
    <id>https://aliveseven.github.io/posts/350cf89c/</id>
    <published>2023-04-17T19:52:20.198Z</published>
    <updated>2023-05-24T15:39:30.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript对象类型判断方法，以及通过value取key、key取value"><a href="#JavaScript对象类型判断方法，以及通过value取key、key取value" class="headerlink" title="JavaScript对象类型判断方法，以及通过value取key、key取value"></a>JavaScript对象类型判断方法，以及通过value取key、key取value</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>前端开发的时候经常需要判断某个值的类型是不是对象，不能通过typeof来判断，要用别的方法。</li><li>JS对象的操作类似于Java中的Map和HashMap，很多时候我们需要找到对象在某个特定key对应的value，或者说是找到某个value对应的key。</li><li>当然，一般一个key只能对应一个value，但是一个value可以对应多个key。这里重点讲一下通过value来找到特定key的方法</li></ul><h2 id="对象类型判断"><a href="#对象类型判断" class="headerlink" title="对象类型判断"></a>对象类型判断</h2><h3 id="Object-prototype-toString-call-方法"><a href="#Object-prototype-toString-call-方法" class="headerlink" title="Object.prototype.toString.call()方法"></a><strong>Object.prototype.toString.call()方法</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><ul><li>这个方法还能判断其他类型，如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> b= <span class="string">&#x27;222&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title class_">Symbol</span>(); </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;cc&#x27;</span> &#125;; </span><br><span class="line"><span class="keyword">var</span> res = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">//[object Array] </span></span><br><span class="line"><span class="keyword">var</span> res2 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">//[object Object] </span></span><br><span class="line"><span class="keyword">var</span> res3 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res3); <span class="comment">//[object Number] </span></span><br><span class="line"> <span class="keyword">var</span> res4 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res4); <span class="comment">//[object String] </span></span><br><span class="line"> <span class="keyword">var</span> res4 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(c); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res4); <span class="comment">//[object Null] </span></span><br><span class="line"> <span class="keyword">var</span> res5 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(d); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res5); <span class="comment">//[object Boolean] </span></span><br><span class="line"> <span class="keyword">var</span> res6 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(e); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res6); <span class="comment">//[object Undefined] </span></span><br><span class="line"> <span class="keyword">var</span> res7 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(f); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res7); <span class="comment">//[object Symbol]</span></span><br></pre></td></tr></table></figure><h3 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a><strong>constructor</strong>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;aa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;bb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;cc&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><strong>instanceof</strong></h3><blockquote><p>注意：数组也是对象的一种，因此用 arr instanceof Object 也为true。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;bb&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;cc&#x27;</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true 数组也是对象的一种</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><strong>typeof</strong></h3><blockquote><p>使用typeof判断对象其实也不太准确</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> obj === <span class="title class_">Object</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 表达式                           返回值</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>      <span class="comment">//         &#x27;undefined&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>           <span class="comment">//         &#x27;object&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>           <span class="comment">//         &#x27;boolean&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>            <span class="comment">//         &#x27;number&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;abc&quot;</span>          <span class="comment">//         &#x27;string&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;  <span class="comment">//         &#x27;function&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;             <span class="comment">//         &#x27;object&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> []             <span class="comment">//         &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="JS对象通过value找到key"><a href="#JS对象通过value找到key" class="headerlink" title="JS对象通过value找到key"></a>JS对象通过value找到key</h2><ul><li>首先最简单暴力的方法当然是通过循环来查找</li><li>很简单暴力，就几行代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj[key] === value)&#123;</span><br><span class="line"><span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后是比较好用的方法，通过 <code>Object.entries()</code>将对象转换成键值对数组，然后使用<code>Array.prototype.find()</code> 方法查找匹配的键值对（key，value），并返回key。</li><li>或者是通过数组遍历的方法，比如map、filter、find来找到想要的key</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findKeyByValue</span>(<span class="params">obj, value</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj).<span class="title function_">find</span>(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> val === value);</span><br><span class="line">  <span class="keyword">return</span> result ? result[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS对象通过key取value"><a href="#JS对象通过key取value" class="headerlink" title="JS对象通过key取value"></a>JS对象通过key取value</h2><ul><li>这个比上面哪个简单，因为key一般是唯一的，而像value取key的话，由于value是不唯一的，有可能有多个key对应的value值是一样的，所以操作起来比较麻烦。</li><li>可以直接通过Obj.key或者Obj[key]来获取</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript对象类型判断方法，以及通过value取key、key取value&quot;&gt;&lt;a href=&quot;#JavaScript对象类型判断方法，以及通过value取key、key取value&quot; class=&quot;headerlink&quot; title=&quot;JavaScri</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Java返回时间带T，LocalDateTime时间格式化方案</title>
    <link href="https://aliveseven.github.io/posts/dae630a7/"/>
    <id>https://aliveseven.github.io/posts/dae630a7/</id>
    <published>2023-04-09T16:27:49.290Z</published>
    <updated>2023-04-09T16:58:19.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java返回时间带T，LocalDateTime时间格式化方案"><a href="#Java返回时间带T，LocalDateTime时间格式化方案" class="headerlink" title="Java返回时间带T，LocalDateTime时间格式化方案"></a>Java返回时间带T，LocalDateTime时间格式化方案</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了标题的问题，Redis在存储LocalDateTime的时候也会有相关的问题，解决方案其实也很简单，在相对应的实体类，对LocalDateTime类型加几条注解即可</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过LocalDateTime的源码可以发现，问题出现的原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> date.toString() + <span class="string">&#x27;T&#x27;</span> + time.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个问题可以前端处理，也可以后端处理，前端处理就是可以通过格式化的方式去掉T</p><p>而后端处理的方式，最简单就是加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime time;</span><br></pre></td></tr></table></figure><ul><li>如果这个时候，后台返回还有T的话，可能是引用了fastJson的api，需要加多一条注解，@JSONField</li><li>同样适用于Redis保存</li><li>所以最好用下面的这个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="meta">@JSONField(format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java返回时间带T，LocalDateTime时间格式化方案&quot;&gt;&lt;a href=&quot;#Java返回时间带T，LocalDateTime时间格式化方案&quot; class=&quot;headerlink&quot; title=&quot;Java返回时间带T，LocalDateTime时间格式化方</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题</title>
    <link href="https://aliveseven.github.io/posts/ac03ca9a/"/>
    <id>https://aliveseven.github.io/posts/ac03ca9a/</id>
    <published>2023-04-09T16:00:02.337Z</published>
    <updated>2023-04-09T16:06:32.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题"><a href="#Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题" class="headerlink" title="Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题"></a>Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前Java开发用到的JSON操作工具有很多，大多都有一点点小问题，我在开发毕设的时候有用过Hutool的JSONUtil、阿里的FastJSON、还有谷歌的GSON。</p><p>看过了很多CSDN和各个论坛的文章，感觉对这个JSON顺序问题的解决方案还是比较少相关文章，自己还是做一个记录吧</p><h2 id="各个问题"><a href="#各个问题" class="headerlink" title="各个问题"></a>各个问题</h2><h3 id="JSONUtil"><a href="#JSONUtil" class="headerlink" title="JSONUtil"></a>JSONUtil</h3><ul><li>Hutool的JSONUtil在进行JSON转字符串的时候（JSONUtil.toJsonStr()），会有个问题，就是会自动把时间类型<code>LocalDateTime</code>的值转成时间戳，然后存在Redis中，取出来就有问题了，和数据库拿出来的不一样，造成数据不一致</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>序列化配置</li><li>用下面的方法（不知道生效不，听说可以）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String mes= JSON.toJSONString(requestMap);</span><br><span class="line">改为</span><br><span class="line">String mes= JSON.toJSONStringWithDateFormat(requestMap,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h3><ul><li>阿里的FastJSON更坑，其转换方法会自动给你把JSON数据按key从a—z的顺序排成有序，然后再存入Redis中，再次请求数据顺序就会变了</li><li>而且字符串转成JSON的时候也会进行一个key的排序</li><li>如果有需要拿到<strong>有序的</strong>JSON，可以用FastJson这个工具，这个除了顺序变了其他还是挺好的</li></ul><blockquote><p>因为JsonObject 默认空参构造方法是用 HashMap 来存储的，所以输出是按 key 的排序来的</p></blockquote><h4 id="常规解决方案"><a href="#常规解决方案" class="headerlink" title="常规解决方案"></a>常规解决方案</h4><ul><li>字符串转JSON的时候，也就是使用<code>JSON.parseObject</code>的时候，要注意赋第二个参数<code>Feature.OrderedField</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseObject(res , Feature.OrderedField);</span><br></pre></td></tr></table></figure><ul><li>JSON转字符串的时候，可以用<code>LinkedHashMap</code>来定义要转换的JSONObject</li><li>但是我要处理的JSON数据不是自己定义，而是通过Mybatis-Plus内置的分页方法返回的。所以其实也没什么用，上面这个。</li><li>具体方案👇</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">JsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(<span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;());</span><br><span class="line"><span class="comment">// 转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">JsonString</span> <span class="operator">=</span> JsonObject.toJSONString();</span><br><span class="line"><span class="comment">// 字符串转JSON，取</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseObject(JsonString , Feature.OrderedField);</span><br></pre></td></tr></table></figure><h3 id="GSON"><a href="#GSON" class="headerlink" title="GSON"></a>GSON</h3><ul><li>相比前面两个，我感觉这个JSON转换工具更好用，没有顺序问题，生态也挺好，就是无法设置null替换，还有时间类型<code>LocalDateTime</code>的转换问题。</li><li>默认转换的时候，会把值为null的key给去掉，还有时间类型LocalDateTime也不会做格式化</li><li>这里定义一个函数，通过这个函数来进行JSON转换即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aliveseven.adminmanage.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateAdapter</span> <span class="keyword">implements</span> <span class="title class_">JsonSerializer</span>&lt;LocalDateTime&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonElement <span class="title function_">serialize</span><span class="params">(LocalDateTime localDateTime, Type type, JsonSerializationContext jsonSerializationContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonPrimitive</span>(localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJson</span><span class="params">(Object scr)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>()</span><br><span class="line">                .setPrettyPrinting()</span><br><span class="line">                .serializeNulls()</span><br><span class="line">                .registerTypeAdapter(LocalDateTime.class,<span class="keyword">new</span> <span class="title class_">LocalDateAdapter</span>()).create();</span><br><span class="line">        <span class="keyword">return</span> gson.toJson(scr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题&quot;&gt;&lt;a href=&quot;#Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue父子组件通过v-model双向绑定传值</title>
    <link href="https://aliveseven.github.io/posts/11d10164/"/>
    <id>https://aliveseven.github.io/posts/11d10164/</id>
    <published>2023-04-09T15:07:39.415Z</published>
    <updated>2023-04-09T15:20:36.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue父子组件通过v-model双向绑定传值"><a href="#Vue父子组件通过v-model双向绑定传值" class="headerlink" title="Vue父子组件通过v-model双向绑定传值"></a>Vue父子组件通过v-model双向绑定传值</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做毕设的时候，需要二次封装Naive UI的Input组件，达到多次复用的效果，然后遇到了需要v-model来二次传值的需求，实现方法本身不难，这里把Vue3的做法叙述一下，Vue2应该也差不多。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ul><li>所谓的<code>v-model</code>其实就是<code>v-bind</code>搭配<code>v-on</code>和<code>emit</code>的组合语法糖，可以通过这三个东西来定义需要双向绑定的变量名</li><li>直接上代码</li></ul><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model:value</span>=<span class="string">&quot;val&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><ul><li>子组件需要的做的事情其实不多，通过<code>props</code>定义一个叫<code>value</code>的变量，然后绑定到<code>input</code>属性的<code>:value</code>上面</li><li>props中的value你可以给他定义类型，也可以不定义，看你喜欢</li><li>然后需要定义一个<code>update:value</code>的emit事件，<strong>一定要叫这个名字</strong>，<strong>一定要叫这个名字</strong>——<code>update:value</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:value&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>如果你的props中定义的不是value，比如是title，那么你的父组件应该是这样的👇</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model:title</span>=<span class="string">&quot;val&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件则是</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;props.title&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:title&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>emit的事件名一定是<code>update:</code> + <code>你要用v-model双向绑定传值的变量名</code>，也就是上面props中的<code>value</code>或者是<code>title</code></p></blockquote><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>v-on:input绑定的方法，我不知道是Naive UI中的<code>@input</code>方法是不是和原生的不太一样</li><li>原生的似乎在输入的时候返回了$event事件，<strong>但是Naive UI中的input组件第一次是返回$event事件，第二次后面开始返回输入的值</strong></li><li>所以这里我做了一个判断，如果el是$event事件，那么它会有个target，然后取<code>$event.target.value</code>即可</li><li>如果没有则直接取它的值，不然会有**[object InputEvent]**的BUG</li></ul><h2 id="object-InputEvent-的BUG"><a href="#object-InputEvent-的BUG" class="headerlink" title="[object InputEvent]的BUG"></a>[object InputEvent]的BUG</h2><p><img src="https://pic.imgdb.cn/item/6432d0c30d2dde5777bad699.jpg"></p><p><img src="https://pic.imgdb.cn/item/6432d0f80d2dde5777bb24d0.jpg"></p><p>解决方案就是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value = el.target ? el.target.value : el</span><br></pre></td></tr></table></figure><p>如果是和我一样用了Navie UI中的Input进行一个v-model的二次封装的话，可以用 <code>:on-update:value</code>来进行emit方法的绑定</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">n-input</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul><li><p>除了上面说的这种通过原生的input事件搭配v-on的方法实现父子组件的v-model传值的方法外，还有其他可以用的方法</p></li><li><p>比如可以通过<code>watch</code>方法进行监听<code>props.value</code>，当value发生变化的时候，通过emit给父组件传改变后的值</p></li><li><p>也可以通过计算属性<code>computed</code>来拦截父组件传过来的value，进行修改。</p></li><li><p>另外，这个v-model的父子传值还能绑定多个，<strong>也就是说可以搞多个v-model的绑定</strong>，进行父子传值间的双向绑定。</p></li></ul><h2 id="最后附上自己的Naive-UI的Input组件二次封装"><a href="#最后附上自己的Naive-UI的Input组件二次封装" class="headerlink" title="最后附上自己的Naive UI的Input组件二次封装"></a>最后附上自己的Naive UI的Input组件二次封装</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center inputString&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!selfSelect &amp;&amp; (typeof (props.value) !== &#x27;number&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-input</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;props.value || &#x27;&#x27;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;w-50 m-2&quot;</span> <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:disabled</span>=<span class="string">&quot;props.disabled&quot;</span> <span class="attr">:maxlength</span>=<span class="string">&quot;selfMaxLength&quot;</span> <span class="attr">:allow-input</span>=<span class="string">&quot;selfAllow&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputInstRef&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prefix</span> <span class="attr">v-if</span>=<span class="string">&quot;props.Icon&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">:component</span>=<span class="string">&quot;Icon&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文字输入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center inputNumber&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;!selfSelect &amp;&amp; typeof (props.value) === &#x27;number&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-input-number</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center popInput w-full&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;props.disabled&quot;</span> <span class="attr">:show-button</span>=<span class="string">&quot;false&quot;</span> <span class="attr">:min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:validator</span>=<span class="string">&quot;validator&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ref</span>=<span class="string">&quot;inputInstRef&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prefix</span> <span class="attr">v-if</span>=<span class="string">&quot;props.Icon&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">:component</span>=<span class="string">&quot;Icon&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-input-number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">n-space</span> <span class="attr">vertical</span> <span class="attr">v-else-if</span>=<span class="string">&quot;selfSelect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-select</span> <span class="attr">:value</span>=<span class="string">&quot;props.value || &#x27;&#x27;&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;Options&quot;</span> @<span class="attr">update:value</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">n-space</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> vail <span class="keyword">from</span> <span class="string">&#x27;@/utils/validator&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Icon</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">placeholder</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">disabled</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:value&quot;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&#x27;Inputing&#x27;, el)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const value = el.target ? el.target.value : el</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, el)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vailRule = <span class="title function_">vail</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> index = <span class="title class_">Object</span>.<span class="title function_">keys</span>(vailRule).<span class="title function_">indexOf</span>(props.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfRequired = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfMaxLength = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfMessage = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfAllow = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfPattern = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfSelect = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; required, maxlength, message, allowInput, pattern, select &#125; = vailRule[props.<span class="property">title</span>]</span></span><br><span class="line"><span class="language-javascript">    selfRequired.<span class="property">value</span> = required</span></span><br><span class="line"><span class="language-javascript">    selfMaxLength.<span class="property">value</span> = maxlength</span></span><br><span class="line"><span class="language-javascript">    selfMessage.<span class="property">value</span> = message</span></span><br><span class="line"><span class="language-javascript">    selfAllow.<span class="property">value</span> = allowInput</span></span><br><span class="line"><span class="language-javascript">    selfPattern.<span class="property">value</span> = pattern</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (select) &#123;</span></span><br><span class="line"><span class="language-javascript">        selfSelect.<span class="property">value</span> = select</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">validator</span> = (<span class="params">x: number</span>) =&gt; x &gt;= <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 角色选项</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; <span class="title class_">Options</span> &#125; = <span class="title function_">toRefs</span>(<span class="title function_">useState</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: fit-content;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">    -webkit-line-clamp: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 显示的行数，这里限制为两行 */</span></span></span><br><span class="line"><span class="language-css">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 超出盒子部分隐藏 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 文字超出两行的部分为省略号 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue父子组件通过v-model双向绑定传值&quot;&gt;&lt;a href=&quot;#Vue父子组件通过v-model双向绑定传值&quot; class=&quot;headerlink&quot; title=&quot;Vue父子组件通过v-model双向绑定传值&quot;&gt;&lt;/a&gt;Vue父子组件通过v-model双向绑定</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现左边固定宽度，右边自适应的两栏布局</title>
    <link href="https://aliveseven.github.io/posts/3713c53c/"/>
    <id>https://aliveseven.github.io/posts/3713c53c/</id>
    <published>2023-03-27T17:14:36.934Z</published>
    <updated>2023-03-27T17:27:44.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS实现左边固定宽度，右边自适应的两栏布局"><a href="#CSS实现左边固定宽度，右边自适应的两栏布局" class="headerlink" title="CSS实现左边固定宽度，右边自适应的两栏布局"></a>CSS实现左边固定宽度，右边自适应的两栏布局</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul><li>左边设置宽度，右边设为flex即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>; // 填满空间</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul><li>左侧固定宽度左浮动，右侧设margin-left等于左侧宽度，右侧宽度通过calc来计算，或者直接设为auto</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    // <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><ul><li><strong>利用浮动+BFC</strong></li><li>左边设为浮动，右边触发BFC，BFC区域不会与浮动元素重叠</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><ul><li><strong>利用绝对定位</strong></li><li>父元素设为相对定位</li><li>子元素设为left为0，设置宽度，右边元素left设为左边元素的宽度，right设为0即可</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS实现左边固定宽度，右边自适应的两栏布局&quot;&gt;&lt;a href=&quot;#CSS实现左边固定宽度，右边自适应的两栏布局&quot; class=&quot;headerlink&quot; title=&quot;CSS实现左边固定宽度，右边自适应的两栏布局&quot;&gt;&lt;/a&gt;CSS实现左边固定宽度，右边自适应的两栏</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发Vant，Popover点击外面无法关闭？</title>
    <link href="https://aliveseven.github.io/posts/5ef1779d/"/>
    <id>https://aliveseven.github.io/posts/5ef1779d/</id>
    <published>2023-03-19T11:10:38.282Z</published>
    <updated>2023-03-19T11:23:53.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端开发Vant，Popover点击外面无法关闭？"><a href="#移动端开发Vant，Popover点击外面无法关闭？" class="headerlink" title="移动端开发Vant，Popover点击外面无法关闭？"></a>移动端开发Vant，Popover点击外面无法关闭？</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行HyBridge开发的时候，遇到这样的问题，在移动端端使用Vant中的Popover组件，点击组件外的任意地方能实现组件的关闭，但是<strong>到了PC端这个效果就没了</strong>。</p><p>因为Vant中的组件默认适配移动端，在PC端中没法监听到mouse事件。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>引入@vant/touch-emulator即可，这个库会在桌面端自动将 mouse 事件转换成对应的 touch 事件，使得组件能够在桌面端使用。</p><p>安装模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i &#x27;@vant/touch-emulator&#x27; -S</span><br></pre></td></tr></table></figure><p>引入模块</p><p>在main.js中引入即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@vant/touch-emulator&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端开发Vant，Popover点击外面无法关闭？&quot;&gt;&lt;a href=&quot;#移动端开发Vant，Popover点击外面无法关闭？&quot; class=&quot;headerlink&quot; title=&quot;移动端开发Vant，Popover点击外面无法关闭？&quot;&gt;&lt;/a&gt;移动端开发Van</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue虚拟列表</title>
    <link href="https://aliveseven.github.io/posts/4d7fcd88/"/>
    <id>https://aliveseven.github.io/posts/4d7fcd88/</id>
    <published>2023-03-04T17:29:21.626Z</published>
    <updated>2023-04-03T08:42:13.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue虚拟列表"><a href="#Vue虚拟列表" class="headerlink" title="Vue虚拟列表"></a>Vue虚拟列表</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>最近在开发一个通用组件排行榜的时候，需要展示多条数据，数据量虽然不大，但是开发的组件需要嵌入到PC、安卓、IOS多端适配。</li><li>适配的时候需要处理一下这些数据量，不然会产生性能问题</li><li>然后在浏览谷歌的时候就发现虚拟列表这个东西</li></ul><h2 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h2><ul><li>虚拟列表是指对列表的 <code>可视区域</code> 进行渲染，对 <code>非可见区域</code> 不渲染或部分渲染，从而极大提高渲染性能的一种技术。</li></ul><h2 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h2><ul><li>目前我觉得比较好用的库是<strong><a href="https://github.com/Akryum/vue-virtual-scroller">vue-virtual-scroller</a></strong></li><li>此外还有vue<em>-</em>virtual-scroll-list、react-virtualized等</li></ul><h2 id="Vue-Virtual-Scroller的使用"><a href="#Vue-Virtual-Scroller的使用" class="headerlink" title="Vue-Virtual-Scroller的使用"></a>Vue-Virtual-Scroller的使用</h2><ul><li>官方教程：<a href="https://github.com/Akryum/vue-virtual-scroller/blob/master/packages/vue-virtual-scroller/README.md">https://github.com/Akryum/vue-virtual-scroller/blob/master/packages/vue-virtual-scroller/README.md</a></li><li>官方的较为详细哦</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller@next</span><br><span class="line"></span><br><span class="line">yarn add vue-virtual-scroller@next</span><br><span class="line"></span><br><span class="line">npm install --save vue-virtual-scroller@next --legacy-peer-deps</span><br></pre></td></tr></table></figure><h2 id="在main-js中全局使用"><a href="#在main-js中全局使用" class="headerlink" title="在main.js中全局使用"></a>在main.js中全局使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class="line">import VueVirtualScroller from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(VueVirtualScroller)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h3 id="RecycleScroller组件"><a href="#RecycleScroller组件" class="headerlink" title="RecycleScroller组件"></a>RecycleScroller组件</h3><ul><li>使用该组件的时候，需要给定每个item的高度</li><li>而DynamicScroller组件，则是不需要知道item的高度，自动计算其值</li><li>首先在需要使用的组件中引入 ↓</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; DynamicScroller &#125; from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import &#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;;</span><br></pre></td></tr></table></figure><ul><li>然后直接使用即可，有几个props需要在使用的时候传入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;reyclerList&quot;&gt;</span><br><span class="line">    &lt;RecycleScroller</span><br><span class="line">      style=&quot;height: 100%;&quot;</span><br><span class="line">      v-if=&quot;list.length &gt; 0&quot;</span><br><span class="line">      :items=&quot;list&quot;</span><br><span class="line">      :item-size=&quot;50&quot;</span><br><span class="line">      key-field=&quot;id&quot;</span><br><span class="line">      :minItemSize=&quot;0&quot;</span><br><span class="line">      :buffer=&quot;200&quot;</span><br><span class="line">      v-slot=&quot;&#123; item , index &#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; index &#125;&#125; :&#123;&#123; item.nums &#125;&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/RecycleScroller&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; RecycleScroller &#125; from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import &#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    RecycleScroller</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const list = []</span><br><span class="line">    for(let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">      list.push(&#123;</span><br><span class="line">        id: i,</span><br><span class="line">        nums: `list-nums $&#123;i&#125;`</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.reyclerList&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="https://pic.imgdb.cn/item/642a8911a682492fcc2e522f.gif" alt=""></p><ul><li>可以看到，使用了RecycleScroller加载1万条数据，只会渲染部分dom，而不会全部加载出来，通过这种方式可以减少dom的加载，极大优化性能</li></ul><h2 id="DynamicScroller组件"><a href="#DynamicScroller组件" class="headerlink" title="DynamicScroller组件"></a>DynamicScroller组件</h2><ul><li>DynamicScroller和RecycleScroller差不多，但是它可以不</li></ul><h2 id="相关props传参"><a href="#相关props传参" class="headerlink" title="相关props传参"></a>相关props传参</h2><ul><li><code>items</code>: 要在滚动条中显示的总列表。</li><li><code>direction</code> (default: <code>&#39;vertical&#39;</code>): 滚动的方向，列表的方向，有垂直和水平，默认是垂直方向， <code>&#39;vertical&#39;</code> or <code>&#39;horizontal&#39;</code>.</li><li><code>itemSize</code>: 子列表的高度，默认为null，在RecycleScroller中必须要设置这个</li><li><code>minItemSize</code>: 如果子列表的高度（或水平模式下的宽度）未知，则使用最小尺寸。</li><li><code>keyField</code>: 默认是是<code>id</code>，列表循环的key值，一般这个也是必传的</li><li><code>buffer</code>: 默认是<code>200</code>，到滚动可见区域的边缘以开始渲染更远的项目的像素量。默认是上下200px处的都会进行缓存渲染</li><li><code>emitUpdate</code>: 默认是<code>false</code>，表示是否要开启更新模式，官方描述：触发一个 <code>&#39;update&#39;</code> 时间，一般会配合钩子函数<code>update</code>一起使用</li></ul><h2 id="相关Events，钩子函数"><a href="#相关Events，钩子函数" class="headerlink" title="相关Events，钩子函数"></a>相关Events，钩子函数</h2><ul><li><code>update (startIndex, endIndex, visibleStartIndex, visibleEndIndex)</code>: 每次滚动的时候，当可使区域发生变化，触发该钩子函数的方法，仅当props——<code>emitUpdate</code> 为true的时候生效</li><li><code>scroll-start</code>: 当第一个item渲染完的时候触发</li><li><code>scroll-end</code>: 当最后的一个item渲染完的时候触发</li></ul><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><ul><li><code>item</code>: 可视区域的item</li><li><code>index</code>: item的下标</li><li><code>active</code>: 可视活动状态下的item</li></ul><h2 id="虚拟列表的原理"><a href="#虚拟列表的原理" class="headerlink" title="虚拟列表的原理"></a>虚拟列表的原理</h2><ul><li>这里参考了掘金大佬的图，可以很好的解释了虚拟列表的原理</li></ul><p><img src="https://pic.imgdb.cn/item/642a8e9aa682492fcc371e6d.jpg" alt=""></p><ul><li>简单来说就是在滚动的时候，让上面和下面的item通过transform向上平移，这样做就可以只渲染少量的dom，减少不必要真实dom的渲染。</li><li>监听滚动</li><li>需要知道item的高度，每次滚动对每个item进行transform计算</li><li>根据滚动的距离和item的高度，计算出<code>startIndex</code></li><li>再根据<code>startIndex</code>和可视区高度计算出<code>endIndex</code></li><li>滚动时候，计算出可视区列表的偏移距离 <code>startOffset</code>，再重新计算<code>startIndex</code>和<code>endIndex</code></li></ul><h2 id="手写虚拟列表"><a href="#手写虚拟列表" class="headerlink" title="手写虚拟列表"></a>手写虚拟列表</h2><p>…待更</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue虚拟列表&quot;&gt;&lt;a href=&quot;#Vue虚拟列表&quot; class=&quot;headerlink&quot; title=&quot;Vue虚拟列表&quot;&gt;&lt;/a&gt;Vue虚拟列表&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组对象常用操作</title>
    <link href="https://aliveseven.github.io/posts/10fb917/"/>
    <id>https://aliveseven.github.io/posts/10fb917/</id>
    <published>2023-02-26T07:48:18.923Z</published>
    <updated>2023-02-26T07:54:32.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript数组对象常用操作"><a href="#JavaScript数组对象常用操作" class="headerlink" title="JavaScript数组对象常用操作"></a>JavaScript数组对象常用操作</h1><h2 id="获取数组对象中，对象中的某个值（key）为指定值"><a href="#获取数组对象中，对象中的某个值（key）为指定值" class="headerlink" title="获取数组对象中，对象中的某个值（key）为指定值"></a>获取数组对象中，对象中的某个值（key）为指定值</h2><p>比如现在有个数组对象a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我想获取，age为100的对象</p><p><strong>通过filter方法来实现，可以获取满足条件的数组对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span> == <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63fafe40f144a01007d70379.jpg" alt=""></p><h2 id="获取数组对象中，某个key的数组"><a href="#获取数组对象中，某个key的数组" class="headerlink" title="获取数组对象中，某个key的数组"></a>获取数组对象中，某个key的数组</h2><p><strong>比如我要获取a的age的数组，可以通过map来实现</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = [</span><br><span class="line">    &#123; age: 22, name: &quot;AA&quot; &#125;,</span><br><span class="line">    &#123; age: 23, name: &quot;BB&quot; &#125;,</span><br><span class="line">    &#123; age: 24, name: &quot;CC&quot; &#125;,</span><br><span class="line">    &#123; age: 25, name: &quot;DD&quot; &#125;,</span><br><span class="line">    &#123; age: 100, name: &quot;EE&quot; &#125;,</span><br><span class="line">    &#123; age: 100, name: &#x27;FF&#x27; &#125;,</span><br><span class="line">    &#123; age: 200, name: &#x27;RR&#x27; &#125;</span><br><span class="line">]</span><br><span class="line">console.log(a.map(item =&gt; item.age))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63faff36f144a01007d92037.jpg" alt=""></p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>另外map方法也可以对特定item中的某个的值进行判断，返回一个数组，如下，满足条件的对象的<strong>所处下标</strong>，在数组中是true</p><p><img src="https://pic.imgdb.cn/item/63faff97f144a01007d9a6fb.jpg" alt=""></p><h2 id="获取数组对象中某个属性的最大值或最小值"><a href="#获取数组对象中某个属性的最大值或最小值" class="headerlink" title="获取数组对象中某个属性的最大值或最小值"></a>获取数组对象中某个属性的最大值或最小值</h2><p>比如我想获取a中age最大的那个item</p><ul><li>首先用map吧age的数组输出到数组b</li><li>然后用Math方法找到最大的age，用c保存起来</li><li>然后找到该最大的age——c在数组b中的位置</li><li>然后把这个index记下来</li><li>然后输出原数组中该index位置下的对象即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxObject</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = nums.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span>);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, b);</span><br><span class="line">    index = b.<span class="title function_">indexOf</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMinObject</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = nums.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span>);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, b);</span><br><span class="line">    index = b.<span class="title function_">indexOf</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMaxObject</span>(a));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMinObject</span>(a));</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63fb0e4bf144a01007f0efbd.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript数组对象常用操作&quot;&gt;&lt;a href=&quot;#JavaScript数组对象常用操作&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数组对象常用操作&quot;&gt;&lt;/a&gt;JavaScript数组对象常用操作&lt;/h1&gt;&lt;h2 id=&quot;获</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue内置组件transition的灵活运用</title>
    <link href="https://aliveseven.github.io/posts/56251ecc/"/>
    <id>https://aliveseven.github.io/posts/56251ecc/</id>
    <published>2023-02-21T16:54:46.408Z</published>
    <updated>2023-02-21T16:59:27.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue内置组件transition的灵活运用"><a href="#Vue内置组件transition的灵活运用" class="headerlink" title="Vue内置组件transition的灵活运用"></a>Vue内置组件transition的灵活运用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做语音APP的H5开发的时候，遇到很多动效还原的场景，而且对用户体验感有较强的要求。某些场景经常会有用到transition这个属性。</p><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><ul><li><p><strong>Props</strong>：</p><ul><li><code>name</code> - string，用于自动生成 CSS 过渡类名。例如：<code>name: &#39;fade&#39;</code> 将自动拓展为 <code>.fade-enter</code>，<code>.fade-enter-active</code> 等。默认类名为 <code>&quot;v&quot;</code></li><li><code>appear</code> - boolean，是否在初始渲染时使用过渡。默认为 <code>false</code>。</li><li><code>css</code> - boolean，是否使用 CSS 过渡类。默认为 <code>true</code>。如果设置为 <code>false</code>，将只通过组件事件触发注册的 JavaScript 钩子。</li><li><code>type</code> - string，指定过渡事件类型，侦听过渡何时结束。有效值为 <code>&quot;transition&quot;</code> 和 <code>&quot;animation&quot;</code>。默认 Vue.js 将自动检测出持续时间长的为过渡事件类型。</li><li><code>mode</code> - string，控制离开/进入过渡的时间序列。有效的模式有 <code>&quot;out-in&quot;</code> 和 <code>&quot;in-out&quot;</code>；默认同时进行。</li><li><code>duration</code> - number | { <code>enter</code>: number, <code>leave</code>: number } 指定过渡的持续时间。默认情况下，Vue 会等待过渡所在根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。</li><li><code>enter-class</code> - string</li><li><code>leave-class</code> - string</li><li><code>appear-class</code> - string</li><li><code>enter-to-class</code> - string</li><li><code>leave-to-class</code> - string</li><li><code>appear-to-class</code> - string</li><li><code>enter-active-class</code> - string</li><li><code>leave-active-class</code> - string</li><li><code>appear-active-class</code> - string</li></ul></li><li><p><strong>事件</strong>：</p><ul><li><code>before-enter</code></li><li><code>before-leave</code></li><li><code>before-appear</code></li><li><code>enter</code></li><li><code>leave</code></li><li><code>appear</code></li><li><code>after-enter</code></li><li><code>after-leave</code></li><li><code>after-appear</code></li><li><code>enter-cancelled</code></li><li><code>leave-cancelled</code> (<code>v-show</code> only)</li><li><code>appear-cancelled</code></li></ul></li></ul><h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><ul><li>可以通过css来自定义transition达到的效果</li><li>如果想在transition的过渡效果完成之后，触发某个函数，可以用<code>after-leave</code>来实现，在进入过渡之后完成后触发的话就用<code>after-enter</code>。</li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li><code>in-out</code>：新元素先进行过渡，完成之后 当前元素过渡离开。</li><li><code>out-in</code>：当前元素先进行过渡，完成之后 新元素过渡进入。</li></ul><ul><li>示例:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件钩子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件EnterComplete在过渡进入完成之后触发,LeaveComplete在过渡离开完成之后触发 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">after-enter</span>=<span class="string">&quot;EnterComplete&quot;</span> @<span class="attr">after-leave</span>=<span class="string">&quot;LeaveComplete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">EnterComplete</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;过渡进入完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LeaveComplete</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;过渡离开完成&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue内置组件transition的灵活运用&quot;&gt;&lt;a href=&quot;#Vue内置组件transition的灵活运用&quot; class=&quot;headerlink&quot; title=&quot;Vue内置组件transition的灵活运用&quot;&gt;&lt;/a&gt;Vue内置组件transition的灵活</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Element Table里的input设置只能输入英文和数字</title>
    <link href="https://aliveseven.github.io/posts/7fd0755f/"/>
    <id>https://aliveseven.github.io/posts/7fd0755f/</id>
    <published>2023-02-16T15:33:05.967Z</published>
    <updated>2023-02-16T15:37:45.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Element-Table里的input设置只能输入英文和数字"><a href="#Element-Table里的input设置只能输入英文和数字" class="headerlink" title="Element Table里的input设置只能输入英文和数字"></a>Element Table里的input设置只能输入英文和数字</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做开发的时候经常会有这样的需求，让输入框中只能输入某种类型的东西</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只能允许输入英文和数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;value=value.replace(/[^\w_]/g,&#x27;&#x27;)&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>主要是在input里面，通过onkeyput或oninput加入字段，对输入的内容进行校验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">输入大小写字母、数字、下划线：</span><br><span class="line">oninput=&quot;value=value.replace(/[^\w_]/g,&#x27;&#x27;);&quot;</span><br><span class="line"> </span><br><span class="line">输入小写字母、数字、下划线：</span><br><span class="line">oninput=&quot;value=value.replace(/[^a-z0-9_]/g,&#x27;&#x27;);&quot;</span><br><span class="line"> </span><br><span class="line">输入数字和点</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d.]/g,&#x27;&#x27;)&quot;</span><br><span class="line"></span><br><span class="line">输入中文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^\u4e00-\u9fa5]/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入数字:   </span><br><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入英文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^a-zA-Z]/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入中文、数字、英文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^\w\u4E00-\u9FA5]/g, &#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入数字和字母：</span><br><span class="line">oninput=&quot;value=value.replace(/[\W]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">除了英文的标点符号以外，其他的都可以中文，英文字母，数字，中文标点</span><br><span class="line">oninput=&quot;value=value.replace(/^[^!@#$%^&amp;*()-=+]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入数字代码(小数点也不能输入)</span><br><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot; </span><br><span class="line"> </span><br><span class="line">数字和小数点</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d.]/g, &#x27;&#x27;).replace(/\.&#123;2,&#125;/g, &#x27;.&#x27;).replace(&#x27;.&#x27;, &#x27;$#$&#x27;).replace(/\./g, &#x27;&#x27;).replace(&#x27;$#$&#x27;, &#x27;.&#x27;).replace(/^\./g, &#x27;&#x27;).replace(/^(\-)*(\d+)\.(\d\d).*$/, &#x27;$1$2.$3&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入字母和汉字</span><br><span class="line">oninput=&quot;value=value.replace(/[\d]/g,&#x27;&#x27;) </span><br><span class="line"> </span><br><span class="line">只能输入英文字母和数字,不能输入中文</span><br><span class="line">oninput=&quot;value=value.replace(/[^\w\.\/]/ig,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入数字和英文</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d|chun]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Element-Table里的input设置只能输入英文和数字&quot;&gt;&lt;a href=&quot;#Element-Table里的input设置只能输入英文和数字&quot; class=&quot;headerlink&quot; title=&quot;Element Table里的input设置只能输入英文和数</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>v-model实现原理</title>
    <link href="https://aliveseven.github.io/posts/f3f5decd/"/>
    <id>https://aliveseven.github.io/posts/f3f5decd/</id>
    <published>2023-02-09T13:49:13.269Z</published>
    <updated>2023-02-09T13:50:33.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v-model实现原理"><a href="#v-model实现原理" class="headerlink" title="v-model实现原理"></a>v-model实现原理</h1><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><ul><li><code>v-model</code> 本质上是<code>v-bind</code>的语法糖</li><li><code>v-model</code>一般只作用于表单，或是扩展于其它组件中，一般用于输入框<code>input</code>、<code>textarea</code>、<code>select</code>，它可以监听输入的数据，当数据发生改变之后触发相关事件</li><li>主要是通过<code>v-bind</code>绑定响应式数据</li><li>然后通过<code>v-on</code>触发监听事件</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>等于</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">自html5开始,input每次输入都会触发oninput事件，</span></span><br><span class="line"><span class="comment">所以输入时input的内容会绑定到searchText中，于是searchText的值就被改变;</span></span><br><span class="line"><span class="comment">$event 指代当前触发的事件对象;</span></span><br><span class="line"><span class="comment">$event.target 指代当前触发的事件对象的dom;</span></span><br><span class="line"><span class="comment">$event.target.value 就是当前dom的value值;</span></span><br><span class="line"><span class="comment">在@input方法中，value =&gt; searchText;</span></span><br><span class="line"><span class="comment">在:value中,searchText =&gt; value;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;v-model实现原理&quot;&gt;&lt;a href=&quot;#v-model实现原理&quot; class=&quot;headerlink&quot; title=&quot;v-model实现原理&quot;&gt;&lt;/a&gt;v-model实现原理&lt;/h1&gt;&lt;h2 id=&quot;原理解释&quot;&gt;&lt;a href=&quot;#原理解释&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现特定时间触发函数</title>
    <link href="https://aliveseven.github.io/posts/862f3e23/"/>
    <id>https://aliveseven.github.io/posts/862f3e23/</id>
    <published>2023-02-05T14:56:23.223Z</published>
    <updated>2023-02-05T15:08:37.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript实现特定时间触发函数"><a href="#JavaScript实现特定时间触发函数" class="headerlink" title="JavaScript实现特定时间触发函数"></a>JavaScript实现特定时间触发函数</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>做开发的时候，有些业务需要多次重复触发一个函数，并以时间为判断标准，或是单次触发函数，在特定的时间点的时候。</li><li>多次触发就用setInverval来实现</li><li>单次触发可以通过setTimeout，或者直接调用</li></ul><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一秒内多次触发</span></span><br><span class="line">  <span class="keyword">const</span> timeMask = <span class="title function_">setInverval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="string">&quot;2023-02-05 23:59:59&quot;</span>;  <span class="comment">// 要触发函数的特定时间</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br><span class="line">    <span class="keyword">let</span> now = data.<span class="title function_">valueOf</span>();  <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(value).<span class="title function_">valueOf</span>(); <span class="comment">// 特定时间转化</span></span><br><span class="line">    <span class="comment">// console.log(&quot;now:&quot; , now)</span></span><br><span class="line">    <span class="comment">// console.log(&quot;value&quot; , time)</span></span><br><span class="line">    <span class="comment">// 如果当前时间大于特定时间</span></span><br><span class="line">    <span class="keyword">if</span>(now &gt; time)&#123;</span><br><span class="line">      <span class="comment">// 取消多次触发循环的定时操作</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(timeMask)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;超过了特定时间了，触发相关方法&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;还没超过特定时间&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 触发</span></span><br><span class="line">  timeMask</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>单次触发可以把<code>setInverval</code>改为<code>setTimeout</code>，并且把<code>clearInterval(timeMask)</code>注释掉</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript实现特定时间触发函数&quot;&gt;&lt;a href=&quot;#JavaScript实现特定时间触发函数&quot; class=&quot;headerlink&quot; title=&quot;JavaScript实现特定时间触发函数&quot;&gt;&lt;/a&gt;JavaScript实现特定时间触发函数&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端Vue常用的性能优化</title>
    <link href="https://aliveseven.github.io/posts/20578f0d/"/>
    <id>https://aliveseven.github.io/posts/20578f0d/</id>
    <published>2023-02-01T15:17:33.469Z</published>
    <updated>2023-02-01T15:22:53.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端Vue常用的性能优化"><a href="#前端Vue常用的性能优化" class="headerlink" title="前端Vue常用的性能优化"></a>前端Vue常用的性能优化</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>尽量减少http请求，减少页面的重排重绘</li><li>开启gzip压缩，压缩css和js文件</li><li>加入CDN静态资源加速</li><li>加入节流防抖</li><li>加入图片、路由懒加载，预加载</li><li>灵活使用缓存，减少请求负担</li><li>减少页面的dom操作，尽量用v-show代替v-if</li><li>组件拆分</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端Vue常用的性能优化&quot;&gt;&lt;a href=&quot;#前端Vue常用的性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端Vue常用的性能优化&quot;&gt;&lt;/a&gt;前端Vue常用的性能优化&lt;/h1&gt;&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Springboot中通过模糊搜索Redis中的key进行批量删除数据</title>
    <link href="https://aliveseven.github.io/posts/3b8f5bd1/"/>
    <id>https://aliveseven.github.io/posts/3b8f5bd1/</id>
    <published>2023-01-30T14:52:15.114Z</published>
    <updated>2023-01-31T17:32:15.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot中通过模糊搜索Redis中的key进行批量删除数据"><a href="#Springboot中通过模糊搜索Redis中的key进行批量删除数据" class="headerlink" title="Springboot中通过模糊搜索Redis中的key进行批量删除数据"></a>Springboot中通过模糊搜索Redis中的key进行批量删除数据</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发后台的时候，通过Redis对分页查询的数据进行了缓存，但是数据在做新增、删除、更新的时候，为了保持Redis中缓存的数据与数据库中的数据保持一致性，<strong>需要对缓存也进行更新处理</strong>。</p><p>这里我用的更新方法也是非常简单暴力，就在查询的时候，会对Redis进行一次查询，根据分页的页码和相对应的表。<strong>如果查到的缓存为空，那么就会去数据库查询，然后再设置缓存。</strong></p><p>而在增删改的接口上，我是<strong>直接将缓存删除</strong>，等到调用分页查询数据的接口的时候再去重新设置一次缓存，以此保持数据的一致性。</p><p>具体可以看看下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用/page接口，参数有PageNum、pageSize，还有其他非必须参数进行模糊查询</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum ,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;pageSize&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;username&quot;, required = false)</span> String username,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;email&quot;, required = false)</span> String email,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;phone&quot;, required = false)</span> String phone)</span>&#123;</span><br><span class="line">        IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum , pageSize);</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(username),<span class="string">&quot;username&quot;</span> , username);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(email),<span class="string">&quot;email&quot;</span> , email);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(phone),<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span> &amp;&amp; email == <span class="string">&quot;&quot;</span> &amp;&amp; phone == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="comment">// 查询缓存</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> Constants.USER_PAGE_KEY + <span class="string">&quot;_&quot;</span> + String.valueOf(pageNum);</span><br><span class="line">                <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> iRedisService.getString(userKey);</span><br><span class="line">                <span class="comment">// 如果缓存存在，不为空，拿出来</span></span><br><span class="line">                <span class="keyword">if</span>(!StrUtil.isBlank(res))&#123;</span><br><span class="line">                        <span class="comment">// 把String类型转成JSON类型再返回</span></span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSONUtil.parseObj(res);</span><br><span class="line">                        <span class="type">Integer</span> <span class="variable">nowSize</span> <span class="operator">=</span> (Integer) data.get(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(nowSize != pageSize)&#123;</span><br><span class="line">                                <span class="comment">// 页码发生变化的时候，清除缓存重新设置</span></span><br><span class="line">                                iRedisService.flushRedis(userKey);</span><br><span class="line">                                <span class="comment">// 重新查询数据库</span></span><br><span class="line">                                IPage&lt;User&gt; userIPage = userService.page(page, queryWrapper);</span><br><span class="line">                                <span class="comment">// 设置缓存</span></span><br><span class="line">                                iRedisService.setString(userKey , JSONUtil.toJsonStr(userIPage));</span><br><span class="line">                                <span class="keyword">return</span> Result.success(userIPage);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果缓存不存在，查询数据库</span></span><br><span class="line">                        IPage&lt;User&gt; userIPage = userService.page(page, queryWrapper);</span><br><span class="line">                        <span class="comment">// 设置缓存</span></span><br><span class="line">                        iRedisService.setString(userKey , JSONUtil.toJsonStr(userIPage));</span><br><span class="line">                        <span class="keyword">return</span> Result.success(userIPage);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.page(page, queryWrapper));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol><li>加入Redis序列化配置类，再Config里面设置相对于的序列化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis序列化配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AliveSeven 2023/01/30 18:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * springboot 默认帮我们创建的RedisTemplate的key和value的序列化方式是jdk默认的方式,</span></span><br><span class="line"><span class="comment">     * 我们有时候手动向redis中添加的数据可能无法被查询解析出来,所以我们需要修改序列化方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer); <span class="comment">//设置key的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);<span class="comment">//设置hash类型的数据的key的序列化方式</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<span class="comment">//非final类型的数据才会被序列化</span></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<span class="comment">//设置value的序列化方式为json</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Redis的工具类里面加入下面的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据模糊查询的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getKeysByPre</span><span class="params">(String prefix)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stringRedisTemplate.keys(prefix + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据模糊查询的key进行批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByPre</span><span class="params">(String prefix)</span>&#123;</span><br><span class="line">    Set&lt;String&gt; keys = stringRedisTemplate.keys(prefix + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    stringRedisTemplate.delete(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>然后传入要模糊搜索的key关键字，查询到的keys会放在一个列表里面，调用delete方法会删除对应的数据</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot中通过模糊搜索Redis中的key进行批量删除数据&quot;&gt;&lt;a href=&quot;#Springboot中通过模糊搜索Redis中的key进行批量删除数据&quot; class=&quot;headerlink&quot; title=&quot;Springboot中通过模糊搜索Redis</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>解决原生安卓出现 WiFi 网络连接受限问题</title>
    <link href="https://aliveseven.github.io/posts/702abf9d/"/>
    <id>https://aliveseven.github.io/posts/702abf9d/</id>
    <published>2023-01-20T16:44:14.407Z</published>
    <updated>2023-01-21T07:25:06.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决原生安卓出现-WiFi-网络连接受限问题"><a href="#解决原生安卓出现-WiFi-网络连接受限问题" class="headerlink" title="解决原生安卓出现 WiFi 网络连接受限问题"></a>解决原生安卓出现 WiFi 网络连接受限问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主在香港之前买了一部POCO X3 PRO，本来想着想试试小米的国外产品，整体来说在境外的体验还不错，但是回到大陆的时候，连接国内的WIFI出了个问题，网络连接受限，而且网速被限制了，这样就让我很难受，而且手机是小米的，也不好Root，为了解决这个问题，我也是费尽心思，去下载了一个叫ADB的工具包，然后对其进行修复。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>这里主要讲述一下手机没有ROOT的情况下的解决方案，有ROOT的暂时不做讨论</strong></p><p>先到网上下载ADB工具包，然后解压到C盘或者随便某个盘的位置。</p><p><strong>这里我直接放链接吧！</strong></p><p>链接: <a href="https://pan.baidu.com/s/1mfrgDH5q_tedQnfGYbV91A">https://pan.baidu.com/s/1mfrgDH5q_tedQnfGYbV91A</a> 提取码: tha6 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>然后解压之后，需要打开电脑环境配置一些adb命令，比如我这里放在C盘的adb文件夹下面</p><p><img src="https://pic.imgdb.cn/item/63cac220be43e0d30e636603.jpg" alt=""></p><p>那么我就要把这个adb.exe的所在路径<strong>C:\adb</strong>，配到系统环境变量里面去，类似于配JAVA的JDK，Vue的Node环境一样差不多而已。</p><p><img src="https://pic.imgdb.cn/item/63cac2cfbe43e0d30e646d64.jpg" alt=""></p><p>配置好之后，手机打开开发者模式，具体操作就是点击我的手机→全部参数→多次点击<strong>MIUI版本</strong>的那个框框，然后就进入开发者模式了，然后手机开启USB调试模式，<strong>打开USB调试（安全设置）</strong>，这个部分很重要，如果没有打开USB调试安全设置，会报JAVA错，然后打开接着运行 CMD 输入下面的命令即可。</p><p><strong>删除默认的地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_https_url</span><br><span class="line">adb shell settings delete global captive_portal_http_url</span><br></pre></td></tr></table></figure><p><strong>修改新的地址</strong></p><p>由于我的手机是MIUI系统，所以用了MIUI的服务器地址，其他同学可以去找自己手机型号的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception occurred while executing &#x27;delete&#x27;:</span><br><span class="line"></span><br><span class="line">java.lang.SecurityException: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception occurred while executing &#x27;put&#x27;:</span><br><span class="line"></span><br><span class="line">java.lang.SecurityException: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63cac42fbe43e0d30e6684bf.jpg" alt=""></p><p>这两个问题都是没有打开<strong>USB调试（安全设置）</strong>导致的，打开之后重新输入即可。或者在开发者选项中开启 <strong>禁止权限监控</strong>（OPPO、Realme手机），再次执行就没问题。</p><p>完成效果</p><p><img src="https://pic.imgdb.cn/item/63cac4a5be43e0d30e672d80.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决原生安卓出现-WiFi-网络连接受限问题&quot;&gt;&lt;a href=&quot;#解决原生安卓出现-WiFi-网络连接受限问题&quot; class=&quot;headerlink&quot; title=&quot;解决原生安卓出现 WiFi 网络连接受限问题&quot;&gt;&lt;/a&gt;解决原生安卓出现 WiFi 网络连接受限</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vue3将页面中的div（Dom元素）转换成可下载的图片</title>
    <link href="https://aliveseven.github.io/posts/4af13564/"/>
    <id>https://aliveseven.github.io/posts/4af13564/</id>
    <published>2023-01-18T13:42:34.558Z</published>
    <updated>2023-01-18T13:53:56.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3将页面中的div（Dom元素）转换成可下载的图片"><a href="#Vue3将页面中的div（Dom元素）转换成可下载的图片" class="headerlink" title="Vue3将页面中的div（Dom元素）转换成可下载的图片"></a>Vue3将页面中的div（Dom元素）转换成可下载的图片</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行H5开发的时候，遇到过这样的一个业务，用户登录，然后获取到用户的<strong>服务器名称、角色名称、邀请码</strong>，将它们弄在页面的一个卡片图片上，弄上去后生成一张可以长按保存的图片。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>用到了一个叫html2canvas的插件，<strong>利用插件将dom元素转成图片</strong>。</p><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:show</span>=<span class="string">&quot;state.cardShow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;pop&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">closed</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">opened</span>=<span class="string">&quot;toImg&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>長按保存圖片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mycard&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mycard&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;htmlUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sever-name&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!hastoImg&quot;</span>&gt;</span>&#123;&#123; server &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;role-name&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!hastoImg&quot;</span>&gt;</span>&#123;&#123; roleName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;share-code&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!hastoImg&quot;</span>&gt;</span>&#123;&#123; code &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript实现方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">import userCounterStore from &#x27;@/stores/user&#x27;;</span><br><span class="line">import activityCounterStore from &#x27;@/stores/activity&#x27;;</span><br><span class="line">import html2canvas from &quot;html2canvas&quot;</span><br><span class="line">const &#123; serverId,  roleId,  roleInfo, serverName, roleName &#125; = toRefs(userCounterStore());</span><br><span class="line">const &#123; code &#125; = toRefs(activityCounterStore());</span><br><span class="line"></span><br><span class="line">// 关闭触发</span><br><span class="line">const close = () =&gt;&#123;</span><br><span class="line">    htmlUrl.value = &quot;./card2.png&quot;</span><br><span class="line">    hastoImg.value = false</span><br><span class="line">    state.setCardShow(false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// dom转图片方法</span><br><span class="line">const htmlUrl = ref(&quot;./card2.png&quot;)</span><br><span class="line">const hastoImg = ref(false)</span><br><span class="line">const toImg = () =&gt;&#123;</span><br><span class="line">    // 先获取你要转换为img的dom节点</span><br><span class="line">    let card = document.getElementById(&#x27;mycard&#x27;);//传入的id名称</span><br><span class="line">    let scale = 3; //放大倍数 这个相当于清晰度 调大一点更清晰一点</span><br><span class="line">    html2canvas(card, &#123;</span><br><span class="line">                backgroundColor: null,</span><br><span class="line">                useCORS: true, // 解决文件跨域问题</span><br><span class="line">                scale: scale,</span><br><span class="line">                dpi: window.devicePixelRatio * 4, //按屏幕像素比增加像素</span><br><span class="line">                scrollY: -10,</span><br><span class="line">    &#125;).then((canvas) =&gt; &#123;</span><br><span class="line">        let url = canvas.toDataURL(&#x27;image/png&#x27;);</span><br><span class="line">        htmlUrl.value = url;</span><br><span class="line">        console.log(&quot;htmlUrl&quot;,htmlUrl)</span><br><span class="line">        hastoImg.value = true</span><br><span class="line">    &#125;).catch((e) =&gt; &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3将页面中的div（Dom元素）转换成可下载的图片&quot;&gt;&lt;a href=&quot;#Vue3将页面中的div（Dom元素）转换成可下载的图片&quot; class=&quot;headerlink&quot; title=&quot;Vue3将页面中的div（Dom元素）转换成可下载的图片&quot;&gt;&lt;/a&gt;Vu</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot文件上传大小限制问题</title>
    <link href="https://aliveseven.github.io/posts/6c4f14c4/"/>
    <id>https://aliveseven.github.io/posts/6c4f14c4/</id>
    <published>2023-01-13T14:11:38.063Z</published>
    <updated>2023-01-13T14:31:20.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot文件上传大小限制问题"><a href="#SpringBoot文件上传大小限制问题" class="headerlink" title="SpringBoot文件上传大小限制问题"></a>SpringBoot文件上传大小限制问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用SpringBoot开发后台系统的时候，需要开发文件上传业务，但是上传大文件控制台会报错：<code>The field files exceeds its maximum permitted size</code>。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>一般SpringBoot的文件上传大小限制在1M以下，单个请求中最多可容纳10M大小的文件流数据，这个大小对于我们实际开发来说实在太小了。</p><p>解决办法也很简单，在配置文件application.properties里面加入相关配置即可</p><p><img src="https://pic.imgdb.cn/item/63c16624be43e0d30e83ac82.jpg" alt=""></p><h3 id="Spring-Boot-1-3-x或之前版本，配置如下："><a href="#Spring-Boot-1-3-x或之前版本，配置如下：" class="headerlink" title="Spring Boot 1.3.x或之前版本，配置如下："></a>Spring Boot 1.3.x或之前版本，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipart.maxFileSize=100Mb</span><br><span class="line">multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-1-4-x版本及以上，配置如下："><a href="#Spring-Boot-1-4-x版本及以上，配置如下：" class="headerlink" title="Spring Boot 1.4.x版本及以上，配置如下："></a>Spring Boot 1.4.x版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.http.multipart.maxFileSize=100Mb</span><br><span class="line">spring.http.multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-2-0版本及以上，配置如下："><a href="#Spring-Boot-2-0版本及以上，配置如下：" class="headerlink" title="Spring Boot 2.0版本及以上，配置如下："></a>Spring Boot 2.0版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-file-size = 100MB</span><br><span class="line">spring.servlet.multipart.max-request-size = 1000MB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;a href=&quot;#SpringBoot文件上传大小限制问题&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;/a&gt;SpringBoot文件上传大小限制问题&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue3父组件调用子组件的方法</title>
    <link href="https://aliveseven.github.io/posts/2d7c1534/"/>
    <id>https://aliveseven.github.io/posts/2d7c1534/</id>
    <published>2023-01-12T15:19:44.736Z</published>
    <updated>2023-01-12T15:30:30.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3父组件调用子组件的方法"><a href="#Vue3父组件调用子组件的方法" class="headerlink" title="Vue3父组件调用子组件的方法"></a>Vue3父组件调用子组件的方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在开发落地页项目的时候，有这样的一个业务：</p><ol><li>角色在登录之后，需要知道这个用户是否之前有绑定过角色，</li><li>因为一个账号有多个角色，但是能够领取奖励的只能有一个角色</li><li>所以需要知道这个用户是否有绑定过角色，如果有，那么直接跳过绑定角色这一步，如果没有，转到绑定角色的弹窗去。</li><li>但是现在就有个问题，我弹窗是自己做的一个用来装其他，比如登录框、绑定框、选择账号框的一个<strong>父组件</strong>，这里用到的<strong>绑定角色框</strong>是其中的一个<strong>子组件</strong>。</li><li>但是绑定角色里面的逻辑业务是需要在这个子组件里面调用的，不能放在像pinia、vuex里面这种公共区域调用，也不能放在别的组件中调用，所以现在有这样一个需求，<strong>vue3中父组件调用子组件的方法</strong></li></ol><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>在网上看到很多都是说用ref给子组件绑定一个值，然后在子组件中通过defineExpose将要调用的方法暴露出去。</p><p>但是弄了很多次，子组件ref绑定的值一直是undefined，不知道是不是我操作姿势不知道还是什么。</p><h2 id="vue3-eventbus"><a href="#vue3-eventbus" class="headerlink" title="vue3-eventbus"></a>vue3-eventbus</h2><p>这是一个很好用的插件，类似于vue2中的事件总线，特别好用，只需要在要被调用的子组件中用bus.on()，设置要监听的方法名和，触发的函数。</p><h3 id="在全局注册"><a href="#在全局注册" class="headerlink" title="在全局注册"></a>在全局注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;vue3-eventbus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(eventBus)</span><br></pre></td></tr></table></figure><h3 id="在子组件中"><a href="#在子组件中" class="headerlink" title="在子组件中"></a>在子组件中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;vue3-eventbus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bus.<span class="title function_">on</span>(<span class="string">&#x27;bindrole&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 绑定角色的方法</span></span><br><span class="line">    <span class="title class_">BindRole</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;绑定角色&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在父组件中"><a href="#在父组件中" class="headerlink" title="在父组件中"></a>在父组件中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindOnlyRole</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// event-bus yyds</span></span><br><span class="line">  <span class="comment">// 触发绑定角色事件</span></span><br><span class="line">  bus.<span class="title function_">emit</span>(<span class="string">&#x27;bindrole&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，这个也能用于子组件与子组件、子组件与父组件间等等的传值、方法调用，很好用。</p><p>使用方法基本都差不多，要调用方法的组件中，用bus.on()来监听要触发的方法，在其他组件中用bus.emit()来触发相关方法，用方法名来做依据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3父组件调用子组件的方法&quot;&gt;&lt;a href=&quot;#Vue3父组件调用子组件的方法&quot; class=&quot;headerlink&quot; title=&quot;Vue3父组件调用子组件的方法&quot;&gt;&lt;/a&gt;Vue3父组件调用子组件的方法&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
