<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2022-10-09T14:19:29.763Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Js中的call()、apply()、bind()的用法</title>
    <link href="https://aliveseven.github.io/posts/4f97ecc/"/>
    <id>https://aliveseven.github.io/posts/4f97ecc/</id>
    <published>2022-10-09T14:07:38.979Z</published>
    <updated>2022-10-09T14:19:29.763Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题"><a href="#npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题" class="headerlink" title="npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题"></a>npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题</h1><h3 id="npm设置"><a href="#npm设置" class="headerlink" title="npm设置"></a>npm设置</h3><ol><li>在nodejs文件夹下创建 <code>node_global</code> 和 <code>node_cache</code> 两个文件夹。</li><li>设置npm全局安装位置：<code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code></li><li>设置npm缓存位置：<code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code></li><li>设置环境变量<ul><li>用户变量Path， 添加 <code>D:\nodejs\node_global</code></li><li>新建系统变量 NODE_PATH， <code>D:\nodejs\node_global\node_modules</code></li></ul></li></ol><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6ze6gxlawj31hc0smhad.jpg" alt=""></p><h3 id="yarn的安装、设置和注意事项"><a href="#yarn的安装、设置和注意事项" class="headerlink" title="yarn的安装、设置和注意事项"></a>yarn的安装、设置和注意事项</h3><ol><li>安装：<code>npm i -g yarn</code></li><li>查看yarn global、yarn cache目录<ul><li>yarn global dir</li><li>yarn cache dir</li></ul></li><li>在nodejs文件夹下创建yarn文件夹，在yarn下创建 <code>global</code> 和 <code>cache</code> 文件夹。（在D盘找个位置存放就行）</li><li>设置全局安装位置和缓存位置到D盘<ul><li><code>yarn config set global-folder &quot;D:\nodejs\yarn\global</code></li><li><code>yarn config cache-folder &quot;D:\nodejs\yarn\cache</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题&quot;&gt;&lt;a href=&quot;#npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题&quot; class=&quot;headerlink&quot; title=&quot;npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题&quot;&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="NodeJs" scheme="https://aliveseven.github.io/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>Js中的call()、apply()、bind()的用法</title>
    <link href="https://aliveseven.github.io/posts/4f97ecc/"/>
    <id>https://aliveseven.github.io/posts/4f97ecc/</id>
    <published>2022-10-05T14:30:05.079Z</published>
    <updated>2022-10-05T14:42:38.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js中的call-、apply-、bind-的用法"><a href="#Js中的call-、apply-、bind-的用法" class="headerlink" title="Js中的call()、apply()、bind()的用法"></a>Js中的call()、apply()、bind()的用法</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><strong><code>call()</code>、<code>apply()</code>、<code>bind()</code> 都是用来重定义 <code>this</code> 这个对象</strong></p><p>这里简单说一下这三个东西的用法和区别，太过深层的东西就不深究了，先用熟练，会用，再深入了解原理。</p><p>简单来说这三个东西都是用来修改this指向的，<strong>为什么要改变this指向？</strong></p><p>案例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    sayName : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayName</span>()  <span class="comment">// 步君，this指向obj对象</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">sayName</span>,<span class="number">0</span>); <span class="comment">// AliveSeven，this指向window对象</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出来，正常调用obj的话，this的指向是没有问题的，但是放到setTimeout中做回调问题就出现了，因为setTimeout因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候this指向自然是window，这显然不符合我们的需求，因此便需要改变this的指向。</p></blockquote><p>案例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    secAge : <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">    <span class="title class_">Fn</span> : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的年龄&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">secAge</span>) <span class="comment">// 21</span></span><br><span class="line">obj.<span class="title class_">Fn</span>()  <span class="comment">// 步君的年龄undefined</span></span><br></pre></td></tr></table></figure><p>关于Js中的this指向问题，可以参考下面这篇文章</p><p><a href="https://aliveseven.github.io/posts/9170747e/">https://aliveseven.github.io/posts/9170747e/</a></p><p>在上面代码的基础上，加入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个data的变量</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;七海&#x27;</span>,</span><br><span class="line">    age : <span class="number">77</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data)  <span class="comment">// 七海的年龄77</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">apply</span>(data) <span class="comment">// 七海的年龄77</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data)() <span class="comment">// 七海的年龄77</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6urr84dq5j30ga0ep0x1.jpg" alt=""></p><p>以上除了<code>bind</code> 方法后面多了个 <code>()</code> 外 ，它们的返回结果都一样</p><p>由此得出结论，<code>bind</code> 返回的是一个新的函数，你必须调用它才会被执行</p><h2 id="传参情况"><a href="#传参情况" class="headerlink" title="传参情况"></a>传参情况</h2><p>案例3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    secAge : <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">    <span class="title class_">Fn</span> : <span class="keyword">function</span>(<span class="params">sex , city</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的年龄&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;是一个&quot;</span> + sex + <span class="string">&quot;来自&quot;</span> + city);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">secAge</span>) <span class="comment">// 21</span></span><br><span class="line">obj.<span class="title class_">Fn</span>()  <span class="comment">// 步君的年龄undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个data的变量</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;七海&#x27;</span>,</span><br><span class="line">    age : <span class="number">77</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用三个不同的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data , <span class="string">&quot;girl&quot;</span> , <span class="string">&quot;北京&quot;</span>)  <span class="comment">// 七海的年龄77是一个girl来自北京</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;北京&quot;</span>]) <span class="comment">// 七海的年龄77是一个girl,北京来自undefined</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">apply</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;深圳&quot;</span>]) <span class="comment">// 七海的年龄77是一个girl来自深圳</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data , <span class="string">&quot;girl&quot;</span> , <span class="string">&quot;上海&quot;</span>)() <span class="comment">// 七海的年龄77是一个girl来自上海</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;上海&quot;</span>])() <span class="comment">// 七海的年龄77是一个girl,上海来自undefined</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>call()和apply()，bind() 的第一个参数都是用来表示指定对象的</li><li>区别在于他们第二个参数的使用方式是不同的</li><li><strong>使用call()、bind()方法，第一个参数是指定this是谁，后面的参数是指定函数的实参，并且call方法的参数没有限制</strong></li><li><strong>而apply方法的参数并不是如此：第一个参数与call()用法相同，第二个参数是数组，数组中包含实参</strong></li><li>call()、apply()是立即执行的，bind不是立即执行的而bind返回的是函数，需要加()才执行</li><li><strong>call()和bind()传递的参数是相同的，而apply()第二个参数是数组</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js中的call-、apply-、bind-的用法&quot;&gt;&lt;a href=&quot;#Js中的call-、apply-、bind-的用法&quot; class=&quot;headerlink&quot; title=&quot;Js中的call()、apply()、bind()的用法&quot;&gt;&lt;/a&gt;Js中的call</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>小程序缓存操作(本地、同步、异步)</title>
    <link href="https://aliveseven.github.io/posts/e3e02fb9/"/>
    <id>https://aliveseven.github.io/posts/e3e02fb9/</id>
    <published>2022-09-29T02:20:27.291Z</published>
    <updated>2022-09-29T15:33:47.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序缓存操作-本地、同步、异步"><a href="#小程序缓存操作-本地、同步、异步" class="headerlink" title="小程序缓存操作(本地、同步、异步)"></a>小程序缓存操作(本地、同步、异步)</h1><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><ol><li>wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB</li><li>使用localStorage永久存储</li><li>使用uniapp进行开发的时候，可以将wx替换为uni来进行缓存的操作</li></ol><h2 id="异步缓存"><a href="#异步缓存" class="headerlink" title="异步缓存"></a>异步缓存</h2><p>wx.setStorage(object)</p><p>uni.setStorage(object)</p><ul><li>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="string">&quot;key&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorage(object)</p><p>uni.getStorage(object)</p><ul><li>从本地缓存中异步获取指定 key 对应的内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorageInfo(object)</p><p>uni.getStorageInfo(object)</p><ul><li>异步获取当前storage的相关信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorageInfo</span>(&#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">keys</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">currentSize</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">limitSize</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.removeStorage(object)</p><p>uni.removeStorage(object)</p><ul><li>从本地缓存中异步移除指定 key 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">removeStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="同步缓存"><a href="#同步缓存" class="headerlink" title="同步缓存"></a>同步缓存</h2><p>wx.setStorageSync(key,value)</p><p>uni.setStorageSync(key,value)</p><ul><li>将 value 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个<strong>同步</strong>接口。</li></ul><p>wx.getStorageSync(key)</p><p>uni.getStorageSync(key)</p><ul><li>从本地缓存中<strong>同步获取</strong>指定 key 对应的内容。</li></ul><p>wx.getStorageInfoSync</p><p>uni.getStorageInfoSync</p><ul><li><strong>同步获取</strong>当前storage的相关信息</li></ul><p>wx.removeStorageSync(key)</p><p>uni.removeStorageSync(key)</p><ul><li>从本地缓存中<strong>同步移除</strong>指定 key 。</li></ul><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>wx.clearStorage()</p><p>uni.clearStorage()</p><ul><li>清理本地数据缓存。</li></ul><p>wx.clearStorageSync()</p><p>uni.clearStorageSync()</p><ul><li>同步清理本地数据缓存</li></ul><h2 id="同步缓存和异步缓存的区别"><a href="#同步缓存和异步缓存的区别" class="headerlink" title="同步缓存和异步缓存的区别"></a>同步缓存和异步缓存的区别</h2><p>以Sync（同步，同时）结尾的都是都是同步缓存，二者的区别是，异步不会阻塞当前任务，同步缓存直到同步方法处理完才能继续往下执行。</p><h3 id="历史搜索"><a href="#历史搜索" class="headerlink" title="历史搜索"></a>历史搜索</h3><ul><li>案例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-icon&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要搜索的内容&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;searchNameInput&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">bindtap</span>=<span class="string">&quot;setSearchStorage&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>历史搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:right;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>删除搜索历史<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;search-list&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;searchData&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item == null?&#x27;暂无数据&#x27;:item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面</p><p>这里有三个绑定事件</p><ul><li>bindinput=”searchNameInput” 获取用户输入的数据</li><li>bindtap=”setSearchStorage” 设置本地存储</li><li>bindtap=”deleteHistory” 删除历史搜索</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户输入框的值</span></span><br><span class="line">    <span class="attr">searchNameInput</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">inputValue</span>:e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>e.detail.value就代表了当前输入值</p><p>当点击搜索的时候，bindtap=”setSearchStorage”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用户输入的内容存入本地缓存,并且将搜索数据放到首页</span></span><br><span class="line"><span class="attr">setSearchStorage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//调用API向本地缓存存入数据</span></span><br><span class="line">        <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || [] </span><br><span class="line">        searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)  </span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读取用户搜索商品</span></span><br><span class="line">        <span class="keyword">var</span> name = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span></span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;www.shop.com/home/product/search&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;<span class="attr">name</span>:name&#125;,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">                that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">goodsList</span>: res.<span class="property">data</span>.<span class="property">info</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程这么走：</p><ol><li><p>用户输入数据，点击搜索</p></li><li><p>如果数据不为空，加入（设置）本地缓存</p></li><li><p>去服务器搜索用户想要的数据，赋值给这个页面的变量</p></li><li><p>点击删除，去除本地这个key的value</p></li></ol><ul><li>这里的缓存形式的 key =&gt; value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || []</span><br></pre></td></tr></table></figure><p>获取本地名字为’searchData’的缓存，如果’searchData’这个缓存不存在就相当于重新什么一个空数组，赋值给searchData这个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)</span><br></pre></td></tr></table></figure><p>将用户输入的值PUSH进searchData这个变量里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br></pre></td></tr></table></figure><p>调用API接口，重新设置key = ‘searchData’的这个缓存的value等于searchData，下面的wx.request是请求数据的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从本地获取历史搜索数据</span></span><br><span class="line">          <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>)||[]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">searchData</span>:searchData</span><br><span class="line">            &#125;)</span><br><span class="line"> </span><br><span class="line"> deleteHistory</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除历史搜索数据</span></span><br><span class="line">    <span class="attr">deleteHistory</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">        wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;是否删除历史搜索&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, []);</span><br><span class="line">                wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;/pages/index/index&#x27;</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小程序缓存操作-本地、同步、异步&quot;&gt;&lt;a href=&quot;#小程序缓存操作-本地、同步、异步&quot; class=&quot;headerlink&quot; title=&quot;小程序缓存操作(本地、同步、异步)&quot;&gt;&lt;/a&gt;小程序缓存操作(本地、同步、异步)&lt;/h1&gt;&lt;h2 id=&quot;本地缓存&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    <category term="uniapp" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/uniapp/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="uniapp" scheme="https://aliveseven.github.io/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>Js实现Cookie的操作</title>
    <link href="https://aliveseven.github.io/posts/a19e24db/"/>
    <id>https://aliveseven.github.io/posts/a19e24db/</id>
    <published>2022-09-26T15:11:05.432Z</published>
    <updated>2022-09-28T12:34:47.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js实现Cookie的操作"><a href="#Js实现Cookie的操作" class="headerlink" title="Js实现Cookie的操作"></a>Js实现Cookie的操作</h1><h2 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h2><blockquote><p>cookie其实就是一些数据信息，类型为“小型文本文件”，存储于电脑上的文本文件中。</p></blockquote><p><img src="https://m1.im5i.com/2022/09/27/UFpDbW.png" alt=""></p><h2 id="Cookie有什么用"><a href="#Cookie有什么用" class="headerlink" title="Cookie有什么用"></a>Cookie有什么用</h2><ol><li>在编程领域，Cookie 代表一种小型的文本文件，可以让开发人员在用户计算机上存储少量的数据（大约 4kb）</li><li>记录用户的某些信息，例如用户身份、喜好等，当用户下次访问网站时，网站可以通过检索这些信息来为用户展示个性化页面。</li><li>当我们打开一个网站时，如果这个网站我们曾经登录过，那么当我们再次打开网站时，就不需要再次登录了。例如bilibili，csdn等网站。</li></ol><h2 id="Js创建Cookie"><a href="#Js创建Cookie" class="headerlink" title="Js创建Cookie"></a>Js创建Cookie</h2><p>在 JavaScript 中，您可以通过<code>document.cookie</code>属性来创建、读取、修改和删除 Cookie 信息。</p><p>创建（设置）新的 Cookie 信息，需要以<code>name=value</code>形式的字符串来定义新的 Cookie 信息，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username = AliveSeven&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;age = 21&quot;</span>;</span><br></pre></td></tr></table></figure><p>假设在A页面中要保存变量username的值(“jack”)到cookie中,key值为name，则相应的JS代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="string">&quot;name=&quot;</span>+username;</span><br></pre></td></tr></table></figure><p>注意:</p><blockquote><p>在 cookie 的名称或值中不能使用分号、逗号或空格。如果想存入这些符号，需要使用 escape() 函数进行编码。</p></blockquote><p>例如：</p><p>document.cookie=”str=”+escape(“username=AliveSeven”)，该代码等效于：</p><p>document.cookie=”str=username%3DAliveSeven”，即等号被编码为%3D。</p><p>当使用 escape() 编码后，在取出值以后需要使用 unescape() 进行解码才能得到原来的 cookie 值。</p><p>或者使用encodeURIComponent()函数也可以存储带分号、逗号和空格的数据，同样也要使用对应的decodeURIComponent() 函数来解析 Cookie 数据。如果要编码整个URL，那就用encodeURI方法。</p><h3 id="Cookie的时效性"><a href="#Cookie的时效性" class="headerlink" title="Cookie的时效性"></a>Cookie的时效性</h3><p>Cookie 并不会一直存在，默认情况下，Cookie 的生命周期就是浏览器的会话周期，即用户关闭浏览器后，Cookie 就会失效。</p><p>如果想要延长 Cookie 的生命周期，您可以使用 max-age 属性来指定 Cookie 可以存在的时间（单位为秒），默认为 -1，即关闭浏览器后失效。</p><p>如果将 max-age 设置为一个负数，则表示该 Cookie 为临时 Cookie，关闭浏览器后就会失效。如果设置为 0，则表示删除该 Cookie。若要将 Cookie 的生命周期设置为 30 天的话，则可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>此外，您也可以使用 expires 属性来指定 Cookie 失效的具体日期（GMT/UTC 格式），如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">today.<span class="title function_">setDate</span>(today.<span class="title function_">getDate</span>()+<span class="number">10</span>); <span class="comment">//访问页面后的10天过期</span></span><br><span class="line"><span class="comment">//设置cookie的有效时间，时间为字符串格式</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;username = AliveSeven ; expires=&#x27;</span>+ today.<span class="title function_">toGMTString</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; expires=Sun, 28 Oct 2022 12:00:00 UTC;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Js获取Cookie"><a href="#Js获取Cookie" class="headerlink" title="Js获取Cookie"></a>Js获取Cookie</h2><p>读取（获取） Cookie 同样使用<code>document.cookie</code>即可，该属性会返回一个字符串，字符串中包含除 max-age、expires、path 和 domain 等属性之外的所有 Cookie 信息。</p><p>为了获取单个 Cookie 的值，我们可以通过 split() 函数将包含 Cookie 信息的字符串拆分为数组，然后再获取某个 Cookie 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username = AliveSeven ; age = 21 ; max-age = &quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;age = 21&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line">      <span class="comment">// 拆分 cookie 字符串</span></span><br><span class="line">      <span class="keyword">var</span> array = str.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; array.<span class="property">length</span> ; i++)&#123;</span><br><span class="line"><span class="comment">// console.log(array[i]);</span></span><br><span class="line"><span class="keyword">var</span> array2 = array[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">              <span class="keyword">var</span> getCookie = array2[<span class="number">0</span>]+<span class="string">&quot;:&quot;</span>+<span class="built_in">decodeURIComponent</span>(array2[<span class="number">1</span>]) <span class="comment">//解码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getCookie.<span class="title function_">trim</span>()); <span class="comment">// 去除开头的空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Js修改或更新Cookie"><a href="#Js修改或更新Cookie" class="headerlink" title="Js修改或更新Cookie"></a>Js修改或更新Cookie</h2><p>如果要改变一个 cookie 值，只需对它重新赋值，例如：<code>document.cookie=&quot;age=23&quot;;</code>这样就可以修改前面设置的 age=21 的 cookie 值。</p><h2 id="Js删除Cookie"><a href="#Js删除Cookie" class="headerlink" title="Js删除Cookie"></a>Js删除Cookie</h2><p>删除 Cookie 与修改 Cookie 类似，只需要重新将 Cookie 的值设置为空，并将 expires 属性设置为一个过去的日期即可。</p><p>另外，也可通过将 max-age 属性设置为 0 来删除 Cookie。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; path=/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line"><span class="comment">// 删除这个 Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="使用插件实现Cookie的操作"><a href="#使用插件实现Cookie的操作" class="headerlink" title="使用插件实现Cookie的操作"></a>使用插件实现Cookie的操作</h1><h2 id="Js-cookie-js"><a href="#Js-cookie-js" class="headerlink" title="Js.cookie.js"></a>Js.cookie.js</h2><blockquote><p>js.cookie.js : 一个简单，轻量级的JavaScript API，用于处理cookie;</p></blockquote><p>开源地址：<a href="https://github.com/js-cookie/js-cookie">https://github.com/js-cookie/js-cookie</a></p><p>下载：<a href="https://github.com/js-cookie/js-cookie/releases">https://github.com/js-cookie/js-cookie/releases</a></p><p>优点：</p><ul><li>适用于所有浏览器；</li><li>接受任何字符；</li><li>没有依赖；</li><li>支持ES模块；</li><li>Unobtrusive JSON support；</li><li>Enable custom encoding/decoding；</li></ul><h3 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h3><p>创建一个cookie，整个站点可用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天，整个站点可用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>expires的单位默认为“天”，那如何设置有效期小于1天呢？<br>解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效期为15分钟；</span></span><br><span class="line"><span class="keyword">var</span> inFifteenMinutes = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">expires</span>: inFifteenMinutes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天，且只在当前页面所在的路径有效；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><p>读取某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// =&gt; &#x27;value&#x27;</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;nothing&#x27;</span>) <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>读取所有可见cookie：返回的是个json对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>() <span class="comment">// =&gt; &#123; name: &#x27;value&#x27; , &quot;name1&quot;:&quot;value1&quot;  &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><p>删除某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>删除当前页面所在路径下某个有效的cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// fail!</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;) <span class="comment">// removed!</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-cookie-js"><a href="#jQuery-cookie-js" class="headerlink" title="jQuery.cookie.js"></a>jQuery.cookie.js</h2><blockquote><p>Jquery.cookie.js - 一个简单，轻量的jquery插件，用于cookie的读取、写入和删除操作；</p></blockquote><p>开源地址：<a href="https://github.com/carhartl/jquery-cookie">https://github.com/carhartl/jquery-cookie</a></p><p>下载地址：<a href="http://plugins.jquery.com/cookie/">http://plugins.jquery.com/cookie/</a></p><blockquote><p>注意：使用之前要引入jquery.js;</p></blockquote><h3 id="创建Cookie-1"><a href="#创建Cookie-1" class="headerlink" title="创建Cookie"></a>创建Cookie</h3><p>创建一个cookie，当前页面路径有效；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建一个cookie，全站点有效：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>expires的单位默认为“天”，那如何设置有效期小于1天呢？<br>解决方案如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效期为15分钟；</span></span><br><span class="line"><span class="keyword">var</span> inFifteenMinutes = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>, &#123; <span class="attr">expires</span>: inFifteenMinutes &#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，并设置cookie的有效路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">4</span>, <span class="attr">path</span>: <span class="string">&#x27;/website1&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="获取Cookie-1"><a href="#获取Cookie-1" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><p>读取某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; &quot;value&quot;</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>读取所有有效的cookie：（json格式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(); <span class="comment">// =&gt; &#123; &quot;name&quot;: &quot;value&quot;,&quot;name1&quot;:&quot;value1&quot; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除Cookie-1"><a href="#删除Cookie-1" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功删除返回true，失败返回false；</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除时，必须使用创建时设置的属性值（path，domain 等）</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><h4 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h4><p>cookie是否编码；（using encodeURIComponent/decodeURIComponent）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie.<span class="property">raw</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="json"><a href="#json" class="headerlink" title="#json"></a>#json</h4><p>是否以json格式进行存储和读取；（Assumes JSON.stringify and JSON.parse）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie.<span class="property">json</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.it610.com/article/1538766788089638912.htm">https://www.it610.com/article/1538766788089638912.htm</a></p><p><a href="https://www.jb51.net/article/182552.htm">https://www.jb51.net/article/182552.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js实现Cookie的操作&quot;&gt;&lt;a href=&quot;#Js实现Cookie的操作&quot; class=&quot;headerlink&quot; title=&quot;Js实现Cookie的操作&quot;&gt;&lt;/a&gt;Js实现Cookie的操作&lt;/h1&gt;&lt;h2 id=&quot;Cookie是什么&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JQuery的基本使用</title>
    <link href="https://aliveseven.github.io/posts/ecc9d9/"/>
    <id>https://aliveseven.github.io/posts/ecc9d9/</id>
    <published>2022-09-24T15:15:19.096Z</published>
    <updated>2022-09-28T12:34:41.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery的基本使用"><a href="#JQuery的基本使用" class="headerlink" title="JQuery的基本使用"></a>JQuery的基本使用</h1><h2 id="JQuery是什么"><a href="#JQuery是什么" class="headerlink" title="JQuery是什么"></a>JQuery是什么</h2><p>JQuery是轻量级、快速、简洁的脚本库，它对Js进行了封装，简单来说就是可以用更少的代码做更多的事情。</p><p><strong>中文API手册：</strong><a href="https://jqueryapi.net/">https://jqueryapi.net/</a></p><p><strong>速查表：</strong><a href="https://www.bejson.com/apidoc/jquery/">https://www.bejson.com/apidoc/jquery/</a></p><h2 id="JQuery的下载和安装"><a href="#JQuery的下载和安装" class="headerlink" title="JQuery的下载和安装"></a>JQuery的下载和安装</h2><h3 id="下载-JQuery"><a href="#下载-JQuery" class="headerlink" title="下载 JQuery"></a>下载 JQuery</h3><p>有两个版本的 JQuery 可供下载：</p><ul><li>Production version - 用于实际的网站中，已被精简和压缩。</li><li>Development version - 用于测试和开发（未压缩，是可读的代码）</li></ul><p>以上两个版本都可以从 <a href="http://jquery.com/download/">jquery.com</a> 中下载。</p><p>Juery 库是一个 JavaScript 文件，您可以使用 HTML 的 <code>&lt;script&gt;</code> 标签引用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过-CDN引用JQ"><a href="#通过-CDN引用JQ" class="headerlink" title="通过 CDN引用JQ"></a>通过 CDN引用JQ</h3><ol><li>Staticfile CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>百度 CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>又拍云 CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h2><p>JQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <strong>$(*selector*).*action*()</strong></p><ul><li>美元符号定义 JQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素，类似于querySelector()</li><li>selector为选择器，比如我要选择id=”test”的元素，那么我可以这样操作，$(“#test”)，又或者我选择class=”wrap”的元素，那么就是$(“.wrap”)</li><li>JQuery 的 action() 执行对元素的操作</li></ul><p>实例:</p><ul><li>$(this).hide() - 隐藏当前元素</li><li>$(“div”).hide() - 隐藏所有 <code>&lt;div&gt;</code> 元素</li><li>$(“div.test”).hide() - 隐藏所有 class=”test” 的<code>&lt;div&gt;</code> 元素</li><li>$(“#test”).hide() - 隐藏 id=”test” 的元素</li></ul><p>JQuery 入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br><span class="line">或者</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JavaScript 入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JQuery 入口函数与 JavaScript 入口函数的区别：</p><ul><li>JQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li><li>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li></ul><h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><ul><li>JQuery 选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML 元素。</li><li>它基于已经存在的 CSS 选择器，除此之外，它还有一些自定义的选择器。</li><li>JQuery 中所有选择器都以美元符号开头：$()。</li></ul><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>JQuery 使用 CSS 选择器来选取 HTML 元素。</p><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“*”)</td><td style="text-align:left">选取所有元素</td></tr><tr><td style="text-align:left">$(“#test”)</td><td style="text-align:left">选择id值为test的元素，id值是唯一的所以返回单个元素</td></tr><tr><td style="text-align:left">$(“div”)</td><td style="text-align:left">选择所有 <code>&lt;div&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“.myclass”)</td><td style="text-align:left">选择使用myclass类的css的所有元素</td></tr><tr><td style="text-align:left">$(“#test,div,.myclass”)</td><td style="text-align:left">选取多个元素</td></tr><tr><td style="text-align:left">$(“p.intro”)</td><td style="text-align:left">选取所有 class=”intro”的<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“p#demo”)</td><td style="text-align:left">选取所有 id=”demo”的<code>&lt;p&gt;</code>元素</td></tr></tbody></table></div><p>实例1：</p><p>当用户点击按钮后，有 id=”test” 属性的元素将被隐藏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实例2：</p><p>用户点击按钮后所有带有 class=”test” 属性的元素都隐藏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“div span”)</td><td style="text-align:left">选取<code>&lt;div&gt;</code>里的所有<code>&lt;span&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“div &gt;span”)</td><td style="text-align:left">选取<code>&lt;div&gt;</code>元素下元素名是<code>&lt;span&gt;</code>的子元素</td></tr><tr><td style="text-align:left">$(“#one +div”)</td><td style="text-align:left">选取id为one的元素的下一个<code>&lt;div&gt;</code>同辈元素，等同于$(“#one”).next(“div”)</td></tr><tr><td style="text-align:left">$(“#one~div”)</td><td style="text-align:left">选取id为one的元素的元素后面的所有<code>&lt;div&gt;</code>同辈元素，等同于$(“#one”).nextAll(“div”)</td></tr><tr><td style="text-align:left">$(“#one”).siblings(“div”)</td><td style="text-align:left">获取id为one的元素的所有<code>&lt;div&gt;</code>同辈元素（不管前后）</td></tr><tr><td style="text-align:left">$(“#one”).prev(“div”)</td><td style="text-align:left">获取id为one的元素的前面紧邻的同辈<code>&lt;div&gt;</code>元素</td></tr></tbody></table></div><p><strong>获取元素范围大小顺序依次为：</strong></p><p>$(“#one”).siblings(“div”) &gt; $(“#one~div”) &gt; $(“#one +div”)  </p><p>或是</p><p>$(“#one”).siblings(“div”) &gt; $(“#one”).nextAll(“div”) &gt; $(“#one”).next(“div”)</p><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“:input”)</td><td style="text-align:left">选取所有<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>，<code>&lt;select&gt;</code> 和 <code>&lt;button&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“:text”)</td><td style="text-align:left">选取所有的单行文本框</td></tr><tr><td style="text-align:left">$(“:password”)</td><td style="text-align:left">选取所有的密码框</td></tr><tr><td style="text-align:left">$(“:radio”)</td><td style="text-align:left">选取所有单的选框</td></tr><tr><td style="text-align:left">$(“:checkbox”)</td><td style="text-align:left">选取所有的多选框</td></tr><tr><td style="text-align:left">$(“:submit”)</td><td style="text-align:left">选取所有的提交按钮</td></tr><tr><td style="text-align:left">$(“:image”)</td><td style="text-align:left">选取所有的图像按钮</td></tr><tr><td style="text-align:left">$(“:reset”)</td><td style="text-align:left">选取所有的重置按钮</td></tr><tr><td style="text-align:left">$(“:button”)</td><td style="text-align:left">选取所有的按钮</td></tr><tr><td style="text-align:left">$(“:file”)</td><td style="text-align:left">选取所有的上传域</td></tr><tr><td style="text-align:left">$(“:hidden”)</td><td style="text-align:left">选取所有不可见元素</td></tr></tbody></table></div><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“div:first”)</td><td style="text-align:left">选取所有<code>&lt;div&gt;</code>元素中第1个<code>&lt;div&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“div:last”)</td><td style="text-align:left">选取所有<code>&lt;div&gt;</code>元素中最后一个<code>&lt;div&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:not(.myClass)”)</td><td style="text-align:left">选取class不是myClass的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:even”)</td><td style="text-align:left">选取索引是偶数的<code>&lt;input&gt;</code>元素(索引从0开始)</td></tr><tr><td style="text-align:left">$(“input:odd”)</td><td style="text-align:left">选取索引是基数的<code>&lt;input&gt;</code>元素(索引从0开始)</td></tr><tr><td style="text-align:left">$(“input:eq(2)”)</td><td style="text-align:left">选取索引等于2的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:gt(4)”)</td><td style="text-align:left">选取索引大于4的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:lt(4)”)</td><td style="text-align:left">选取索引小于4的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“:header”)</td><td style="text-align:left">过滤掉所有标题元素，例如：h1、h2、h3等</td></tr><tr><td style="text-align:left">$(“div:animated”)</td><td style="text-align:left">选取正在执行动画的<code>&lt;div&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“:focus”)</td><td style="text-align:left">选取当前获取焦点的元素</td></tr></tbody></table></div><h3 id="更多选择器"><a href="#更多选择器" class="headerlink" title="更多选择器"></a>更多选择器</h3><p>除了上述几个选择器外，JQuery还有其他常用的选择器和过滤选择器，下面列举几个。</p><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(this)</td><td style="text-align:left">当前 HTML 元素</td></tr><tr><td style="text-align:left">$(“[href]”)</td><td style="text-align:left">选取带有 href 属性的元素</td></tr><tr><td style="text-align:left">$(“[href$=’.jpg’]”)</td><td style="text-align:left">所有带有以 “.jpg” 结尾的属性值的 href 属性</td></tr><tr><td style="text-align:left">$(“div#intro .head”)</td><td style="text-align:left">id=”intro” 的 <code>&lt;div&gt;</code> 元素中的所有 class=”head” 的元素</td></tr><tr><td style="text-align:left">$(“a[target=’_blank’]”)</td><td style="text-align:left">选取所有 target 属性值等于 “_blank” 的 <code>&lt;a&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“a[target!=’_blank’]”)</td><td style="text-align:left">选取所有 target 属性值不等于 “_blank” 的 <code>&lt;a&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“tr:even”)</td><td style="text-align:left">选取偶数位置的 <code>&lt;tr&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“tr:odd”)</td><td style="text-align:left">选取奇数位置的 <code>&lt;tr&gt;</code> 元素</td></tr></tbody></table></div><h2 id="JQuery事件"><a href="#JQuery事件" class="headerlink" title="JQuery事件"></a>JQuery事件</h2><p>JQuery 事件处理方法是 jQuery 中的核心函数。</p><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><h4 id="click"><a href="#click" class="headerlink" title="click()"></a>click()</h4><p>click() 方法是当按钮点击事件被触发时会调用一个函数。</p><p>该函数在用户点击 HTML 元素时执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当点击事件在某个 &lt;p&gt; 元素上触发时，隐藏当前的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="dblclick"><a href="#dblclick" class="headerlink" title="dblclick()"></a>dblclick()</h4><p>当双击元素时，会发生 dblclick 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当双击事件在某个 &lt;p&gt; 元素上触发时，隐藏当前的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseenter"><a href="#mouseenter" class="headerlink" title="mouseenter()"></a>mouseenter()</h4><p>当鼠标指针穿过元素时，会发生 mouseenter 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouseenter() 方法触发 mouseenter 事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;您的鼠标移到了 id=&quot;p1&quot; 的元素上!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseleave"><a href="#mouseleave" class="headerlink" title="mouseleave()"></a>mouseleave()</h4><p>当鼠标指针离开元素时，会发生 mouseleave 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouseleave() 方法触发 mouseleave 事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseleave</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;您的鼠标离开了 id=&quot;</span>p1<span class="string">&quot; 的元素上!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown()"></a>mousedown()</h4><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下了id为p1的元素</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mousedown</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;鼠标在 id=&quot;</span>p1<span class="string">&quot; 的元素上按下！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup()"></a>mouseup()</h4><p>当在元素上松开鼠标按钮时，会发生 mouseup 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下了id为p1的元素之后，松开了鼠标触发事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseup</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;鼠标在段落上松开。&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hover"><a href="#hover" class="headerlink" title="hover()"></a>hover()</h4><p>hover()方法用于模拟光标悬停事件。</p><p>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">$( selector ).<span class="title function_">hover</span>( handlerIn, handlerOut )</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>inFunction</em></td><td style="text-align:left">必需。规定 mouseenter 事件发生时运行的函数。</td></tr><tr><td style="text-align:left"><em>outFunction</em></td><td style="text-align:left">可选。规定 mouseleave 事件发生时运行的函数。</td></tr></tbody></table></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例，鼠标进入触发第一个函数，离开触发第二个函数</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">hover</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;你进入了 p1!&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;拜拜! 现在你离开了 p1!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="focus"><a href="#focus" class="headerlink" title="focus()"></a>focus()</h4><p>当元素获得焦点时，发生 focus 事件。</p><p>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入框获取焦点，发生focus事件</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h4><p>当元素失去焦点时，发生 blur 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入框失去焦点，发生blur事件</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#ffffff&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="keypress"><a href="#keypress" class="headerlink" title="keypress()"></a>keypress()</h4><p>与 keypress 事件相关的事件顺序：</p><ol><li>keydown- 键按下的过程</li><li>keypress - 键被按下</li><li>keyup - 键被松开</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发被选元素的 keypress 事件</span></span><br><span class="line">$(selector).<span class="title function_">keypress</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加函数到 keypress 事件</span></span><br><span class="line">$(selector).<span class="title function_">keypress</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>function</em></td><td style="text-align:left">可选。规定 keypress 事件触发时运行的函数。</td></tr></tbody></table></div><h4 id="keydown"><a href="#keydown" class="headerlink" title="keydown()"></a>keydown()</h4><p>当键盘键被按下时发生 keydown 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">keydown</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><h4 id="keyup"><a href="#keyup" class="headerlink" title="keyup()"></a>keyup()</h4><p>当键盘键被松开时发生 keyup 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">keyup</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JQuery的基本使用&quot;&gt;&lt;a href=&quot;#JQuery的基本使用&quot; class=&quot;headerlink&quot; title=&quot;JQuery的基本使用&quot;&gt;&lt;/a&gt;JQuery的基本使用&lt;/h1&gt;&lt;h2 id=&quot;JQuery是什么&quot;&gt;&lt;a href=&quot;#JQuery是什</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5之Canvas标签</title>
    <link href="https://aliveseven.github.io/posts/5de0b8dd/"/>
    <id>https://aliveseven.github.io/posts/5de0b8dd/</id>
    <published>2022-09-22T03:19:48.803Z</published>
    <updated>2022-09-22T15:20:12.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5之Canvas标签"><a href="#HTML5之Canvas标签" class="headerlink" title="HTML5之Canvas标签"></a>HTML5之Canvas标签</h1><h2 id="Canvas简介"><a href="#Canvas简介" class="headerlink" title="Canvas简介"></a>Canvas简介</h2><p><code>&lt;canvas&gt;</code> 是 <code>HTML5</code> 新增的，一个可以使用脚本(通常为<code>JavaScript</code>)在其中绘制图像的 <code>HTML</code> 元素。它可以用来制作照片集或者制作简单(也不是那么简单)的动画，甚至可以进行实时视频处理和渲染。</p><h2 id="Canvas基本使用"><a href="#Canvas基本使用" class="headerlink" title="Canvas基本使用"></a>Canvas基本使用</h2><p><code>&lt;canvas&gt;</code>看起来和<code>&lt;img&gt;</code>标签一样，只是 <code>&lt;canvas&gt;</code> 只有两个可选的属性 <code>width、heigth</code> 属性，而没有 <code>src、alt</code> 属性。</p><p> 如果不给<code>&lt;canvas&gt;</code>设置<code>widht、height</code>属性时，则默认 <code>width</code>为300、<code>height</code>为150,单位都是<code>px</code>。也可以使用<code>css</code>属性来设置宽高，但是如宽高属性和初始比例不一致，他会出现扭曲。所以，建议永远不要使用<code>css</code>属性来设置<code>&lt;canvas&gt;</code>的宽高。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>某些较老的浏览器（尤其是IE9之前的IE浏览器）或者浏览器不支持HTML元素<code>&lt;canvas&gt;</code>，然后可以用替代内容来渲染。</p><blockquote><p>用文本替换：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">    你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用 <code>&lt;img&gt;</code> 替换：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./404.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结束标签<code>&lt;/canvas&gt;</code>不可省</p></blockquote><p>与 <code>&lt;img&gt;</code>元素不同，<code>&lt;canvas&gt;</code>元素<strong>需要</strong>结束标签(<code>&lt;/canvas&gt;</code>)。如果结束标签不存在，则文档的其余部分会被认为是替代内容，将不会显示出来。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p> <code>&lt;canvas&gt;</code>会创建一个固定大小的画布，会公开一个或多个 <strong>渲染上下文</strong>(画笔)，使用 <strong>渲染上下文</strong>来绘制和处理要展示的内容。</p><h3 id="获取渲染上下文"><a href="#获取渲染上下文" class="headerlink" title="获取渲染上下文"></a><strong>获取渲染上下文</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span></span><br><span class="line">        你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获得 2d 上下文对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_fillstyle.asp">fillStyle</a></td><td style="text-align:left">设置或返回用于填充绘画的颜色、渐变或模式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_strokestyle.asp">strokeStyle</a></td><td style="text-align:left">设置或返回用于笔触的颜色、渐变或模式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowcolor.asp">shadowColor</a></td><td style="text-align:left">设置或返回用于阴影的颜色</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowblur.asp">shadowBlur</a></td><td style="text-align:left">设置或返回用于阴影的模糊级别</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsetx.asp">shadowOffsetX</a></td><td style="text-align:left">设置或返回阴影距形状的水平距离</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsety.asp">shadowOffsetY</a></td><td style="text-align:left">设置或返回阴影距形状的垂直距离</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createlineargradient.asp">createLinearGradient()</a></td><td style="text-align:left">创建线性渐变（用在画布内容上）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createpattern.asp">createPattern()</a></td><td style="text-align:left">在指定的方向上重复指定的元素</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createradialgradient.asp">createRadialGradient()</a></td><td style="text-align:left">创建放射状/环形的渐变（用在画布内容上）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_addcolorstop.asp">addColorStop()</a></td><td style="text-align:left">规定渐变对象中的颜色和停止位置</td></tr></tbody></table></div><h3 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap</a></td><td style="text-align:left">设置或返回线条的结束端点样式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin</a></td><td style="text-align:left">设置或返回两条线相交时，所创建的拐角类型</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_linewidth.asp">lineWidth</a></td><td style="text-align:left">设置或返回当前的线条宽度</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit</a></td><td style="text-align:left">设置或返回最大斜接长度</td></tr></tbody></table></div><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_rect.asp">rect()</a></td><td style="text-align:left">创建矩形</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_fillrect.asp">fillRect()</a></td><td style="text-align:left">绘制“被填充”的矩形</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_strokerect.asp">strokeRect()</a></td><td style="text-align:left">绘制矩形边框（无填充）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_clearrect.asp">clearRect()</a></td><td style="text-align:left">在给定的矩形内清除指定的像素</td></tr></tbody></table></div><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_fill.asp">fill()</a></td><td style="text-align:left">填充当前绘图（路径）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_stroke.asp">stroke()</a></td><td style="text-align:left">绘制已定义的路径</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_beginpath.asp">beginPath()</a></td><td style="text-align:left">起始一条路径，或重置当前路径</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_moveto.asp">moveTo()</a></td><td style="text-align:left">把路径移动到画布中的指定点，不创建线条</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_closepath.asp">closePath()</a></td><td style="text-align:left">创建从当前点回到起始点的路径</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_lineto.asp">lineTo()</a></td><td style="text-align:left">添加一个新点，然后在画布中创建从该点到最后指定点的线条</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_clip.asp">clip()</a></td><td style="text-align:left">从原始画布剪切任意形状和尺寸的区域</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp">quadraticCurveTo()</a></td><td style="text-align:left">创建二次贝塞尔曲线</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_beziercurveto.asp">bezierCurveTo()</a></td><td style="text-align:left">创建三次方贝塞尔曲线</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_arc.asp">arc()</a></td><td style="text-align:left">创建弧/曲线（用于创建圆形或部分圆）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_arcto.asp">arcTo()</a></td><td style="text-align:left">创建两切线之间的弧/曲线</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_ispointinpath.asp">isPointInPath()</a></td><td style="text-align:left">如果指定的点位于当前路径中，则返回 true，否则返回 false</td></tr></tbody></table></div><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_scale.asp">scale()</a></td><td style="text-align:left">缩放当前绘图至更大或更小</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_rotate.asp">rotate()</a></td><td style="text-align:left">旋转当前绘图</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_translate.asp">translate()</a></td><td style="text-align:left">重新映射画布上的 (0,0) 位置</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_transform.asp">transform()</a></td><td style="text-align:left">替换绘图的当前转换矩阵</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_settransform.asp">setTransform()</a></td><td style="text-align:left">将当前转换重置为单位矩阵。然后运行 transform()</td></tr></tbody></table></div><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_font.asp">font</a></td><td style="text-align:left">设置或返回文本内容的当前字体属性</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_textalign.asp">textAlign</a></td><td style="text-align:left">设置或返回文本内容的当前对齐方式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_textbaseline.asp">textBaseline</a></td><td style="text-align:left">设置或返回在绘制文本时使用的当前文本基线</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_filltext.asp">fillText()</a></td><td style="text-align:left">在画布上绘制“被填充的”文本</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_stroketext.asp">strokeText()</a></td><td style="text-align:left">在画布上绘制文本（无填充）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_measuretext.asp">measureText()</a></td><td style="text-align:left">返回包含指定文本宽度的对象</td></tr></tbody></table></div><h3 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_drawimage.asp">drawImage()</a></td><td style="text-align:left">向画布上绘制图像、画布或视频</td></tr></tbody></table></div><h3 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_width.asp">width</a></td><td style="text-align:left">返回 ImageData 对象的宽度</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_height.asp">height</a></td><td style="text-align:left">返回 ImageData 对象的高度</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_data.asp">data</a></td><td style="text-align:left">返回一个对象，其包含指定的 ImageData 对象的图像数据</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createimagedata.asp">createImageData()</a></td><td style="text-align:left">创建新的、空白的 ImageData 对象</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_getimagedata.asp">getImageData()</a></td><td style="text-align:left">返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_putimagedata.asp">putImageData()</a></td><td style="text-align:left">把图像数据（从指定的 ImageData 对象）放回画布上</td></tr></tbody></table></div><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_globalalpha.asp">globalAlpha</a></td><td style="text-align:left">设置或返回绘图的当前 alpha 或透明值</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_globalcompositeoperation.asp">globalCompositeOperation</a></td><td style="text-align:left">设置或返回新图像如何绘制到已有的图像上</td></tr></tbody></table></div><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><blockquote><p><code>canvas</code> 提供了三种方法绘制矩形：</p></blockquote><ol><li><p><code>fillRect(x, y, width, height)</code></p><p>绘制一个填充的矩形</p></li><li><p><code>strokeRect(x, y, width, height)</code></p><p>绘制一个矩形的边框</p></li><li><p><code>clearRect(x, y, widh, height)</code></p><p>清除指定的矩形区域，然后这块区域会变的完全透明。</p></li></ol><p><strong>案例：绘制两个矩形</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span></span><br><span class="line">        你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获得 2d 上下文对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置或返回用于填充绘画的颜色、渐变或模式</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgb(200,0,0)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fillRect(x,y,width,height) 绘制一个填充的矩形</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillRect</span> (<span class="number">10</span>, <span class="number">10</span>, <span class="number">55</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置或返回用于笔触的颜色、渐变或模式</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(0, 0, 200, 0.5)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillRect</span> (<span class="number">50</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLO1p.png" alt=""></p><h2 id="绘制路径-path"><a href="#绘制路径-path" class="headerlink" title="绘制路径(path)"></a>绘制路径(<code>path</code>)</h2><p>图形的基本元素是路径。</p><p> 路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p><p>一个路径，甚至一个子路径，都是闭合的。</p><blockquote><p>使用路径绘制图形需要一些额外的步骤：</p></blockquote><ol><li>创建路径起始点</li><li>调用绘制方法去绘制出路径</li><li>把路径封闭</li><li>一旦路径生成，通过描边或填充路径区域来渲染图形。</li></ol><blockquote><p>下面是需要用到的方法：</p></blockquote><ol><li><p><code>beginPath()</code></p><p>新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径</p></li><li><p><code>moveTo(x, y)</code></p><p>把画笔移动到指定的坐标<code>(x, y)</code>。相当于设置路径的起始点坐标。</p></li><li><p><code>closePath()</code></p><p>闭合路径之后，图形绘制命令又重新指向到上下文中</p></li><li><p><code>stroke()</code></p><p>通过线条来绘制图形轮廓</p></li><li><p><code>fill()</code></p><p>通过填充路径的内容区域生成实心的图形</p></li></ol><h2 id="绘制线段"><a href="#绘制线段" class="headerlink" title="绘制线段"></a>绘制线段</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">80</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(200, 50)的直线.</span></span><br><span class="line">        <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">150</span>, <span class="number">50</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(150, 50)的直线.</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">150</span>, <span class="number">120</span>); <span class="comment">//绘制一条从当前位置到指定坐标(150, 120)的直线.</span></span><br><span class="line">        <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLRgv.png" alt=""></p><h2 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h2><blockquote><p> 有两个方法可以绘制圆弧：</p></blockquote><ol><li><code>arc(x, y, r, startAngle, endAngle, anticlockwise)</code>:</li></ol><p>以<code>(x, y)</code>为圆心，以<code>r</code>为半径，从 <code>startAngle</code>弧度开始到<code>endAngle</code>弧度结束。<code>anticlosewise</code>是布尔值，<code>true</code>表示逆时针，<code>false</code>表示顺时针。(默认是顺时针)</p><p>注意：</p><ol><li>这里的度数都是弧度。</li><li><code>0</code>弧度是指的<code>x</code>轴正方形</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radians=(Math.PI/180)*degrees   //角度转换成弧度</span><br></pre></td></tr></table></figure><ol><li><code>arcTo(x1, y1, x2, y2, radius)</code>:</li></ol><p>根据给定的控制点和半径画一段圆弧，最后再以直线连接两个控制点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">150</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">0</span>, -<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">50</span>, -<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLBIK.png" alt=""></p><h2 id="绘制贝塞尔曲线"><a href="#绘制贝塞尔曲线" class="headerlink" title="绘制贝塞尔曲线"></a>绘制贝塞尔曲线</h2><h3 id="绘制二次贝塞尔曲线"><a href="#绘制二次贝塞尔曲线" class="headerlink" title="绘制二次贝塞尔曲线"></a>绘制二次贝塞尔曲线</h3><p><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>:</p><p>参数1和2：控制点坐标</p><p> 参数3和4：结束点坐标</p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/94917354.jpg" alt=""></p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/35792129.jpg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">120</span>, <span class="number">120</span>); <span class="comment">//起始点</span></span><br><span class="line">        <span class="keyword">var</span> cp1x = <span class="number">60</span>, cp1y = <span class="number">40</span>;  <span class="comment">//控制点</span></span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">120</span>, y = <span class="number">70</span>; <span class="comment">// 结束点</span></span><br><span class="line">        <span class="comment">//绘制二次贝塞尔曲线</span></span><br><span class="line">        ctx.<span class="title function_">quadraticCurveTo</span>(cp1x, cp1y, x, y);</span><br><span class="line">        ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML5之Canvas标签&quot;&gt;&lt;a href=&quot;#HTML5之Canvas标签&quot; class=&quot;headerlink&quot; title=&quot;HTML5之Canvas标签&quot;&gt;&lt;/a&gt;HTML5之Canvas标签&lt;/h1&gt;&lt;h2 id=&quot;Canvas简介&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML5" scheme="https://aliveseven.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this指向问题</title>
    <link href="https://aliveseven.github.io/posts/9170747e/"/>
    <id>https://aliveseven.github.io/posts/9170747e/</id>
    <published>2022-09-19T15:26:21.428Z</published>
    <updated>2022-09-28T12:34:38.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript中的this指向问题"><a href="#JavaScript中的this指向问题" class="headerlink" title="JavaScript中的this指向问题"></a>JavaScript中的this指向问题</h1><ul><li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定，<strong>this最终指向调用它的对象。</strong></li></ul><h2 id="全局作用域或函数调用下"><a href="#全局作用域或函数调用下" class="headerlink" title="全局作用域或函数调用下"></a>全局作用域或函数调用下</h2><ul><li><strong>全局作用域或者普通函数中 this 指向全局对象 window。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)  <span class="comment">// undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><h2 id="方法调用下"><a href="#方法调用下" class="headerlink" title="方法调用下"></a>方法调用下</h2><ul><li><strong>方法调用中谁调用了，this 指向谁</strong></li><li>当函数被保存为一个对象的属性时，它就可称为这个对象的方法。当一个方法被调用时，this被绑定到这个对象上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hi</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>因为是A.b调用的这个函数，所以指向b这个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello and Hi&#x27;</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        a : <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        sayHello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hello，</span></span><br><span class="line">            <span class="comment">// 这里的this指向的对象是b，因为调用这个sayHello()函数是通过b.sayHello()执行的</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// b : &#123;sayHello: ƒ&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property">b</span>.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><ul><li>x是<a href="https://so.csdn.net/so/search?q=全局变量&amp;spm=1001.2101.3001.7020">全局变量</a>，在全局环境下执行，this指向window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello and Hi&#x27;</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        a : <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        sayHello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hello，</span></span><br><span class="line">            <span class="comment">// 这里的this指向的对象是b，因为调用这个sayHello()函数是通过b.sayHello()执行的</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// b : &#123;sayHello: ƒ&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = A.<span class="property">b</span>.<span class="property">sayHello</span></span><br><span class="line"><span class="comment">// Hello and Hi</span></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line"><span class="title function_">x</span>()</span><br></pre></td></tr></table></figure><h2 id="构造函数调用下"><a href="#构造函数调用下" class="headerlink" title="构造函数调用下"></a>构造函数调用下</h2><ul><li>如果在一个函数前面<strong>加上new关键字</strong>来调用，那么就会创建一个连接到该函数的prototype成员的新对象，同时，<strong>this会被绑定到这个新对象上</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// fn()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li>在构造函数，new出一个对象时，this指向这个构造函数，new关键字会改变this的指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><ul><li>当用new关键字，返回的是一个对象，this指向的就是那个返回的对象；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><ul><li>如果返回的不是对象，this还是指向函数的实例，<strong>虽然null属于对象，但是返回null依然指向函数实例。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数下"><a href="#箭头函数下" class="headerlink" title="箭头函数下"></a><strong>箭头函数下</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bar</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// &#123;foo: ƒ, bar: ƒ&#125;</span></span><br><span class="line">obj.<span class="title function_">bar</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript中的this指向问题&quot;&gt;&lt;a href=&quot;#JavaScript中的this指向问题&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的this指向问题&quot;&gt;&lt;/a&gt;JavaScript中的this指向问题&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>css之animation的使用和介绍</title>
    <link href="https://aliveseven.github.io/posts/76841e30/"/>
    <id>https://aliveseven.github.io/posts/76841e30/</id>
    <published>2022-09-17T17:33:43.842Z</published>
    <updated>2022-09-18T14:26:28.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css之animation的使用和介绍"><a href="#css之animation的使用和介绍" class="headerlink" title="css之animation的使用和介绍"></a>css之animation的使用和介绍</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>animation 属性是一个简写属性，用于设置六个动画属性：</p><ul><li>animation-name</li><li>animation-duration</li><li>animation-timing-function</li><li>animation-delay</li><li>animation-iteration-count</li><li>animation-direction</li></ul><p><strong>注释：</strong>请始终规定 animation-duration 属性，否则时长为 0，就不会播放动画了。</p><div class="table-container"><table><thead><tr><th>默认值：</th><th>none 0 ease 0 1 normal</th></tr></thead><tbody><tr><td>继承性：</td><td>no</td></tr><tr><td>版本：</td><td>CSS3</td></tr><tr><td>JavaScript 语法：</td><td><em>object</em>.style.animation=”mymove 5s infinite”</td></tr></tbody></table></div><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td>@keyframes</td><td>使用@keyframes可以规定动画</td><td></td></tr><tr><td>animation-name</td><td>规定动画的名称</td><td>keyframename</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期花费的秒或毫秒</td><td>time</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线</td><td>linear / ease / ease-in / ease-out / ease-in-out</td></tr><tr><td>animation-delay</td><td>规定动画在启动前的延迟间隔</td><td>time</td></tr><tr><td>animation-iteration-count</td><td>规定动画的播放次数</td><td>n / infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一个周期反向播放</td><td>normal / reverse / alternate / alternate-reverse</td></tr><tr><td>animation-fill-mode</td><td>规定当动画不播放时，要应用到元素的样式</td><td>none / forwards / backwards / both</td></tr><tr><td>animation-play-state</td><td>规定动画播放状态，正在运行或暂停</td><td>running / paused</td></tr></tbody></table></div><h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>keyframename</em></td><td style="text-align:left">规定需要绑定到选择器的 keyframe 的名称。</td></tr><tr><td style="text-align:left">none</td><td style="text-align:left">规定无动画效果（可用于覆盖来自级联的动画）。</td></tr></tbody></table></div><h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>time</em></td><td style="text-align:left">规定完成动画所花费的时间。默认值是 0，意味着没有动画效果。</td></tr></tbody></table></div><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th><th style="text-align:left">测试</th></tr></thead><tbody><tr><td style="text-align:left">linear</td><td style="text-align:left">动画从头到尾的速度是相同的。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function">测试</a></td></tr><tr><td style="text-align:left">ease</td><td style="text-align:left">默认。动画以低速开始，然后加快，在结束前变慢。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=2">测试</a></td></tr><tr><td style="text-align:left">ease-in</td><td style="text-align:left">动画以低速开始。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=3">测试</a></td></tr><tr><td style="text-align:left">ease-out</td><td style="text-align:left">动画以低速结束。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=4">测试</a></td></tr><tr><td style="text-align:left">ease-in-out</td><td style="text-align:left">动画以低速开始和结束。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=5">测试</a></td></tr><tr><td style="text-align:left">cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td style="text-align:left">在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr></tbody></table></div><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>time</em></td><td style="text-align:left">可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。</td></tr></tbody></table></div><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>n</em></td><td style="text-align:left">定义动画播放次数的数值。</td></tr><tr><td style="text-align:left">infinite</td><td style="text-align:left">规定动画应该无限次播放。</td></tr></tbody></table></div><h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">normal</td><td style="text-align:left">默认值。动画按正常播放。</td></tr><tr><td style="text-align:left">reverse</td><td style="text-align:left">动画反向播放。</td></tr><tr><td style="text-align:left">alternate</td><td style="text-align:left">动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</td></tr><tr><td style="text-align:left">alternate-reverse</td><td style="text-align:left">动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。</td></tr></tbody></table></div><h3 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:left">默认值。动画在动画执行之前和之后不会应用任何样式到目标元素。</td></tr><tr><td style="text-align:left">forwards</td><td style="text-align:left">在动画结束后（由 animation-iteration-count 决定），动画将应用该属性值。</td></tr><tr><td style="text-align:left">backwards</td><td style="text-align:left">动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 “normal” 或 “alternate” 时）或 to 关键帧中的值（当 animation-direction 为 “reverse” 或 “alternate-reverse” 时）。</td></tr><tr><td style="text-align:left">both</td><td style="text-align:left">动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。</td></tr></tbody></table></div><h3 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">paused</td><td style="text-align:left">指定暂停动画</td></tr><tr><td style="text-align:left">running</td><td style="text-align:left">指定正在运行的动画</td></tr></tbody></table></div><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cube&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.circle</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move <span class="number">1s</span> ease-in <span class="number">0s</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cube</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move-x <span class="number">2s</span> ease-in <span class="number">0s</span> infinite alternate-reverse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 鼠标经过动画停止 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 规定动画move是由上到下 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span> , <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span> , <span class="number">400px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 规定动画move-x是由左到右 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move-x &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">400px</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/18/U8monh.gif" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css之animation的使用和介绍&quot;&gt;&lt;a href=&quot;#css之animation的使用和介绍&quot; class=&quot;headerlink&quot; title=&quot;css之animation的使用和介绍&quot;&gt;&lt;/a&gt;css之animation的使用和介绍&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础2</title>
    <link href="https://aliveseven.github.io/posts/c3df6b2a/"/>
    <id>https://aliveseven.github.io/posts/c3df6b2a/</id>
    <published>2022-09-17T12:48:15.761Z</published>
    <updated>2022-09-30T17:22:23.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript基础2"><a href="#TypeScript基础2" class="headerlink" title="TypeScript基础2"></a>TypeScript基础2</h1><h2 id="生成tsconfig-json-文件"><a href="#生成tsconfig-json-文件" class="headerlink" title="生成tsconfig.json 文件"></a>生成tsconfig.json 文件</h2><p>这个文件是通过<code>tsc --init</code>命令生成的</p><p>配置详解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;incremental&quot;</span>: <span class="literal">true</span>, <span class="comment">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span><br><span class="line">  <span class="string">&quot;tsBuildInfoFile&quot;</span>: <span class="string">&quot;./buildFile&quot;</span>, <span class="comment">// 增量编译文件的存储位置</span></span><br><span class="line">  <span class="string">&quot;diagnostics&quot;</span>: <span class="literal">true</span>, <span class="comment">// 打印诊断信息 </span></span><br><span class="line">  <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>, <span class="comment">// 目标语言的版本</span></span><br><span class="line">  <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span>, <span class="comment">// 生成代码的模板标准</span></span><br><span class="line">  <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./app.js&quot;</span>, <span class="comment">// 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span><br><span class="line">  <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;DOM&quot;</span>, <span class="string">&quot;ES2015&quot;</span>, <span class="string">&quot;ScriptHost&quot;</span>, <span class="string">&quot;ES2019.Array&quot;</span>], <span class="comment">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span><br><span class="line">  <span class="string">&quot;allowJS&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许编译器编译JS，JSX文件</span></span><br><span class="line">  <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许在JS文件中报错，通常与allowJS一起使用</span></span><br><span class="line">  <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>, <span class="comment">// 指定输出目录</span></span><br><span class="line">  <span class="string">&quot;rootDir&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span><br><span class="line">  <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成声明文件，开启后会自动生成声明文件</span></span><br><span class="line">  <span class="string">&quot;declarationDir&quot;</span>: <span class="string">&quot;./file&quot;</span>, <span class="comment">// 指定生成声明文件存放目录</span></span><br><span class="line">  <span class="string">&quot;emitDeclarationOnly&quot;</span>: <span class="literal">true</span>, <span class="comment">// 只生成声明文件，而不会生成js文件</span></span><br><span class="line">  <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成目标文件的sourceMap文件</span></span><br><span class="line">  <span class="string">&quot;inlineSourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span></span><br><span class="line">  <span class="string">&quot;declarationMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 为声明文件生成sourceMap</span></span><br><span class="line">  <span class="string">&quot;typeRoots&quot;</span>: [], <span class="comment">// 声明文件目录，默认时node_modules/@types</span></span><br><span class="line">  <span class="string">&quot;types&quot;</span>: [], <span class="comment">// 加载的声明文件包</span></span><br><span class="line">  <span class="string">&quot;removeComments&quot;</span>:<span class="literal">true</span>, <span class="comment">// 删除注释 </span></span><br><span class="line">  <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不输出文件,即编译后不会生成任何js文件</span></span><br><span class="line">  <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>, <span class="comment">// 发送错误时不输出任何文件</span></span><br><span class="line">  <span class="string">&quot;noEmitHelpers&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span><br><span class="line">  <span class="string">&quot;importHelpers&quot;</span>: <span class="literal">true</span>, <span class="comment">// 通过tslib引入helper函数，文件必须是模块</span></span><br><span class="line">  <span class="string">&quot;downlevelIteration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span><br><span class="line">  <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>, <span class="comment">// 开启所有严格的类型检查</span></span><br><span class="line">  <span class="string">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>, <span class="comment">// 在代码中注入&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">  <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许把null、undefined赋值给其他类型的变量</span></span><br><span class="line">  <span class="string">&quot;strictFunctionTypes&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许函数参数双向协变</span></span><br><span class="line">  <span class="string">&quot;strictPropertyInitialization&quot;</span>: <span class="literal">true</span>, <span class="comment">// 类的实例属性必须初始化</span></span><br><span class="line">  <span class="string">&quot;strictBindCallApply&quot;</span>: <span class="literal">true</span>, <span class="comment">// 严格的bind/call/apply检查</span></span><br><span class="line">  <span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许this有隐式的any类型</span></span><br><span class="line">  <span class="string">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>, <span class="comment">// 检查只声明、未使用的局部变量(只提示不报错)</span></span><br><span class="line">  <span class="string">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>, <span class="comment">// 检查未使用的函数参数(只提示不报错)</span></span><br><span class="line">  <span class="string">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>, <span class="comment">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span><br><span class="line">  <span class="string">&quot;noImplicitReturns&quot;</span>: <span class="literal">true</span>, <span class="comment">//每个分支都会有返回值</span></span><br><span class="line">  <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许export=导出，由import from 导入</span></span><br><span class="line">  <span class="string">&quot;allowUmdGlobalAccess&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许在模块中全局变量的方式访问umd模块</span></span><br><span class="line">  <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>, <span class="comment">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span><br><span class="line">  <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 解析非相对模块的基地址，默认是当前目录</span></span><br><span class="line">  <span class="string">&quot;paths&quot;</span>: &#123; <span class="comment">// 路径映射，相对于baseUrl</span></span><br><span class="line">    <span class="comment">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: [<span class="string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;rootDirs&quot;</span>: [<span class="string">&quot;src&quot;</span>,<span class="string">&quot;out&quot;</span>], <span class="comment">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span><br><span class="line">  <span class="string">&quot;listEmittedFiles&quot;</span>: <span class="literal">true</span>, <span class="comment">// 打印输出文件</span></span><br><span class="line">  <span class="string">&quot;listFiles&quot;</span>: <span class="literal">true</span><span class="comment">// 打印编译的文件(包括引用的声明文件)</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span><br><span class="line"><span class="string">&quot;include&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 指定一个排除列表（include的反向操作）</span></span><br><span class="line"> <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span><br><span class="line"> <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h2><p>我们在工作中无法避免<a href="https://so.csdn.net/so/search?q=全局变量&amp;spm=1001.2101.3001.7020">全局变量</a>造成的污染，TypeScript提供了namespace 避免这个问题出现。</p><ul><li>内部模块，主要用于组织代码，避免命名冲突。</li><li>命名空间内的类默认私有</li><li>通过 <code>export</code> 暴露</li><li>通过 <code>namespace</code> 关键字定义</li></ul><p>TypeScript与ECMAScript 2015一样，任何包含顶级<code>import</code>或者<code>export</code>的文件都被当成一个模块。相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的（因此对模块也是可见的）</p><p>命名空间（namespace）中通过<code>export</code>将想要暴露的部分导出</p><p>如果不用export 导出是无法读取其值的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> B &#123;</span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">A.<span class="property">a</span></span><br><span class="line">B.<span class="property">b</span></span><br></pre></td></tr></table></figure><h3 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> B &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Alive</span> &#123;</span><br><span class="line">            <span class="attr">params</span>: <span class="built_in">string</span></span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">params: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">params</span> = params</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> x = A.<span class="property">B</span>.<span class="property">Alive</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title function_">x</span>(<span class="string">&#x27;AA&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="抽离命名空间"><a href="#抽离命名空间" class="headerlink" title="抽离命名空间"></a>抽离命名空间</h3><p>a.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;A&#125; <span class="keyword">from</span> <span class="string">&#x27;../observer/index&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br></pre></td></tr></table></figure><h3 id="简化命名空间"><a href="#简化命名空间" class="headerlink" title="简化命名空间"></a>简化命名空间</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A  &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> B &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> X = A.<span class="property">B</span>.<span class="property">C</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(X);</span><br></pre></td></tr></table></figure><h3 id="合并命名空间"><a href="#合并命名空间" class="headerlink" title="合并命名空间"></a>合并命名空间</h3><ul><li>重名的命名空间会合并</li></ul><p><img src="https://m1.im5i.com/2022/09/17/U8mJws.png" alt=""></p><h2 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h2><ol><li>三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为编译器指令使用。</li><li><code>/// &lt;reference path=&quot;...&quot; /&gt;</code>指令是三斜线指令中最常见的一种。 它用于声明文件间的 <em>依赖</em>。</li><li>类似import，它可以告诉编译器在编译过程中要引入的额外的文件</li><li>三斜线指令仅可放在包含它的文件的<strong>最顶端</strong>。 一个三斜线指令的<strong>前面</strong>只能出现单行或多行注释，这包括其它的三斜线指令</li></ol><h2 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h2><p>TypeScript混入 Mixins 其实vue也有mixins这个东西 你可以把他看作为合并。</p><h3 id="对象混入"><a href="#对象混入" class="headerlink" title="对象混入"></a>对象混入</h3><p>可以使用es6的Object.assign 合并多个对象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Age</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">people1</span>: <span class="title class_">Name</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;AliveSeven&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people2</span>: <span class="title class_">Age</span> = &#123; <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people3</span>: <span class="title class_">Sex</span> = &#123; <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> people = <span class="title class_">Object</span>.<span class="title function_">assign</span>(people1,people2,people3)</span><br></pre></td></tr></table></figure><h3 id="类的混入"><a href="#类的混入" class="headerlink" title="类的混入"></a>类的混入</h3><p>首先声明两个mixins类 （严格模式要关闭不然编译不过）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">changeType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = !<span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;七海&#x27;</span>;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面创建一个类，结合了这两个mixins</p><p>首先应该注意到的是，没使用<code>extends</code>而是使用<code>implements</code>。 把类当成了接口</p><p>我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> A,B&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">boolean</span></span><br><span class="line">    <span class="attr">changeType</span>:<span class="function">()=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">getName</span>:<span class="function">()=&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，创建这个帮助函数，帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。</p><p><strong>Object.getOwnPropertyNames()可以获取对象自身的属性，除去他继承来的属性，对它所有的属性遍历，它是一个数组，遍历一下它所有的属性名</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Mixins</span>(C, [A, B])</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Mixins</span>(<span class="params">curCls: <span class="built_in">any</span>, itemCls: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    itemCls.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(item.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            curCls.<span class="property"><span class="keyword">prototype</span></span>[name] = item.<span class="property"><span class="keyword">prototype</span></span>[name]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰器Decorator"><a href="#装饰器Decorator" class="headerlink" title="装饰器Decorator"></a>装饰器Decorator</h2><h3 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h3><ul><li>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。</li><li>它类似于Java中的那个注解，它会在运行时被调用，被装饰的声明信息做为参数传入。</li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>首先在在 <code>tsconfig.json</code>中开启 <code>experimentalDecorators</code>编译器选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;ES6&quot;,</span><br><span class="line">        &quot;experimentalDecorators&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰器可以应用在如下几处地方</p><ol><li>Class</li><li>函数</li><li>函数参数</li><li>属性</li><li>get set 访问器</li></ol><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decorator : <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target : <span class="built_in">Function</span></span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [class A]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decorator : <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target : <span class="built_in">Function</span></span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在目标函数的原型上面定义一个HelloWorld的函数</span></span><br><span class="line">    <span class="comment">// 函数参数为&lt;T&gt;(str : T):T</span></span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">HelloWorld</span> = &lt;T&gt;(str : T):<span class="function"><span class="params">T</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&lt;any&gt;a).<span class="title class_">HelloWorld</span>(<span class="string">&#x27;helloworld&#x27;</span>));   <span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure><p>装饰器高阶使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器传入一个string参数</span></span><br><span class="line"><span class="comment">// 返回一个方法，方法是在类的原型上定义了HelloWorld函数</span></span><br><span class="line"><span class="comment">// HelloWorld返回装饰器传入的参数值</span></span><br><span class="line"><span class="keyword">let</span> decorator = (str : string) : <span class="function"><span class="params">ClassDecorator</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target : <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">HelloWorld</span> = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> str</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">decorator</span>(<span class="string">&#x27;AliveSeven&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&lt;any&gt;a).<span class="title class_">HelloWorld</span>()) <span class="comment">// AliveSeven</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript基础2&quot;&gt;&lt;a href=&quot;#TypeScript基础2&quot; class=&quot;headerlink&quot; title=&quot;TypeScript基础2&quot;&gt;&lt;/a&gt;TypeScript基础2&lt;/h1&gt;&lt;h2 id=&quot;生成tsconfig-json-文件&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>原生Js手写轮播图</title>
    <link href="https://aliveseven.github.io/posts/56df3763/"/>
    <id>https://aliveseven.github.io/posts/56df3763/</id>
    <published>2022-09-14T17:37:32.001Z</published>
    <updated>2022-09-28T12:34:24.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原生Js手写轮播图"><a href="#原生Js手写轮播图" class="headerlink" title="原生Js手写轮播图"></a>原生Js手写轮播图</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然现在网上有很多组件库都有轮播图组件，但是我觉得这个东西还是需要自己动手写下好，里面其实有很多有用的知识点的，而且老是用组件库也不好，万一组件库中的轮播图不符合项目的要求或者UI不合适，诸如此类很多情况，还是自己写一个适合自己的最好。</p><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><ul><li><p>初级轮播图功能介绍：</p><p>①左右两端有左右按钮；</p><p>②下方有小球指示当前是第几张图片；</p><p>③无切换效果；</p><p>④如果两秒中用户没有点击轮播图，则从左到右自动播放。</p></li></ul><p><img src="https://img.jbzj.com/file_images/article/202208/20228492020984.gif?20227492029" alt=""></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>HTML中需要包括一个大盒子class=wrap，为轮播图的盒子。一张一张的图片可以用无序列表存储，左右按钮使用button，下方圆点也用无序列表，并为每一个圆点设置计数器data-index。</p><h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a><strong>HTML部分</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pointList&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- data-index是自定义属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point active&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;leftBtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rightBtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a><strong>CSS部分</strong></h3><ol><li>给wrap盒子一个宽高，list盒子和它同宽同高</li><li>每一张图片充满盒子，并且都用绝对定位固定在wrap盒子里，让他们有不同的颜色，初始透明度都是0即全透明</li><li>哪个需要展示，哪个的z-index就变大，并且透明度改为1</li><li>左右按钮直接使用定位固定在左右两端，小圆点内部使用浮动，再用定位固定在下端</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 轮播图大盒子 */</span></span><br><span class="line">    <span class="selector-class">.wrap</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  */</span></span><br><span class="line">    <span class="selector-class">.list</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 每张图片 */</span></span><br><span class="line">    <span class="selector-class">.item</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* 透明度设为0 */</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 被激活的图片透明度设为1，且增大z-index */</span></span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 不同的图片不同的颜色 */</span></span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: yellowgreen</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 按钮设置 */</span></span><br><span class="line">    <span class="selector-class">.btn</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">200</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>,-<span class="number">50%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#leftBtn</span>&#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#rightBtn</span>&#123;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 小圆点的设置 */</span></span><br><span class="line">    <span class="selector-class">.pointList</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: fit-content;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.point</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="comment">/* 边框圆的程度 */</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="comment">/* 边框长度 */</span></span><br><span class="line">        <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">        <span class="comment">/* 实现边框 */</span></span><br><span class="line">        <span class="attribute">border-style</span>: solid;</span><br><span class="line">        <span class="comment">/* 圆圈边框颜色 */</span></span><br><span class="line">        <span class="attribute">border-color</span>: slategray;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.point</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: cadetblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Js部分"><a href="#Js部分" class="headerlink" title="Js部分"></a><strong>Js部分</strong></h3><ol><li>获取元素：包括图片、圆点、按钮、轮播图大盒子</li><li>需要一个变量index记录当前图片的索引，并且在每次点击的时候要先将样式清空，再根据索引重新赋值（排他思想）</li><li>点击左右按钮的时候，只需要判断是否为第一张或者最后一张，然后进行+1 -1操作即可</li><li>点击小圆点时，需要记录点击的圆点的data-index，赋值给Index，然后再执行</li><li>定义计时器，当鼠标在wrap内，就取消计时，不在wrap内，就开始计时，两秒以后自动播放</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 轮播图图片</span></span><br><span class="line">    <span class="keyword">let</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>)</span><br><span class="line">    <span class="comment">// 下方圆点</span></span><br><span class="line">    <span class="keyword">let</span> points = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.point&#x27;</span>)</span><br><span class="line">    <span class="comment">// 左右的按钮</span></span><br><span class="line">    <span class="keyword">let</span> leftBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#leftBtn&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> rightBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#rightBtn&#x27;</span>)</span><br><span class="line">    <span class="comment">// 轮播图盒子</span></span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.wrap&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要一个变量index记录当前图片的索引，并且在每次点击的时候要先将样式清空，再根据索引重新赋值（排他思想）</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 移除所有的active</span></span><br><span class="line">    <span class="keyword">var</span> removeActive = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            items[i].<span class="property">className</span> = <span class="string">&quot;item&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            points[i].<span class="property">className</span> = <span class="string">&quot;point&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若当前处于index时，赋予active</span></span><br><span class="line">    <span class="keyword">var</span> setActive = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">removeActive</span>()</span><br><span class="line">        items[index].<span class="property">className</span> = <span class="string">&quot;item active&quot;</span></span><br><span class="line">        points[index].<span class="property">className</span> = <span class="string">&quot;point active&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点击左边按钮改变index</span></span><br><span class="line">    <span class="keyword">var</span> goLeft = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 处于第一张的时候，按下跳到第五张</span></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">4</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置active</span></span><br><span class="line">        <span class="title function_">setActive</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点击右边按钮</span></span><br><span class="line">    <span class="keyword">var</span> goRight = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">4</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置active</span></span><br><span class="line">        <span class="title function_">setActive</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给按钮设置监听事件</span></span><br><span class="line">    leftBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">goLeft</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    rightBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">goRight</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 点击小圆点时，需要记录点击的圆点的data-index，赋值给Index，然后再执行</span></span><br><span class="line">    <span class="comment">// 给五个圆点都增加监听事件，用for循环进行一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; points.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        points[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pointIndex = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>)</span><br><span class="line">            index = pointIndex;</span><br><span class="line">            <span class="title function_">setActive</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义计时器，当鼠标在wrap内，就取消计时，不在wrap内，就开始计时，两秒以后自动播放。</span></span><br><span class="line">    <span class="keyword">var</span> timer</span><br><span class="line">    <span class="comment">// 设置一个定时器，每两秒触发一次goRight()函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">autoPlay</span>(<span class="params"></span>) &#123;</span><br><span class="line">        timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">goRight</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">autoPlay</span>()</span><br><span class="line">    <span class="comment">// 鼠标移入wrap清除计时器</span></span><br><span class="line">    wrap.<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;清除计时器&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鼠标移出wrap加入计时器</span></span><br><span class="line">    wrap.<span class="property">onmouseleave</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">autoPlay</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加入计时器&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/15/U8Ag1d.gif" alt=""></p><p>参考：<a href="https://www.jb51.net/article/257977.htm">https://www.jb51.net/article/257977.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原生Js手写轮播图&quot;&gt;&lt;a href=&quot;#原生Js手写轮播图&quot; class=&quot;headerlink&quot; title=&quot;原生Js手写轮播图&quot;&gt;&lt;/a&gt;原生Js手写轮播图&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
    <category term="HTML5" scheme="https://aliveseven.github.io/tags/HTML5/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="https://aliveseven.github.io/posts/20802113/"/>
    <id>https://aliveseven.github.io/posts/20802113/</id>
    <published>2022-09-13T16:01:28.826Z</published>
    <updated>2022-09-28T12:35:06.495Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h1><h2 id="HTML5部分"><a href="#HTML5部分" class="headerlink" title="HTML5部分"></a>HTML5部分</h2><h3 id="HTML5新特性有哪些"><a href="#HTML5新特性有哪些" class="headerlink" title="HTML5新特性有哪些"></a>HTML5新特性有哪些</h3><ol><li>Canvas绘图以及SVG绘图</li><li>语义化标签（header、nav、footer、article、section）</li><li>音频、视频（audio、video）API</li><li>拖放（Drag and drop）API</li><li>地理定位（Geolocation）</li><li>本地离线存储（localStorage），长期存储数据，关闭浏览器后不丢失。</li><li>会话储存（sessionStorage），数据在关闭浏览器后自动删除。</li></ol><h3 id="cookie与sessionStorage和localStorage的区别"><a href="#cookie与sessionStorage和localStorage的区别" class="headerlink" title="cookie与sessionStorage和localStorage的区别"></a>cookie与sessionStorage和localStorage的区别</h3><ol><li><p><strong>保存方式</strong></p><p>cookie存放在客户的浏览器上。</p><p>session都在客户端中保存，不参与服务器通讯。</p></li><li><p><strong>生命周期</strong></p><p>cookie可设置失效时间</p><p>localStorage除非手动清除否则永久保存</p><p>sessionStorage关闭当前页面或浏览器关闭后失效</p></li><li><p><strong>存储的大小</strong></p><p>cookie 4kb</p><p>session 5M</p></li><li><p><strong>共同点</strong></p><p>不能存储其他数据类型，只能存储<strong>字符串</strong>数据类型</p><p>如果一定要存储其他数据类型，转成 <strong>json 格式</strong>存储</p></li><li><p><strong>使用方法</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="literal">null</span>;</span><br><span class="line">storage.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>)   <span class="comment">//调用setItem方法存储数据</span></span><br><span class="line">storage.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>)            <span class="comment">//调用getItem方法获取key的值</span></span><br><span class="line">stroage.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>)        <span class="comment">//删除key对应的值</span></span><br><span class="line">stroage.<span class="title function_">clear</span>()                   <span class="comment">//清空数据</span></span><br></pre></td></tr></table></figure><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p><code>BFC</code>（Block Formatting Context），即块级格式化上下文，它是页面中一个独立的容器，容器中的元素不会影响到外面的元素。</p><h2 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a><strong>触发条件</strong></h2><p>触发<code>BFC</code>的条件包含不限于：</p><ul><li>根元素，即HTML元素</li><li>浮动元素：float值为left、right</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li><li>position的值为absolute或fixed</li></ul><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="CSS选择器的优先级排序"><a href="#CSS选择器的优先级排序" class="headerlink" title="CSS选择器的优先级排序"></a>CSS选择器的优先级排序</h3><h4 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h4><div class="table-container"><table><thead><tr><th>选择器</th><th>表现形式</th></tr></thead><tbody><tr><td>id</td><td>#id，例如：id=“name”，id=“password”</td></tr><tr><td>class</td><td>.class，例如：class=“name”，class=“password”</td></tr><tr><td>标签</td><td>例如：body、div、p、ul、li</td></tr><tr><td>属性</td><td>[type=‘text’]</td></tr><tr><td>伪类</td><td>:hover，例如：链接样式，a元素的伪类，有4种不同的状态：link、visited、active、hover。</td></tr><tr><td>相邻选择器、子代选择器</td><td>+、&gt;，例如：div &gt; p，带大于号 ’&gt;’</td></tr><tr><td>通配符选择器</td><td>*</td></tr></tbody></table></div><p>!important &gt; 行内样式 &gt; id选择器 &gt; 类选择器 || 伪类选择器 || 属性选择器 &gt; 标签选择器 || 伪元素选择器 &gt; 通配符选择器 || 子选择器 || 相邻选择器 &gt; 继承样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 第零等：!important，大过了其它任何设置。</span><br><span class="line">* 第一等：代表内联样式，如：style=&#x27;&#x27;，权值为1000。</span><br><span class="line">* 第二等：代表ID选择器，如：#content，权值为0100。</span><br><span class="line">* 第三等：代表类、伪类和属性选择器，如.content，权值为0010。</span><br><span class="line">* 第四等：代表标签选择器和伪元素选择器，如&lt;div&gt; &lt;p&gt;，权值为0001。</span><br><span class="line">* 第五等：通配符、子选择器、相邻选择器等的。如*、&gt;、+，权值为0000。</span><br><span class="line">* 第六等：继承的样式没有权值，通配选择器定义的规则优先级高于元素继承过来的规则的优先级。</span><br></pre></td></tr></table></figure><h3 id="垂直居中DIV"><a href="#垂直居中DIV" class="headerlink" title="垂直居中DIV"></a>垂直居中DIV</h3><p>请看这里<a href="https://aliveseven.github.io/posts/2566378a/">css之div盒子居中常用方法</a></p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ol><li><p><strong>父级盒子添加overflow方法</strong></p><p><strong>优点：</strong>简单、代码少、浏览器支持好</p><p><strong>缺点：</strong>内容被隐藏掉，无法显示需要溢出的元素，不能和position配合使用</p></li><li><p><strong>使用after伪元素清除浮动：</strong></p><p><strong>用法：</strong>给浮动元素父级增加 <code>.clearfix::after（content: ‘’; display: table; clear: both;）</code></p><p><strong>优点：</strong> 符合闭合浮动思想，结构语义化正确，不容易出现怪问题</p><p><strong>缺点：</strong> 由于IE6-7不支持<code>:after</code>，使用<code>zoom:1</code></p></li><li><p><strong>父级盒子定义height：</strong></p><p><strong>优点：</strong> 简单、代码少。</p><p><strong>缺点：</strong>只适合高度固定的布局，要给出精确的高度</p></li><li><p><strong>额外标签法：</strong></p><p><strong>用法：</strong> 在浮动元素后使用一个空元素，并在 CSS 中赋予<code>.clear&#123;clear:both;&#125;</code>属性即可清理浮动。</p><p><strong>优点：</strong> 通俗易懂，书写方便。</p><p><strong>缺点：</strong> 添加许多无意义的标签，结构化比较差。</p></li></ol><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ol><li><p>盒模型由内容(content)、内边距(padding)、边框(border)、外边距(margin)组成。</p></li><li><p>盒模型分为IE盒模型和W3C标准盒模型。</p></li><li><p>W3C标准盒模型又叫content-box，元素宽度/高度由border+padding+content组成。</p><p>（属性width,height只包含内容content，<strong>不包含</strong>border和padding）</p></li><li><p>IE盒模型又叫border-box，元素宽度/高度由content组成。</p><p>（属性width,height<strong>包含</strong>border和padding，指的是content+padding+border。）</p></li></ol><h3 id="padding和margin的区别"><a href="#padding和margin的区别" class="headerlink" title="padding和margin的区别"></a>padding和margin的区别</h3><ul><li>margin是盒子的外边距，即盒子与盒子之间的距离，而padding是内边距，是盒子的边与盒子内部元素的距离。</li><li>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔</li><li>margin用于布局，可以分开元素，使元素与元素互不相干；padding用于设置元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“呼吸距离”。</li></ul><p><img src="https://m1.im5i.com/2022/09/22/UFL47H.png" alt=""></p><h3 id="有哪些方式可以隐藏页面元素？区别"><a href="#有哪些方式可以隐藏页面元素？区别" class="headerlink" title="有哪些方式可以隐藏页面元素？区别?"></a>有哪些方式可以隐藏页面元素？区别?</h3><p>通过<code>css</code>实现隐藏元素方法有如下：</p><ul><li>display:none</li><li>visibility:hidden</li><li>opacity:0</li><li>设置height、width模型属性为0</li><li>position:absolute</li><li>clip-path</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">display: none</th><th style="text-align:left">visibility: hidden</th><th style="text-align:left">opacity: 0</th></tr></thead><tbody><tr><td style="text-align:left">页面中</td><td style="text-align:left">不存在</td><td style="text-align:left">存在</td><td style="text-align:left">存在</td></tr><tr><td style="text-align:left">重排</td><td style="text-align:left">会</td><td style="text-align:left">不会</td><td style="text-align:left">不会</td></tr><tr><td style="text-align:left">重绘</td><td style="text-align:left">会</td><td style="text-align:left">会</td><td style="text-align:left">不一定</td></tr><tr><td style="text-align:left">自身绑定事件</td><td style="text-align:left">不触发</td><td style="text-align:left">不触发</td><td style="text-align:left">可触发</td></tr><tr><td style="text-align:left">transition</td><td style="text-align:left">不支持</td><td style="text-align:left">支持</td><td style="text-align:left">支持</td></tr><tr><td style="text-align:left">子元素可复原</td><td style="text-align:left">不能</td><td style="text-align:left">能</td><td style="text-align:left">不能</td></tr><tr><td style="text-align:left">被遮挡的元素可触发事件</td><td style="text-align:left">能</td><td style="text-align:left">能</td><td style="text-align:left">不能</td></tr></tbody></table></div><h3 id="重绘和重排是什么？如何避免？"><a href="#重绘和重排是什么？如何避免？" class="headerlink" title="重绘和重排是什么？如何避免？"></a>重绘和重排是什么？如何避免？</h3><ol><li><strong>重排</strong>：当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</li><li><strong>重绘</strong>：当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，所以重绘跳过了创建布局树和分层的阶段。</li><li>重排需要重新计算布局树，重绘不需要，<strong>重排必定发生重绘</strong>，但是涉及到<strong>重绘不一定要重排</strong>。</li><li><strong>触发重排的方法</strong>： 页面初始渲染、添加/删除可见的DOM元素、改变元素位置、改变元素尺寸、改变元素内容、改变元素字体大小、改变浏览器窗口尺寸、设置 style 属性的值等。</li><li><strong>避免重排的方式</strong>：样式集中改变、使用 absolute 或 fixed 脱离文档流。</li></ol><h3 id="CSS中有哪些长度单位？"><a href="#CSS中有哪些长度单位？" class="headerlink" title="CSS中有哪些长度单位？"></a>CSS中有哪些长度单位？</h3><ol><li>绝对长度单位：<strong>px</strong></li><li>百分比: <strong>%</strong></li><li>相对父元素字体大小单位: <strong>em</strong></li><li>相对于根元素字体大小的单位: <strong>rem</strong></li><li>相对于视口<em>宽度的百分比（100vw即视窗宽度的100%）: <em>*vw</em></em></li><li>相对于视口<em>高度的百分比（100vh即视窗高度的100%）: <em>*vh</em></em></li></ol><h2 id="JavaScript和ES6部分"><a href="#JavaScript和ES6部分" class="headerlink" title="JavaScript和ES6部分"></a>JavaScript和ES6部分</h2><h3 id="ES6新特性？"><a href="#ES6新特性？" class="headerlink" title="ES6新特性？"></a>ES6新特性？</h3><ol><li>新增块级作用域，<strong>let</strong>定义变量和<strong>const</strong>定义常量</li><li>变量的解构赋值</li><li>箭头函数（=&gt;）</li><li>扩展运算符（…）</li><li>模块（import/export）</li><li>类（class/extends）</li><li>Promise</li><li>Proxy</li><li>Symbol</li><li>Set数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值</li><li>includes（）<strong>用于判断数组是否包含给定的值</strong> 返回一个布尔值</li><li>find（）<strong>用于找出第一个符合条件的数组成员</strong></li><li>findindex（）<strong>返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</strong></li></ol><h3 id="Set和Map的区别"><a href="#Set和Map的区别" class="headerlink" title="Set和Map的区别"></a>Set和Map的区别</h3><ol><li>Map是键值对，Set是值的集合，键和值可以是任何的值</li><li>Map可以通过get方法获取值，而Set不能因为它只有值，Set只能用has来判断，返回一个布尔值</li><li>Set的值是唯一的可以做数组去重，Map由于没有格式限制，可以做数据存储</li></ol><h3 id="闭包的理解和使用场景"><a href="#闭包的理解和使用场景" class="headerlink" title="闭包的理解和使用场景"></a>闭包的理解和使用场景</h3><ol><li><strong>理解：</strong>闭包就是函数中包含另一个函数，可以让你在函数外部读取到内部的变量（就是在函数内部再定义一个函数），让这些变量的值始终保持在内存中，可以达到延长变量生命周期的效果，过多使用会导致内存泄漏的问题。</li><li><strong>优点：</strong>可以避免全局变量造成污染。</li><li><strong>缺点：</strong>闭包会常驻内存，增加内存使用量，使用不当会造成内存泄漏。</li><li><strong>特征：</strong>（1）函数嵌套函数。（2）在函数内部可以引用外部的参数和变量。（3）参数和变量不会以垃圾回收机制回收。</li><li><strong>使用场景：</strong>（在创建私有变量和想延长变量的生命周期时会用到闭包）</li></ol><h3 id="JS获取HTML-DOM元素的方法"><a href="#JS获取HTML-DOM元素的方法" class="headerlink" title="JS获取HTML DOM元素的方法"></a>JS获取HTML DOM元素的方法</h3><ul><li>通过ID获取（getElementById）</li><li>通过name属性（getElementsByName）</li><li>通过标签名（getElementsByTagName）</li><li>通过类名（getElementsByClassName）</li><li>获取html的方法（document.documentElement）</li><li>获取body的方法（document.body）</li><li>通过选择器获取一个元素（querySelector）</li><li>通过选择器获取一组元素（querySelectorAll）</li></ul><h3 id="事件捕获和事件冒泡"><a href="#事件捕获和事件冒泡" class="headerlink" title="事件捕获和事件冒泡"></a>事件捕获和事件冒泡</h3><ol><li><strong>事件捕获：</strong>事件从文档根节点流向目标节点，途中会经过目标节点的各个父级节点，并在这些节点上触发捕获事件，直至到达事件的目标节点。</li><li><strong>事件冒泡：</strong>与事件捕获相反，事件会从目标节点流向文档根节点，途中会经过目标节点的各个父级节点，并在这些节点上触发捕获事件，直至到达文档的根节点。整个过程就像水中的气泡一样，从水底向上运动。</li><li>event.stopPropagation() 可以阻止事件流的进一步传播。</li></ol><p><img src="https://m1.im5i.com/2022/09/14/U83Q6v.png" alt=""></p><blockquote><p>注意：stopPropagation()会阻止事件捕获和事件冒泡，但是无法阻止标签的默认行为，例如点击链接任然可以打开对应网页。</p></blockquote><h3 id="Var、-let-、const-区别"><a href="#Var、-let-、const-区别" class="headerlink" title="Var、 let 、const 区别?"></a>Var、 let 、const 区别?</h3><ol><li><p><strong>变量提升：</strong></p><p><code>var</code>声明的变量存在变量提升，即变量可以在声明之前调用，值为<strong>undefined</strong></p><p><code>let</code>和<code>const</code>不存在变量提升，即它们所声明的变量一定要在声明后使用，否则<strong>报错</strong></p></li><li><p><strong>暂时性死区：</strong></p><p><code>var</code>不存在暂时性死区</p><p><code>let</code>和<code>const</code>存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</p></li><li><p><strong>块级作用域：</strong></p><p><code>var</code>不存在块级作用域</p><p><code>let</code>和<code>const</code>存在块级作用域</p></li><li><p><strong>重复声明：</strong></p><p><code>var</code>允许重复声明变量</p><p><code>let</code>和<code>const</code>在同一作用域不允许重复声明变量</p></li><li><p><strong>修改声明的变量：</strong></p><p><code>var</code>和<code>let</code>可以</p><p><code>const</code>声明一个只读的变量，一旦声明，就不能改变了</p></li><li><p><strong>使用：</strong></p><p>能用<code>const</code>的情况尽量使用<code>const</code>，其他情况下大多数使用<code>let</code>，避免使用<code>var</code></p></li></ol><h3 id="和-区别"><a href="#和-区别" class="headerlink" title="== 和 ===区别"></a>== 和 ===区别</h3><ul><li>相等操作符（==）会做类型转换，再进行值的比较，全等运算符(===)不会做类型转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;123&quot;</span> === <span class="number">123</span>); <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="number">123</span> === <span class="number">123</span>); <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure><ul><li><code>null</code> 和 <code>undefined</code> 比较，相等操作符（==）为 true，全等为 false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="literal">null</span>  === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><strong>相同点：</strong>都是判定两个<strong>值</strong>是否相等<br><strong>不同点：</strong>== 只比较<strong>值</strong>不比较<strong>类型</strong>，而 ===会判断<strong>类型</strong></li></ul><h3 id="什么是防抖和节流？"><a href="#什么是防抖和节流？" class="headerlink" title="什么是防抖和节流？"></a>什么是防抖和节流？</h3><ol><li><p><strong>防抖：</strong>n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p><p><strong>应用场景：</strong>提交按钮、用户注册时候的手机号验证、邮箱验证</p></li><li><p><strong>节流：</strong> n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</p><p><strong>应用场景：</strong>射击游戏中的mousedown、keydown事件，文字输入、自动完成的keyup事件</p></li></ol><p>电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是<strong>防抖</strong></p><p>电梯第一个人进来后，15秒后准时运送一次，这是<strong>节流</strong></p><h3 id="原型，原型链"><a href="#原型，原型链" class="headerlink" title="原型，原型链 ?"></a>原型，原型链 ?</h3><ol><li><p><strong>原型：</strong>每个函数对象都有一个 prototype 属性，这个属性就是函数的<strong>原型对象</strong>。 </p></li><li><p><strong>原型链：</strong>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的<code>__proto__</code><strong>隐式原型</strong>上查找，即它的<strong>构造函数</strong>的<code>prototype</code>，如果还没有找到就会再在<strong>构造函数</strong>的<code>prototype</code>的<code>__proto__</code>中查找，这样一层一层向上查找就会形成一个链式结构，我们称为<strong>原型链</strong>。</p></li><li><p><strong>注：</strong>原型链的形成是真正是靠<code>__proto__</code>而非prototype</p></li></ol><h3 id="深拷贝浅拷贝的区别？"><a href="#深拷贝浅拷贝的区别？" class="headerlink" title="深拷贝浅拷贝的区别？"></a>深拷贝浅拷贝的区别？</h3><ul><li><p><strong>浅拷贝</strong>：创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p></li><li><p><strong>深拷贝</strong>：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</p></li></ul><p>总而言之，<strong>浅拷贝</strong>改动拷贝的数组原数组也会变（慎用！项目中很多地方共用的数组都会变）。<strong>深拷贝</strong>修改新数组不会改到原数组。</p><p><strong>浅拷贝</strong>：</p><ol><li><strong>Object.assign()</strong></li><li>函数库lodash的 <strong>_.clone</strong> 方法</li><li>es6的展开运算符 <strong>…</strong></li><li><strong>Array.prototype.concat()</strong></li><li><strong>Array.prototype.slice()</strong></li></ol><p><strong>深拷贝</strong>：</p><ol><li><strong>JSON.parse(JSON.stringify())</strong></li><li>函数库lodash的 <strong>_.cloneDeep</strong> 方法</li><li>jQuery.extend()方法</li><li><strong>手写递归方法</strong></li></ol><h3 id="JavaScript中的数据类型？"><a href="#JavaScript中的数据类型？" class="headerlink" title="JavaScript中的数据类型？"></a>JavaScript中的数据类型？</h3><ol><li><strong>基本类型</strong></li></ol><ul><li><strong>Number</strong>:数值，包括整型和浮点型。</li><li><strong>String</strong>:字符型。</li><li><strong>Undefined</strong>:未定义，声明变量时未赋值。</li><li><strong>Null</strong>：定义为空或者不存在。</li><li><strong>Boolean</strong>：布尔值，true or false。</li><li><strong>Symbol</strong>：独一无二的值。</li></ul><ol><li><strong>引用数据类型</strong></li></ol><ul><li><strong>Object</strong>：对象。</li><li><strong>Array</strong>：数组。</li><li><strong>Function</strong>：函数。</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ol><li><strong>含义</strong>：<strong>异步编程</strong>的一种解决方案，用来<strong>解决回调地狱</strong>。</li><li><strong>三种状态</strong>：pending（进行中）、fulfilled（已成功）和rejected（已失败）</li><li><strong>resolved函数作用</strong>：将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved）。</li><li><strong>reject函数的作用</strong>：将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected）。</li><li>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</li></ol><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><ul><li>后退/刷新：GET无害，POST数据会被重新提交。</li><li>数据：GET一般是用来获取数据，POST提交数据。</li><li>数据类型：GET只允许ASCII字符，POST无限制。</li><li>数据大小：GET大小有限制（一般来说1024字节），POST理论上来说没有大小限制。</li><li>安全性：GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>可见性：GET参数通过URL传递对所有人可见，POST数据不可见。</li><li>历史保留：GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>书签：GET产生的URL地址可以被收藏为书签，而POST不可以。</li></ul><h3 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a><strong>增</strong></h4><ul><li>push() 接收任意数量的参数，并将它们添加到数组末尾</li><li>unshift() 开头添加</li><li>concat() 方法用于连接两个或多个数组。</li></ul><p><strong>实例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hege = [<span class="string">&quot;Cecilie&quot;</span>, <span class="string">&quot;Lone&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> stale = [<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> kai = [<span class="string">&quot;Robin&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> children = hege.<span class="title function_">concat</span>(stale,kai);</span><br></pre></td></tr></table></figure><p><strong><code>children</code>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cecilie,Lone,Emil,Tobias,Linus,Robin</span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a><strong>删</strong></h4><ul><li>pop() 删除数组的<strong>最后一项</strong></li><li>shift() 删除数组的<strong>第一项</strong></li><li>splice() 传入两个参数，分别是开始位置，删除元素的数量</li><li>slice() 可以用来从数组中提取元素，该方法<strong>不会改变元素数组</strong>，而是将截取到的元素封装到一个新数组返回</li></ul><h4 id="改"><a href="#改" class="headerlink" title="改"></a><strong>改</strong></h4><ul><li>splice() 方法用于添加或删除数组中的元素。</li></ul><p><strong>实例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;Lemon&quot;</span>,<span class="string">&quot;Kiwi&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong><code>fruits</code> 的输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Banana,Orange,Lemon,Kiwi,Apple,Mango</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>index</em></td><td style="text-align:left">必需。规定从何处添加/删除元素。 该参数是开始插入和（或）删除的数组元素的下标，必须是数字。</td></tr><tr><td style="text-align:left"><em>howmany</em></td><td style="text-align:left">可选。规定应该删除多少元素。必须是数字，但可以是 “0”。 如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td></tr><tr><td style="text-align:left"><em>item1</em>, …, <em>itemX</em></td><td style="text-align:left">可选。要添加到数组的新元素</td></tr></tbody></table></div><h4 id="查"><a href="#查" class="headerlink" title="查"></a><strong>查</strong></h4><ul><li>indexOf() 返回要查找的元素在数组中的位置，如果没找到则返回 -1</li><li>includes() 返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></li><li>find() 返回第一个匹配的元素</li></ul><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ol><li>利用ES6的<strong>…new Set()</strong>去重，最方便最简单</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">    <span class="comment">// 利用ES6 Set去重，最简单最方便</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="keyword">new</span> <span class="title class_">Set</span>(A))  <span class="comment">// 1 2 3 6 8 9</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>利用双重循环和splice()来去重</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 利用for循环和splice去重</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; A.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; A.<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] === A[j])&#123;</span><br><span class="line">                A.<span class="title function_">splice</span>(j,<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 删除之后，元素少了一个了，要减去1，重新遍历</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(A)  <span class="comment">// (6) [1, 2, 3, 6, 8, 9]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>利用indexOf去重，indexOf() 返回要查找的元素在数组中的位置，如果没找到则返回 -1。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">    <span class="comment">// 利用indexOf来去重</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断传过来的数据是不是数组，如果不是，控制台输出错误信息</span></span><br><span class="line">        <span class="comment">// 如果不是数组，Array.isArray(arr)为false，用反号把它变为true</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类型错误，不是数组&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是数组，新建一个新的数组来作为去重的数组</span></span><br><span class="line">        <span class="keyword">var</span> array = []</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 如果arr[i]不在新建的数组中，把它加进去，在就不加</span></span><br><span class="line">            <span class="keyword">if</span>(array.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>)&#123;</span><br><span class="line">                array.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将去重后的数组返回出去</span></span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(A)) <span class="comment">// (6) [1, 2, 3, 6, 8, 9]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：利用<strong>includes()</strong>也和<strong>indexOf()</strong>的方法差不多，includes() 返回要查找的元素在数&gt;组中的位置，找到返回<code>true</code>，否则<code>false</code></p></blockquote><h3 id="JS中new操作符有什么用？"><a href="#JS中new操作符有什么用？" class="headerlink" title="JS中new操作符有什么用？"></a>JS中new操作符有什么用？</h3><ul><li>创建临时对象，并将this指向临时对象</li><li>将构造函数的<strong>原型属性</strong>和<strong>方法</strong>挂载到新对象的<strong>proto</strong>(原型指针)上</li><li>return 临时对象</li></ul><h3 id="排序方式"><a href="#排序方式" class="headerlink" title="排序方式"></a>排序方式</h3><ol><li><strong>冒泡排序</strong>：比较所有相邻元素,如果第一个比第二个大，则交换它们。</li><li><strong>选择排序</strong>：找到数组中的最小值，选中它并将其放置在第一位。</li><li><strong>插入排序</strong>：从第二个数开始往前比，比它大就往后排。</li><li><strong>归并排序</strong>：把数组劈成两半，再递归地对数组进行“分”操作，直到分成一个个单独的数。</li><li><strong>快速排序</strong>：从数组中任意选择一个基准，所有比基准小的元素放到基准前面，比基准大的元素放到基准的后面。</li></ol><h2 id="Vue部分"><a href="#Vue部分" class="headerlink" title="Vue部分"></a>Vue部分</h2><h3 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h3><ul><li>通过数据劫持结合发布-订阅模式，通过Object.defineProperty()为各个属性定义get、set方法，在数据发生改变时，给订阅者发布消息，触发相应的事件回调</li></ul><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><ul><li>从创建、初始化数据、编译模板、挂载DOM、渲染-更新-渲染、卸载等一系列过程，称为为Vue 实例的生命周期。</li></ul><h3 id="Vue导航守卫的钩子函数有哪些"><a href="#Vue导航守卫的钩子函数有哪些" class="headerlink" title="Vue导航守卫的钩子函数有哪些"></a>Vue导航守卫的钩子函数有哪些</h3><p>全局守卫：</p><ul><li>router.beforeEach：全局前置守卫，进入路由之前</li><li>router.beforeResolve：全局解析守卫，在beforeRouteEnter调用之后调用</li><li>router.afterEach：全局后置钩子，进入路由之后</li></ul><p>路由守卫：</p><ul><li>beforeRouteEnter()：进入路由前</li><li>beforeRouteUpdate()：路由复用同一个组件时</li><li>beforeRouteLeave()：离开当前路由时</li></ul><h3 id="组件之间如何传值"><a href="#组件之间如何传值" class="headerlink" title="组件之间如何传值"></a>组件之间如何传值</h3><ol><li>Vue父子组件之间传值</li></ol><ul><li>子组件通过props来接受数据和通过<code>$emit</code>来触发父组件的自定义事件；</li></ul><ol><li>兄弟组件之间的传值</li></ol><ul><li>建一个公共组件bus.js.。传递方通过事件触发<code>bus.$emit</code>。接收方通过在mounted（）{}生命周期里触发<code>bus.$on</code>。</li></ul><ol><li>可以通过VUEX 来跨组件传参。</li></ol><h3 id="MVVM是什么"><a href="#MVVM是什么" class="headerlink" title="MVVM是什么"></a>MVVM是什么</h3><p>Model-View-ViewModel的缩写，把MVC中的Controller层变成ViewModel层，Model代表数据模型，View代表UI组件，MVVM实现了View层和Model层的自动同步，也即是我们不用手动操纵哦Dom元素</p><p>MVVM与MVC的区别有：</p><p><strong>MVVM与MVC的最大区别就是：它实现了View和Model的自动同步，也就是当Model的数据改变时，我们不用再自己手动操作Dom元素，来改变View的显示，而是改变数据后该数据对应View层显示会自动改变。MVVM并不是用VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现</strong></p><h3 id="路由之间如何传参"><a href="#路由之间如何传参" class="headerlink" title="路由之间如何传参"></a>路由之间如何传参</h3><ul><li>通过router-link路由导航跳转传递</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=`/a/$&#123;id&#125;`&gt;routerlink传参&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ul><li>跳转时使用push方法拼接携带参数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">        path: `/index/$&#123;id&#125;`,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><ul><li>通过路由属性中的name来确定匹配的路由，通过params来传递参数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">          name: &#x27;index&#x27;,</span><br><span class="line">          params: &#123;</span><br><span class="line">            id: id</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><ul><li>使用path来匹配路由，然后通过query来传递参数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">          path: &#x27;/index&#x27;,</span><br><span class="line">          query: &#123;</span><br><span class="line">            id: id</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="Route和router的区别"><a href="#Route和router的区别" class="headerlink" title="Route和router的区别"></a>Route和router的区别</h3><ol><li>router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，包含了所有的路由包含了许多关键的对象和属性。例如history对象。</li></ol><ul><li>$router.push({path:’/path’}); 本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录</li><li>$router.replace({path:’/path’}); 替换路由，没有历史记录</li></ul><ol><li>route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等。</li></ol><ul><li>$route.path<br>字符串，等于当前路由对象的路径，会被解析为绝对路径，如 “/index/” 。</li><li>$route.params<br>对象，包含路由中的动态片段和全匹配片段的键值对</li><li>$route.query<br>对象，包含路由中查询参数的键值对。例如，对于 /index?id=1 ，会得到 $route.query.id == 1。</li></ul><h3 id="Vue-路由跳转方式"><a href="#Vue-路由跳转方式" class="headerlink" title="Vue 路由跳转方式"></a>Vue 路由跳转方式</h3><ul><li><strong>router-link 标签跳转</strong></li><li><strong>this.$router.push()</strong></li><li><strong>this.$router.replace()</strong></li><li><strong>this.$router.go(n)</strong>：（0：当前页，-1上一页，+1下一页，n代表整数）</li></ul><h3 id="Vue中key是用来做什么的？为什么不推荐使用index作为key？"><a href="#Vue中key是用来做什么的？为什么不推荐使用index作为key？" class="headerlink" title="Vue中key是用来做什么的？为什么不推荐使用index作为key？"></a>Vue中key是用来做什么的？为什么不推荐使用index作为key？</h3><ol><li>key的作用主要就是为了高效的更新虚拟DOM，使用key值，它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素。它也可以用于强制替换元素/组件而不是重复的使用它。</li><li>当以数组的下标index作为index值时，其中一个元素（如增删改查）发生了变化就有可能导致所有元素的key值发生变化。</li></ol><h3 id="说出至少vue-3个常用事件修饰符"><a href="#说出至少vue-3个常用事件修饰符" class="headerlink" title="说出至少vue 3个常用事件修饰符?"></a>说出至少vue 3个常用事件修饰符?</h3><p>.stop 阻止点击事件冒泡</p><p>.prevent 阻止默认事件</p><p>.once 只执行一次</p><p>.self 只在元素本身触发</p><h3 id="vuex有哪几种属性"><a href="#vuex有哪几种属性" class="headerlink" title="vuex有哪几种属性"></a>vuex有哪几种属性</h3><ol><li>state：vuex的基本数据，用来存储变量。</li><li>mutation：提交更改数据，同步更新状态。</li><li>action：提交mutations，异步操作。</li><li>getter：是store的计算属性。</li><li>modules：模块化vuex，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端面试题&quot;&gt;&lt;a href=&quot;#前端面试题&quot; class=&quot;headerlink&quot; title=&quot;前端面试题&quot;&gt;&lt;/a&gt;前端面试题&lt;/h1&gt;&lt;h2 id=&quot;HTML5部分&quot;&gt;&lt;a href=&quot;#HTML5部分&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
    <category term="HTML5" scheme="https://aliveseven.github.io/tags/HTML5/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue中watch和computed的区别</title>
    <link href="https://aliveseven.github.io/posts/a6899595/"/>
    <id>https://aliveseven.github.io/posts/a6899595/</id>
    <published>2022-09-12T17:15:08.804Z</published>
    <updated>2022-09-12T17:26:34.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue中watch和computed的区别"><a href="#Vue中watch和computed的区别" class="headerlink" title="Vue中watch和computed的区别"></a>Vue中watch和computed的区别</h1><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><ol><li>computed 是基于响应性依赖来进行缓存的。<strong>只有依赖数据发生改变</strong>，才会重新进行计算，<strong>computed是计算属性的意思，watch是监听的意思。</strong></li><li><strong>不支持异步</strong>，当 computed 内有异步操作时无效，无法监听数据的变化的值。</li><li>如果函数所依赖的属性没有发生变化，从缓存中读取。</li><li>必须有return返回。</li><li>使用方法和data中的数据一样，但是类似一个执行方法。</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&quot;app&quot; class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;fullName&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el : &quot;.app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName : &#x27;Alive&#x27;,</span><br><span class="line">            lastName : &#x27;Seven&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 计算属性</span><br><span class="line">        computed : &#123;</span><br><span class="line">            // 定义一个fullName属性用于计算firstName+lastName，并且return出来</span><br><span class="line">            fullName()&#123;</span><br><span class="line">                return this.firstName + this.lastName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="实例结果："><a href="#实例结果：" class="headerlink" title="实例结果："></a>实例结果：</h3><ul><li>最左边的是firstName，中间的是lastName，最后的是经过computed计算return出来fullName</li></ul><p><img src="https://m1.im5i.com/2022/09/13/U8Jnmv.gif" alt=""></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><ol><li>只会监听数据的值是否发生改变，而不会去监听数据的地址是否发生改变，要深度监听需要配合deep：true属性使用</li><li>不支持缓存，数据变，直接会触发相应的操作</li><li>watch<strong>可以没有return</strong></li><li>watch中的函数是不需要调用的</li><li><strong>watch支持异步</strong></li><li>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li><li>监听数据必须是data中<strong>声明过</strong>或者父组件传递过来的props中的数据</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>computed 是计算属性</strong>，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容。 <strong>watch 监听到值的变化就会执行回调</strong>，在回调中可以进行一些逻辑操作。</li><li>computed函数不能有异步；watch可以</li><li>computed必须有return；watch可以没有</li><li>watch监听的数据要在data中声明过，computed可以不用</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue中watch和computed的区别&quot;&gt;&lt;a href=&quot;#Vue中watch和computed的区别&quot; class=&quot;headerlink&quot; title=&quot;Vue中watch和computed的区别&quot;&gt;&lt;/a&gt;Vue中watch和computed的区别&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2和Vue3的区别</title>
    <link href="https://aliveseven.github.io/posts/94db3a18/"/>
    <id>https://aliveseven.github.io/posts/94db3a18/</id>
    <published>2022-09-09T17:54:23.130Z</published>
    <updated>2022-09-12T05:04:05.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2和Vue3的区别"><a href="#Vue2和Vue3的区别" class="headerlink" title="Vue2和Vue3的区别"></a>Vue2和Vue3的区别</h1><h2 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h2><ol><li><strong>Vue2</strong>使用的是<strong>Object.defineProperty()</strong>进行数据劫持，结合<strong>发布订阅</strong>的方式实现。</li><li><strong>Vue3</strong>使用的是<strong>Proxy代理</strong>，使用<strong>ref或者reactive</strong>将数据转化为响应式数据</li></ol><h3 id="使用proxy代理的优势"><a href="#使用proxy代理的优势" class="headerlink" title="使用proxy代理的优势"></a>使用proxy代理的优势</h3><ol><li>defineProperty只能监听某个属性，不能对全对象监听</li><li>可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</li><li>可以监听数组，不用再去单独的对数组做特异性操作，通过Proxy可以直接拦截所有对象类型数据的操作。</li></ol><h2 id="数据和方法的定义"><a href="#数据和方法的定义" class="headerlink" title="数据和方法的定义"></a>数据和方法的定义</h2><ol><li><p>Vue2使用的是选项类型API（Options API），Vue3使用的是合成型API（Composition API）</p></li><li><p>Vue2：</p><p>data() { return {}; }, methods:{ }</p></li><li><p>Vue3：</p><p>数据和方法都定义在setup中，并return出来，在vue3中this是undefined，所以在setup中不能用this</p></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><div class="table-container"><table><thead><tr><th>vue2</th><th>vue3</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td><td>组件创建之前</td></tr><tr><td>created</td><td>setup()</td><td>组件创建完成</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>onMounted</td><td>组件挂载完成</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td><td>数据更新，虚拟DOM打补丁之前</td></tr><tr><td>updated</td><td>onUpdated</td><td>数据更新，虚拟DOM渲染完成</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td><td>组件销毁之前</td></tr><tr><td>destroyed</td><td>onUnmounted</td><td>组件销毁后</td></tr><tr><td>activated</td><td>onActivated</td><td></td></tr><tr><td>deactivated</td><td>onDeactivated</td></tr></tbody></table></div><h2 id="指令与插槽"><a href="#指令与插槽" class="headerlink" title="指令与插槽"></a>指令与插槽</h2><ol><li>vue2中使用slot可以直接使用slot,而vue3中必须使用v-slot的形式</li><li>v-for与v-if在vue2中优先级高的是v-for指令，vue3中v-if优先级更高</li><li>vue3中移除keyCode作为v-on的修饰符，当然也不支持config.keyCodes</li><li>vue3中移除v-on.native修饰符</li><li><strong>vue3中移除过滤器filter</strong></li><li>vue3在组件模板<code>&lt;template/&gt;</code>中，不需要跟根节点<code>&lt;div/&gt;</code>，就是说在组件可以拥有多个根节点。</li></ol><h2 id="Composition-API-组合API"><a href="#Composition-API-组合API" class="headerlink" title="Composition API (组合API)"></a>Composition API (组合API)</h2><p>Vue2和Vue3最大的区别就是Vue3使用了Composition API (组合api)</p><p>Vue2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">// 数据</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;&#125;,</span><br><span class="line">    // 方法</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    components:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;h</span><br></pre></td></tr></table></figure><p>Vue3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这样代码会更加简洁和整洁。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        // 数据 和 方法都在setup里面使用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="全局API改动"><a href="#全局API改动" class="headerlink" title="全局API改动"></a>全局API改动</h2><div class="table-container"><table><thead><tr><th>2.x 全局 API</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config</td><td>app.config</td></tr><tr><td>Vue.config.productionTip</td><td><em>removed</em> 已移除</td></tr><tr><td>Vue.config.ignoredElements</td><td>app.config.isCustomElement</td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.version</td><td>app.version</td></tr><tr><td>Vue.filter</td><td><em>removed</em> 已移除</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr><tr><td>Vue.extend</td><td><em>removed</em> 已移除</td></tr></tbody></table></div><blockquote><p><code>app</code>通过<code>createApp</code>方法创建。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const app = createApp(App);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>vue经历从2.0到3.0更新之后，简而言之就是变得更轻，更快，有更好的TypeScript支持，使用起来更加方便</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2和Vue3的区别&quot;&gt;&lt;a href=&quot;#Vue2和Vue3的区别&quot; class=&quot;headerlink&quot; title=&quot;Vue2和Vue3的区别&quot;&gt;&lt;/a&gt;Vue2和Vue3的区别&lt;/h1&gt;&lt;h2 id=&quot;数据双向绑定原理&quot;&gt;&lt;a href=&quot;#数据双向绑</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Android Fragment（底部导航）的使用</title>
    <link href="https://aliveseven.github.io/posts/f8b76465/"/>
    <id>https://aliveseven.github.io/posts/f8b76465/</id>
    <published>2022-09-09T15:24:11.506Z</published>
    <updated>2022-09-30T16:40:14.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Fragment（底部导航）的使用"><a href="#Android-Fragment（底部导航）的使用" class="headerlink" title="Android Fragment（底部导航）的使用"></a>Android Fragment（底部导航）的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Fragment 是 activity 的界面中的一部分或一种行为。</li><li>你可以把多个 Fragment 们组合到一个activity中来创建一个多面界面并且你可以在多个 activity 中重用一个Fragment。</li><li>你可以把 Fragment 认为模块化的一段activity，它具有自己的生命周期，接收它自己的事件，并可以在 activity 运行时被添加或删除。同时，使用 Fragment 可以 轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸，从手机到平板电脑。 Fragment 替代 TabActivity 做导航，性能更好。</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="开启viewBinding"><a href="#开启viewBinding" class="headerlink" title="开启viewBinding"></a>开启viewBinding</h3><ol><li>首先新建好项目之后，在<strong>build.gradle</strong>文件里面加入一行东西</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启viewBinding</span></span><br><span class="line">buildFeatures &#123;</span><br><span class="line">    viewBinding <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/08/UqGgOh.png" alt=""></p><ul><li>在设置这个之后，通过<strong>View Binding替换findViewById。</strong>，可以更好地进行视图绑定</li></ul><h3 id="新建底部导航选项"><a href="#新建底部导航选项" class="headerlink" title="新建底部导航选项"></a>新建底部导航选项</h3><ol><li>在res文件夹里面新建一个名叫<strong>menu</strong>的文件夹，再新建一个<strong>Menu Resource File</strong>，填好菜单名之后即可</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqejXy.png" alt=""></p><ol><li>再在res文件夹里面新建一个名叫<strong>navigation</strong>的文件夹，然后新建一个<strong>Navigation Resource File</strong>，填好新建文件名即可，这里我填了：mobile_navigation</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeZjh.png" alt=""></p><p><img src="https://m1.im5i.com/2022/09/10/Uqeh9X.png" alt=""></p><ol><li>新建好文件之后，关掉再重新双击mobile_navigation，应该会弹出个警告，我们点OK就行了，弄好之后页面应该是下面这样的。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqecnM.png" alt=""></p><h3 id="新建导航页面"><a href="#新建导航页面" class="headerlink" title="新建导航页面"></a>新建导航页面</h3><ol><li>这里我们新建三个空页面作为底部导航要切换的Fragment页面</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqeq53.png" alt=""></p><ol><li>对三个空页面加个text元素作区别</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqe8w7.png" alt=""></p><ol><li>点击menu，增加底部导航选项item，<strong>注意：item的id必须与导航图mobile_navigation.xml中对应节点（fragment）的id一致（相同）</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeVip.png" alt=""></p><ol><li>返回主页面，找到<strong>NavHostFragment</strong>控件，增加，作为导航切换的地方。增加<strong>BottomNavigationView</strong>控件，增加，作为导航切换的底部选项栏。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeWcv.png" alt=""></p><ol><li>选择对应的导航xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJTvf.png" alt=""></p><ol><li>回到menu.xml文件，给每个item增加导航icon和id，注意：id必须与导航图<strong>mobile_navigation.xml</strong>中对应节点（fragment）的id一致（相同），<strong>id的格式为 @+id 加上导航页面节点的id</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ39h.png" alt=""></p><ol><li>回到主页面，点击<strong>BottomNavigationView</strong>，找到<strong>menu</strong>选项，加入我们刚刚配置好的menu.xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ41X.png" alt=""></p><p><img src="https://m1.im5i.com/2022/09/10/UqJX5M.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-Fragment（底部导航）的使用&quot;&gt;&lt;a href=&quot;#Android-Fragment（底部导航）的使用&quot; class=&quot;headerlink&quot; title=&quot;Android Fragment（底部导航）的使用&quot;&gt;&lt;/a&gt;Android Fra</summary>
      
    
    
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/Java/"/>
    
    <category term="Android" scheme="https://aliveseven.github.io/categories/Java/Android/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Linux、MySQL、Git常用命令</title>
    <link href="https://aliveseven.github.io/posts/f3b9a43e/"/>
    <id>https://aliveseven.github.io/posts/f3b9a43e/</id>
    <published>2022-09-08T08:28:52.217Z</published>
    <updated>2022-09-08T17:11:31.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux、MySQL、Git常用命令"><a href="#Linux、MySQL、Git常用命令" class="headerlink" title="Linux、MySQL、Git常用命令"></a>Linux、MySQL、Git常用命令</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><ol><li><strong>pwd</strong> //显示当前工作目录</li><li><strong>mkdir</strong> mydir  //创建工作目录</li><li><strong>cd</strong> mydir  //更改工作目录</li><li><strong>rmdir</strong> mydir //删除工作目录</li><li><strong>touch</strong> myfile  //创建文件</li><li><strong>mv</strong> myfile mydir  //移动目录或文件</li><li><strong>cp</strong> myfile myfir  //复制目录或文件</li><li><strong>rm</strong> -rf mydir  //删除目录或文件</li><li><strong>ls</strong> //列出所有文件和目录</li><li><strong>ls -a</strong> //查看所有文件</li><li><strong>ls -l</strong> //详细显示</li></ol><h3 id="文件内容显示和处理"><a href="#文件内容显示和处理" class="headerlink" title="文件内容显示和处理"></a>文件内容显示和处理</h3><ol><li><strong>cat</strong> &gt; myfile  //创建文件并编辑内容（ctrl+D结束编辑）</li><li><strong>cat -n</strong> myfile  //查看文件</li><li><strong>sort</strong> myfile  //对文件内容进行排序</li><li><strong>sort -r</strong> myfile  //逆序</li><li><strong>uniq</strong> myfile  //检查文件中的重复内容</li><li><strong>cut</strong> -b(-c)(-d) 2(3) myfile  //对文件内容进行剪切</li><li><strong>paste</strong> myfile02 myfile01 //对文件内容进行粘贴 02-）01</li></ol><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ol><li><strong>zip</strong> myfile.zip myfile  //压缩</li><li><strong>zip -d</strong> myfile.zip myfile  //添加</li><li><strong>zip -m</strong> myfile.zip myfile  //删除</li><li><strong>unzip -o</strong> myfile.zip  //解压（覆盖）</li><li><strong>unzip -n</strong> myfile.zip  //解压（不覆盖）</li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li><strong>create</strong> database name  //创建数据库</li><li><strong>use</strong> database name  // 选择数据库</li><li><strong>drop</strong> database name // 直接删除数据库，不提醒</li><li><p><strong>insert into</strong> 表名(列1，列2，列3，列4，…) values(值，值，值)  // 增 Insert</p><ul><li>例子 ：insert into student(name,sex,age) values(‘张三’，18，’男’)</li></ul></li><li><strong>delete from</strong> 表名 <strong>where</strong> 列=值                                           <strong>// 删delete</strong><ul><li>例子 ：<strong>delete from</strong> student where id=1</li></ul></li><li><strong>update</strong> 表名 set 列=值，列=值，…. where…                    <strong>// 改 update</strong><ul><li>例子 ：<strong>update</strong> student <strong>set</strong> name = ‘张三’ <strong>where</strong> id=1 </li></ul></li><li><strong>select</strong> <em> from 表名                                                                 <em>*// 查询所有</em></em><ul><li>例子：<strong>select</strong> * from student(查询student表中所有列)</li><li>例子2  ：<strong>select</strong> * from student where id =1(表示查询student表中id=1的学生的所有列)</li><li>#去重查询 <strong>DISTINCT</strong>。例子：查询出表当中有哪些性别  SELECT <strong>DISTINCT</strong> sex FROM student</li><li>模糊查询，使用<strong>like</strong>。select <em> from student where name <em>*like</em></em> ‘%王’ 表示模糊查询name以王结束的</li><li>排序查询 <strong>ORDER BY</strong> 倒序关键字<strong>DESC</strong></li></ul></li></ol><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>git init  // 初始化</li><li>git add // 在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动</li><li>git commit -m “提交的备注信息”  // 提交到仓库</li><li>git remote add origin git@github.com:帐号名/仓库名.git  //  远程仓库</li><li>git push -u origin master  //  将本地分支的更新内容，全部推送至远程仓库 master 分支</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux、MySQL、Git常用命令&quot;&gt;&lt;a href=&quot;#Linux、MySQL、Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Linux、MySQL、Git常用命令&quot;&gt;&lt;/a&gt;Linux、MySQL、Git常用命令&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Linux" scheme="https://aliveseven.github.io/tags/Linux/"/>
    
    <category term="MySQL" scheme="https://aliveseven.github.io/tags/MySQL/"/>
    
    <category term="git" scheme="https://aliveseven.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础</title>
    <link href="https://aliveseven.github.io/posts/dc8ffbe9/"/>
    <id>https://aliveseven.github.io/posts/dc8ffbe9/</id>
    <published>2022-09-07T18:04:53.056Z</published>
    <updated>2022-09-28T16:33:53.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="TypeScript基础"><a href="#TypeScript基础" class="headerlink" title="TypeScript基础"></a>TypeScript基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TS是JS的超集，所以JS基础的类型都包含在内</p><ul><li><strong>首先安装 npm install typescript -g</strong></li></ul><p>安装完之后，运行<strong>tsc -v</strong>可以看到当前ts的版本号</p><ul><li>nodejs环境执行ts文件</li><li><strong>npm i @types/node —save-dev </strong>（node环境支持的依赖必装）</li><li><strong>npm i ts-node —g</strong></li></ul><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>基础类型：Boolean、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的 Symbol 和 ES10 的 BigInt。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>用string来定义，其中可以用`来定义ES6中的模板字符串，${expr}用来表示在模板字符串中的嵌入表达式。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str : <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 : <span class="built_in">string</span> = <span class="string">`web <span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li>支持十六<a href="https://so.csdn.net/so/search?q=进制&amp;spm=1001.2101.3001.7020">进制</a>、十进制、八进制和二进制；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notANumber : <span class="built_in">number</span> = <span class="title class_">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> num : <span class="built_in">number</span> = <span class="number">1234</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> infinityNumber : <span class="built_in">number</span> = <span class="title class_">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> decimal : <span class="built_in">number</span> = <span class="number">8</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> hex : <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> binary : <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> octal : <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//八进制s</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b : <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 : <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b3 : <span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个Boolean对象</span></span><br><span class="line"><span class="keyword">let</span> b4 : <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a>空值类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n : <span class="built_in">void</span> = <span class="literal">undefined</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m : <span class="built_in">void</span> = <span class="literal">null</span> <span class="comment">// 严格模式下不允许</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,m) <span class="comment">// undefined,null</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空类型函数，不需要return</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) : <span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></li></ul><h4 id="void和undefined和null的区别"><a href="#void和undefined和null的区别" class="headerlink" title="void和undefined和null的区别"></a>void和undefined和null的区别</h4><ul><li>void类型不能赋值为undefined</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写会报错 void类型不可以分给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样是没问题的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br><span class="line"> </span><br><span class="line"><span class="comment">//或者这样的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><hr><p>注意：如果你配置了tsconfig.json 开启了严格模式，<strong>null 不能 赋予 void 类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><ul><li>没有特定要哪个类型的时候，可以用any进行声明，而且可以随意切换类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">any</span> = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;AliveSeven&#x27;</span></span><br><span class="line">a = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>声明变量的时候没有指定任意类型默认为any</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">a = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;Aliving&#x27;</span></span><br><span class="line">a = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注意：如果使用any 就失去了TS类型检测的作用</p><p>TypeScript 3.0中引入的 <strong>unknown</strong> 类型，它是<strong>any</strong>类型对应的安全类型，比<strong>any</strong>更安全。</p><ul><li>unknown类型比any更加严格当你要使用any 的时候可以尝试使用unknow</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span>;</span><br><span class="line"> </span><br><span class="line">value = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">value = [];               <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br><span class="line"><span class="comment">//unknown类型不能赋值给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样就没问题 any类型是可以的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">any</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a   </span><br><span class="line"> </span><br><span class="line"><span class="comment">//unknown可赋值对象只有unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bbb</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aaa</span>:<span class="built_in">any</span>= <span class="string">&#x27;456&#x27;</span></span><br><span class="line"> </span><br><span class="line">aaa = bbb</span><br></pre></td></tr></table></figure><h2 id="接口和对象类型"><a href="#接口和对象类型" class="headerlink" title="接口和对象类型"></a>接口和对象类型</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>在ts中，我们定义对象的方式要用<strong>interface</strong>（接口）。</li><li>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种<strong>限制和规范</strong>的作用。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span></span><br><span class="line"><span class="comment">//使用接口约束的时候不能多一个属性也不能少一个属性</span></span><br><span class="line"><span class="comment">//必须与接口保持一致</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;213&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同名的接口，会合并</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名interface  可以合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,age : 20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>B接口继承了A接口，那么B接口的对象要有A接口的变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">interface</span> A&#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A&#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> obj : B = &#123;</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line">    name : <span class="string">&quot;AliveSeven&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)  <span class="comment">// &#123; age: 20, name: &#x27;AliveSeven&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="可选属性：-操作符"><a href="#可选属性：-操作符" class="headerlink" title="可选属性：?操作符"></a>可选属性：?操作符</h3><ul><li>?操作符用于声明<strong>可有可无的</strong>变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性的含义是该属性可以不存在</span></span><br><span class="line"><span class="comment">//所以说这样写也是没问题的</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    b?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意属性-propName-string"><a href="#任意属性-propName-string" class="headerlink" title="任意属性 [propName: string]"></a>任意属性 [propName: string]</h3><p>注意：<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这个例子当中我们看到接口中并没有定义sex但是并没有报错</span></span><br><span class="line"><span class="comment">//应为我们定义了[propName: string]: any;</span></span><br><span class="line"><span class="comment">//允许添加新的任意属性</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,sex : &#x27;boy&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h3><ul><li>readonly 只读属性是不允许被赋值的只能读取</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的</span></span><br><span class="line"><span class="comment">//因为sex是只读的不允许重新赋值</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">a.<span class="property">sex</span> = <span class="string">&#x27;girl&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="增加函数"><a href="#增加函数" class="headerlink" title="增加函数"></a>增加函数</h3><ul><li>接口里面可以声明函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="title function_">exam</span>() : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    <span class="attr">exam</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name: &#x27;AliveSeven&#x27;, sex: &#x27;boy&#x27;, exam: [Function: exam] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><ul><li>常见的声明数组方法👇</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   <span class="comment">// 数字类型数组</span></span><br><span class="line"><span class="keyword">let</span> b : <span class="built_in">string</span>[] = [<span class="string">&#x27;Alive&#x27;</span>,<span class="string">&#x27;Seven&#x27;</span>]  <span class="comment">//字符串类型数组</span></span><br><span class="line"><span class="keyword">let</span> c : <span class="built_in">boolean</span>[] = [<span class="literal">true</span> , <span class="literal">false</span>]  <span class="comment">// 布尔类型数组</span></span><br><span class="line"><span class="keyword">let</span> d : <span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Love&#x27;</span>,<span class="literal">true</span>]   <span class="comment">// 任意类型数组</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)  <span class="comment">// [ 1, 2, 3 ] [ &#x27;Alive&#x27;, &#x27;Seven&#x27; ] [ true, false ] [ 1, 2, &#x27;Love&#x27;, true ]</span></span><br></pre></td></tr></table></figure><ul><li>数组泛型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr : <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">66</span> , <span class="number">77</span> , <span class="number">88</span>]</span><br><span class="line"><span class="keyword">let</span> str : <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Love&#x27;</span> , <span class="string">&#x27;You&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> x : <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span>&gt; = [<span class="literal">true</span> , <span class="literal">false</span>]</span><br><span class="line"><span class="keyword">let</span> y : <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; = [<span class="number">1</span> , <span class="literal">true</span> , <span class="string">&#x27;Fly&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="keyword">let</span> z : <span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;&gt; = [[<span class="number">1</span> , <span class="number">2</span> , <span class="string">&#x27;Alive&#x27;</span>] , [<span class="number">66</span> , <span class="string">&#x27;Seven&#x27;</span> , <span class="string">&#x27;77&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr,str,x,y) <span class="comment">//  [ 66, 77, 88 ] [ &#x27;Love&#x27;, &#x27;You&#x27; ] [ true, false ] [ 1, true, &#x27;Fly&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z)  <span class="comment">// [ [ 1, 2, &#x27;Alive&#x27; ], [ 66, &#x27;Seven&#x27;, &#x27;77&#x27; ] ]</span></span><br></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    [index : <span class="built_in">number</span>] : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// [ 1,2,3,4 ]</span></span><br></pre></td></tr></table></figure><h3 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">//错误的arguments 是类数组不能这样定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) </span><br><span class="line">    <span class="comment">//ts内置对象IArguments 定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">IArguments</span> = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArguments</span> &#123;</span><br><span class="line">[<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line"><span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><ul><li>fn = (函数变量1 , 函数变量2 …) : 函数类型 =&gt; { 函数返回值 }</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn = (函数变量1 , 函数变量2 , 可选函数变量3 ) : 函数类型 =&gt; &#123; 函数返回值 &#125;</span></span><br><span class="line"><span class="keyword">const</span> fn = (name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex? : <span class="built_in">string</span>) : <span class="function"><span class="params">string</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (name + age + sex)  <span class="comment">// 返回name+age+sex组合字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : <span class="built_in">string</span> = <span class="title function_">fn</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// AliveSeven20undefined</span></span><br></pre></td></tr></table></figure><ul><li>可以接口来约束方法变量和类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = (a : A) : <span class="function"><span class="params">A</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x : A = &#123; name : <span class="string">&#x27;步君&#x27;</span> , age : <span class="number">21</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( x ) <span class="comment">// &#123; name: &#x27;步君&#x27;, age: 21 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul><li>重载是<strong>方法名字相同</strong>，而<strong>参数不同</strong>，返回类型可以相同也可以不同。</li><li>参数类型不同时，应设置为 <strong>any</strong>。</li><li>参数数量不同时，可以将不同的参数设置为<strong>可选</strong>。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">string</span>, params2: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">any</span>, params2?: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params2)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>,<span class="number">456</span>)</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span></span><br><span class="line"><span class="comment">//所以我们就可以使用联合类型支持座机字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写是会报错的因为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>函数使用联合类型：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="attr">something</span>:<span class="built_in">number</span> | <span class="built_in">boolean</span>):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> !!something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><ul><li><p>多种类型的集合，联合对象将具有所联合类型的所有成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Boy</span>&#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">AliveSeven</span> = (<span class="params">boy: People &amp; Boy</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">age</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">height</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">sex</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AliveSeven</span>(&#123;<span class="attr">age</span>: <span class="number">21</span>,<span class="attr">height</span>: <span class="number">180</span>,<span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 21</span></span><br><span class="line"><span class="comment">// 180 </span></span><br><span class="line"><span class="comment">// male</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">       <span class="attr">run</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">       <span class="attr">build</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">type</span> <span class="keyword">as</span> A).<span class="property">run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以使用类型断言来推断他传入的是A接口的值</span></span><br></pre></td></tr></table></figure><h3 id="使用any临时断言"><a href="#使用any临时断言" class="headerlink" title="使用any临时断言"></a>使用any临时断言</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">abc</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span></span><br></pre></td></tr></table></figure><h2 id="as-const"><a href="#as-const" class="headerlink" title="as const"></a>as const</h2><ul><li><p>是对字面值的<strong>断言</strong>，与const直接定义常量是有区别的</p></li><li><p>如果是普通类型跟直接const 声明是一样的</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="string">&#x27;AliveSeven&#x27;</span></span><br><span class="line">A = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> B = <span class="string">&#x27;AliveSeven&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">B = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">10</span>, <span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">a1.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span></span><br><span class="line">a2.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 通过，没有修改指针</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h3><ul><li>Boolean、Number、String、RegExp、Date、Error</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;我是步君&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;错误!&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br></pre></td></tr></table></figure><h3 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h3><p>Document、HTMLElement、Event、NodeList等</p><h3 id="定义Promise"><a href="#定义Promise" class="headerlink" title="定义Promise"></a>定义Promise</h3><p>如果我们不指定<strong>返回类型</strong>TS是推断不出来返回的是什么类型</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mq14ec5uj30wd09vtew.jpg" alt=""></p><p>指定返回的类型，这里指定为Number</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mr6jocakj30xg09w44u.jpg" alt=""></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params"></span>) : <span class="title class_">Promise</span>&lt;<span class="title class_">Number</span>&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Number</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="title function_">reject</span>(<span class="number">0</span>)    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><h3 id="在Ts中定义类"><a href="#在Ts中定义类" class="headerlink" title="在Ts中定义类"></a>在Ts中定义类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行函数</span></span><br><span class="line">    run () &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</li></ul><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 默认为public，内外部都能访问</span></span><br><span class="line">    <span class="keyword">public</span> name : <span class="built_in">string</span></span><br><span class="line">    <span class="comment">// private修饰符，代表定义的变量私有的只能在内部访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">private</span> age : <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// protected修饰符，代表定义的变量私有的只能在内部和继承的子类中访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">protected</span> sex : <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 静态属性不需要new，可以直接通过类名调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">GPA</span> : <span class="built_in">number</span> = <span class="number">3.5</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex : <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AliveSeven</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// age只能在Person内部访问，这样写会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// sex只能在Person类或者其子类里面访问，同样报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">sex</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mr6t15kyj30ms05v77b.jpg" alt=""></p><h3 id="静态属性static"><a href="#静态属性static" class="headerlink" title="静态属性static"></a>静态属性static</h3><ul><li>在类中用static关键字声明的变量是静态属性，在constructor不能直接用this去访问，只能通过类名去调用。</li><li>同样用static声明的函数也不能用this去调用，也是通过类名调用</li><li>如果两个函数都是static 静态的是可以通过this互相调用</li></ul><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mseoj38rj30i3052gn0.jpg" alt=""></p><p><strong>完整代码：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 默认为public，内外部都能访问</span></span><br><span class="line">    <span class="keyword">public</span> name : <span class="built_in">string</span></span><br><span class="line">    <span class="comment">// private修饰符，代表定义的变量私有的只能在内部访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">private</span> age : <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// protected修饰符，代表定义的变量私有的只能在内部和继承的子类中访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">protected</span> sex : <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 静态属性不需要new，可以直接通过类名调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">GPA</span> : <span class="built_in">number</span> = <span class="number">3.5</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex : <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果两个函数都是static 静态的是可以通过this互相调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">A</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am Aliving&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;Alive7&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">        <span class="comment">// 子类可以访问protected的属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继承子类：&#x27;</span>,<span class="variable language_">this</span>.<span class="property">sex</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AliveSeven</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">GPA</span>)</span><br></pre></td></tr></table></figure><h3 id="interface-定义类"><a href="#interface-定义类" class="headerlink" title="interface 定义类"></a>interface 定义类</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mscf457tj30lv0aon13.jpg" alt=""></p><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="keyword">type</span> : <span class="built_in">boolean</span>) :<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="title function_">set</span>():<span class="built_in">void</span></span><br><span class="line">    <span class="variable constant_">AI</span> : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Alive&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类D继承类C，并且实现接口A和B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_ inherited__">C</span> <span class="keyword">implements</span> A,B&#123;</span><br><span class="line">    <span class="comment">// 接口B需要AI属性</span></span><br><span class="line">    <span class="attr">AI</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">AI</span> = <span class="string">&#x27;Aliving&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接口A有get方法需要实现</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">boolean</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接口B有set方法需要实现</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</p><p>下面这段代码会<strong>报错</strong>抽象类无法被实例化</p><p><strong>实例1：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><p><strong>实例2：</strong></p><p>我们在A类定义了 getName 抽象方法但为实现</p><p>我们B类实现了A定义的抽象方法，如不实现就不报错，<strong>我们定义的抽象方法必须在派生类实现</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">print</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(<span class="string">&#x27;AliveSeven&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">getName</span>()); <span class="comment">// AliveSeven</span></span><br></pre></td></tr></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><ul><li><strong>元组（Tuple）是固定数量的不同类型的元素的组合</strong></li><li>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="keyword">readonly</span> [<span class="built_in">number</span>,<span class="built_in">boolean</span>,<span class="built_in">string</span>,<span class="literal">undefined</span>] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">&#x27;sring&#x27;</span>,<span class="literal">undefined</span>]</span><br><span class="line"><span class="comment">// arr[0]的类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(arr[<span class="number">0</span>]))  <span class="comment">// number</span></span><br><span class="line"><span class="comment">// arr[1]的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>].<span class="property">length</span>)  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>例如：红绿蓝 Red = 0，Green = 1，Blue= 2，分别代表红色0，绿色为1，蓝色为2</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认就是从0开始的 可以不写值</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增长枚举"><a href="#增长枚举" class="headerlink" title="增长枚举"></a>增长枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">Green</span>,</span><br><span class="line">   <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们定义了一个数字枚举， Red使用初始化为 <code>1</code>。 其余的成员会从 <code>1</code>开始自动增长。 换句话说， Type.<code>Red</code>的值为 <code>1</code>， <code>Green</code>为 <code>2</code>， <code>Blue</code>为 <code>3</code>。</p><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><ul><li>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。</li></ul><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><ul><li>枚举可以混合字符串和数字成员</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口枚举"><a href="#接口枚举" class="headerlink" title="接口枚举"></a>接口枚举</h3><p>定义一个枚举Types，定义一个接口A，他有一个属性<code>red</code>值为<code>Types.yyds</code></p><p>声明对象的时候要遵循这个规则</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">   yyds,</span><br><span class="line">   dddd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:A = &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><p>let 和 var 都是不允许声明枚举enum的，只能使用const。</p><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格，这时我们可以用const枚举</p><ul><li>const 声明的枚举会被编译成常量</li><li>普通声明的枚举编译完后是个对象</li></ul><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = <span class="number">2</span>,</span><br><span class="line">    C = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据枚举的值name映射得到value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Types</span>.<span class="property">A</span>)  <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 根据枚举的value映射得到name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Types</span>[<span class="number">1</span>])  <span class="comment">// C</span></span><br></pre></td></tr></table></figure><h2 id="类型推论-类型别名"><a href="#类型推论-类型别名" class="headerlink" title="类型推论 | 类型别名"></a>类型推论 | 类型别名</h2><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>我声明了一个变量但是没有定义类型。</p><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p><p>比如我声明一个str变量是’Alive’，所以TS帮我推断出来这是一个string类型。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mscxvdeuj309402374j.jpg" alt=""></p><p>我们在后面不能再给这个str赋值给别的类型的值。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfe9xz0j30eo041jsj.jpg" alt=""></p><p>如果你声明变量没有定义类型也没有赋值这时候TS会推断成any类型可以进行任何操作。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfmofrsj30lv07sgnf.jpg" alt=""></p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p><code>type</code> 关键字（可以给一个类型定义一个名字）多用于符合类型</p><p>定义<strong>类型</strong>别名：</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfs5yhfj30ki091jub.jpg" alt=""></p><p> 定义<strong>函数</strong>别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="function">() =&gt;</span> <span class="string">&quot;AliveSeven&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// [Function: s]</span></span><br></pre></td></tr></table></figure><p> 定义<strong>联合类型</strong>别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="number">123</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>: str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,s2);  <span class="comment">// 123  123</span></span><br></pre></td></tr></table></figure><p>定义<strong>值</strong>的别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//变量A的值  只能是上面value定义的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">A</span>:value = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h2><p>TypeScript 将使用 never 类型来表示不应该存在的状态</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfxgc2qj30je0dejv7.jpg" alt=""></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A同时为number和string，这是不可能发生的事情，所以A为never</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span> &amp; <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) : <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="never-与-void-的差异"><a href="#never-与-void-的差异" class="headerlink" title="never 与 void 的差异"></a>never 与 void 的差异</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void类型只是没有返回值 但本身不会出错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Void</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;空&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只会抛出异常没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Never</span>(<span class="params"></span>):<span class="built_in">never</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;NEVER&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>比如当我们新增了一个C接口，我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG。</p><p>而且这将是一个“隐蔽型”的BUG，如果回归面不够广，很难发现此类BUG。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;A类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;B类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;C类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">All</span> = A | B</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">val : All</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span> ( val.<span class="property">type</span> )&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A类&#x27;</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B类&#x27;</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="comment">// 一般进不来这一步，进来就是程序异常了</span></span><br><span class="line">            <span class="keyword">const</span> check : <span class="built_in">never</span> = val</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于任何类型都不能赋值给 <code>never</code> 类型的变量，所以当存在进入 <code>default</code> 分支的可能性时，TS的类型检查会及时帮我们发现这个问题。</p><h2 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>自ECMAScript 2015起，<code>symbol</code>成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。</p><p><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>); <span class="comment">// 可选的字符串key</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2) <span class="comment">// Symbol(key)</span></span><br></pre></td></tr></table></figure><h3 id="Symbols是不可改变且唯一的。"><a href="#Symbols是不可改变且唯一的。" class="headerlink" title="Symbols是不可改变且唯一的。"></a>Symbols是不可改变且唯一的。</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">sym2 === sym3; <span class="comment">// false, symbols是唯一的</span></span><br></pre></td></tr></table></figure><h3 id="用做对象属性的键"><a href="#用做对象属性的键" class="headerlink" title="用做对象属性的键"></a>用做对象属性的键</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sym]: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]); <span class="comment">// &quot;value&quot;</span></span><br></pre></td></tr></table></figure><h3 id="symbol属性，不能通过如下方式遍历拿到"><a href="#symbol属性，不能通过如下方式遍历拿到" class="headerlink" title="symbol属性，不能通过如下方式遍历拿到"></a>symbol属性，不能通过如下方式遍历拿到</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj= &#123;</span><br><span class="line">   [symbol1]: <span class="string">&#x27;Aliving&#x27;</span>,</span><br><span class="line">   [symbol2]: <span class="string">&#x27;Seven&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">   <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 for in 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">   <span class="comment">// 注意在console看key,是不是没有遍历到symbol1</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 Object.keys 遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))</span><br><span class="line"><span class="comment">// 3 getOwnPropertyNames</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj))</span><br><span class="line"><span class="comment">// 4 JSON.stringfy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>遍历结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age</span><br><span class="line">sex</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27; ]</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27; ]</span><br><span class="line">&#123;&quot;age&quot;:21,&quot;sex&quot;:&quot;male&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>如何拿到：</strong></p><ol><li>Object.getOwnPropertySymbols方法</li><li>es6 的 Reflect 拿到对象的所有属性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj))</span><br><span class="line"><span class="comment">// 2 es6 的 Reflect 拿到对象的所有属性</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ Symbol(123), Symbol(456) ]</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27;, Symbol(123), Symbol(456) ]</span><br></pre></td></tr></table></figure><h3 id="Symbol-iterator-迭代器"><a href="#Symbol-iterator-迭代器" class="headerlink" title="Symbol.iterator 迭代器"></a>Symbol.iterator 迭代器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    age : <span class="built_in">number</span>,</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明只读数组array</span></span><br><span class="line"><span class="keyword">const</span> array : <span class="title class_">Array</span>&lt;A&gt; = [&#123; age : <span class="number">21</span>, name : <span class="string">&#x27;AliveSeven&#x27;</span> &#125;, &#123; age : <span class="number">22</span> , name : <span class="string">&#x27;Alive&#x27;</span> &#125;, &#123; age : <span class="number">23</span>, name : <span class="string">&#x27;Seven&#x27;</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> mapTypes = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> map : <span class="title class_">Map</span>&lt;mapTypes , mapTypes&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;1&#x27;</span> , <span class="string">&#x27;步君&#x27;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;七海&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set : <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = ( arg : <span class="built_in">any</span> ) : <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> it : <span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; = arg[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">    <span class="keyword">let</span> next : <span class="built_in">any</span>= &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">        next =  it.<span class="title function_">next</span>()</span><br><span class="line">        <span class="keyword">if</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(array)</span><br><span class="line"><span class="comment">// &#123; age: 21, name: &#x27;AliveSeven&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 22, name: &#x27;Alive&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 23, name: &#x27;Seven&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>以下为这些symbols的列表：</p><p><strong>Symbol.hasInstance</strong><br>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</p><p><strong>Symbol.isConcatSpreadable</strong><br>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</p><p><strong>Symbol.iterator</strong><br>方法，被for-of语句调用。返回对象的默认迭代器。</p><p><strong>Symbol.match</strong><br>方法，被String.prototype.match调用。正则表达式用来匹配<a href="https://so.csdn.net/so/search?q=字符串&amp;spm=1001.2101.3001.7020">字符串</a>。</p><p><strong>Symbol.replace</strong><br>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</p><p><strong>Symbol.search</strong><br>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</p><p><strong>Symbol.species</strong><br>函数值，为一个构造函数。用来创建派生对象。</p><p><strong>Symbol.split</strong><br>方法，被String.prototype.split调用。正则表达式来用分割字符串。</p><p><strong>Symbol.toPrimitive</strong><br>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</p><p><strong>Symbol.toStringTag</strong><br>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</p><p><strong>Symbol.unscopables</strong><br>对象，它自己拥有的属性会被with作用域排除在外。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3><p>语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T。</p><p>当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数泛型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Alive</span>(<span class="params"> A : <span class="built_in">string</span> , B : <span class="built_in">number</span> </span>) : <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> [A , B]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型优化，动态泛型，X,Y为动态类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Fn</span>&lt;X,Y&gt;( a : X , b : Y ) : <span class="title class_">Array</span>&lt;X | Y&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> [a , b]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Alive</span>(<span class="string">&#x27;我是步君&#x27;</span>,<span class="number">7</span>)</span><br><span class="line"><span class="title class_">Fn</span>&lt;<span class="built_in">string</span> , <span class="built_in">number</span>&gt;(<span class="string">&#x27;七海&#x27;</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li>声明接口的时候 在名字后面加一个&lt;参数&gt;</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A&lt;T&gt;&#123;</span><br><span class="line">    (arg : T) : T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Fn</span>&lt;T&gt;(args : T) : T &#123;</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result : A&lt;<span class="built_in">string</span>&gt; = <span class="title class_">Fn</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>(<span class="string">&#x27;Aliving&#x27;</span>))  <span class="comment">// Aliving</span></span><br></pre></td></tr></table></figure><h3 id="对象字面量泛型"><a href="#对象字面量泛型" class="headerlink" title="对象字面量泛型"></a>对象字面量泛型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A : &#123; &lt;T&gt;(arg : T) : T &#125;</span><br><span class="line"></span><br><span class="line">A = <span class="keyword">function</span> &lt;T&gt;(arg : T)  : T&#123;</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">A</span>(<span class="string">&#x27;天选国V&#x27;</span>)) <span class="comment">// 天选国V</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>我们期望在一个泛型的变量上面，获取其<code>length</code>参数，但是，有的数据类型是没有<code>length</code>属性的</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msg6op10j30fn06275f.jpg" alt=""></p><p>于是，我们就得对使用的泛型进行约束，我们约束其为具有<code>length</code>属性的类型，这里我们会用到<code>interface</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Len</span> &#123;</span><br><span class="line">    length : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getLegnth&lt;T <span class="keyword">extends</span> <span class="title class_">Len</span>&gt;(<span class="attr">arg</span>:T) &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLegnth&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;七海小姐姐&#x27;</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="使用keyof-约束对象"><a href="#使用keyof-约束对象" class="headerlink" title="使用keyof 约束对象"></a>使用keyof 约束对象</h3><ol><li>首先定义了T类型并使用extends关键字继承object类型的子类型，</li><li>然后使用keyof操作符获取T类型的所有键，它的返回类型是联合类型</li><li>最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> prop&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> <span class="title class_">All</span> = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">prop</span>(<span class="title class_">All</span>, <span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"><span class="title function_">prop</span>(<span class="title class_">All</span>, <span class="string">&#x27;d&#x27;</span>) <span class="comment">//此时就会报错发现找不到，</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msghsn54j30ks0600uz.jpg" alt=""></p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>声明方法跟函数类似名称后面定义&lt;类型&gt;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Alive</span>&lt;T&gt;&#123;</span><br><span class="line">    a : T[] = [];</span><br><span class="line">    <span class="title function_">add</span>(a : T) : T[] &#123;</span><br><span class="line">        <span class="keyword">return</span> [a]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Alive</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">x.<span class="property">a</span> = [<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;Alive&#x27;</span>,<span class="string">&#x27;Seven&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">add</span>(<span class="string">&#x27;ABC&#x27;</span>)) <span class="comment">// [&#x27;ABC&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="keyword">new</span> <span class="title class_">Alive</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">y.<span class="property">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">add</span>(<span class="number">123</span>)) <span class="comment">// [ 123 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;TypeScript基础&quot;&gt;&lt;a href=&quot;#TypeScript基础&quot; class=&quot;headerlink&quot; title=&quot;TypeScript基础&quot;&gt;&lt;/a&gt;TypeScript基础&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>css开发中一些常用的文本规划</title>
    <link href="https://aliveseven.github.io/posts/5e549d65/"/>
    <id>https://aliveseven.github.io/posts/5e549d65/</id>
    <published>2022-09-07T17:09:45.694Z</published>
    <updated>2022-09-07T18:05:24.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css开发中一些常用的文本规划"><a href="#css开发中一些常用的文本规划" class="headerlink" title="css开发中一些常用的文本规划"></a>css开发中一些常用的文本规划</h1><h2 id="文本限制行数，超出后显示为省略号"><a href="#文本限制行数，超出后显示为省略号" class="headerlink" title="文本限制行数，超出后显示为省略号"></a>文本限制行数，超出后显示为省略号</h2><p>主要把装着文字的盒子设为-webkit-box布局，然后设置以下的属性即可，主要-webkit-line-clamp是为限制的行数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box; <span class="comment">/* 对象作为伸缩盒子模型显示 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; <span class="comment">/* 显示的行数，这里限制为两行 */</span></span><br><span class="line">-webkit-box-orient: vertical; <span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式，这里为向下排 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/* 超出盒子部分隐藏 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;  <span class="comment">/* 文字超出两行的部分为省略号 */</span></span><br><span class="line"><span class="attribute">word-break</span>: break-all;  <span class="comment">/* break-all(允许在单词内换行。) */</span>  </span><br></pre></td></tr></table></figure><h2 id="文本识别’-n’换行符"><a href="#文本识别’-n’换行符" class="headerlink" title="文本识别’\n’换行符"></a>文本识别’\n’换行符</h2><ul><li>将文本盒子<strong>white-space</strong>设为pre-wrap</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// pre-wrap保留空白符序列，但是正常地进行换行。</span><br><span class="line">text&#123;</span><br><span class="line">   <span class="attribute">white-space</span>: pre-wrap; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里讲一下<strong>white-space</strong>这个属性</li></ul><p><img src="https://m1.im5i.com/2022/09/08/UqG043.png" alt=""></p><div class="table-container"><table><thead><tr><th>white-space属性</th><th>源码空格</th><th>源码换行</th><th><br>换行</th><th>容器边界换行</th></tr></thead><tbody><tr><td>normal</td><td>合并</td><td>忽略</td><td>换行</td><td>换行</td></tr><tr><td>nowrap</td><td>合并</td><td>忽略</td><td>换行</td><td>不换行</td></tr><tr><td>pre</td><td>保留</td><td>换行</td><td>换行</td><td>不换行</td></tr><tr><td>pre-wrap</td><td>保留</td><td>换行</td><td>换行</td><td>换行</td></tr><tr><td>pre-line</td><td>合并</td><td>换行</td><td>换行</td><td>换行</td></tr></tbody></table></div><h2 id="灵活运用rem单位实现文字大小自适应"><a href="#灵活运用rem单位实现文字大小自适应" class="headerlink" title="灵活运用rem单位实现文字大小自适应"></a>灵活运用rem单位实现文字大小自适应</h2><ul><li><strong>rem是一种相对长度单位，通过这个长度单位可以实现元素宽高等比例缩放，从而完成不同宽度屏幕的适配。</strong></li></ul><blockquote><p>rem 主要是为了解决字体随屏幕变化，flex上的高度问题，实现高度和宽度等比例缩放</p></blockquote><ul><li><strong>css3规定：1rem的大小就是根元素<code>&lt;html&gt;</code>的font-size的值。</strong></li></ul><p>​    使用rem单位的好处呢，就是我们如果相对页面的文字大小作修改，那么我们只需要改<code>&lt;html&gt;</code>的font-size值就行了，其它的用了rem单位的文本就会相对的一起作出改变。</p><h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        我是AliveSeven</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">980px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">880px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">780px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">680px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">580px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h3><p><img src="https://m1.im5i.com/2022/09/08/UqGM07.gif" alt="rem演示"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css开发中一些常用的文本规划&quot;&gt;&lt;a href=&quot;#css开发中一些常用的文本规划&quot; class=&quot;headerlink&quot; title=&quot;css开发中一些常用的文本规划&quot;&gt;&lt;/a&gt;css开发中一些常用的文本规划&lt;/h1&gt;&lt;h2 id=&quot;文本限制行数，超出后显示为</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Android RecyclerView的简单使用</title>
    <link href="https://aliveseven.github.io/posts/6c6b2a18/"/>
    <id>https://aliveseven.github.io/posts/6c6b2a18/</id>
    <published>2022-09-06T14:06:30.763Z</published>
    <updated>2022-09-30T16:40:30.045Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-RecyclerView的简单使用"><a href="#Android-RecyclerView的简单使用" class="headerlink" title="Android RecyclerView的简单使用"></a>Android RecyclerView的简单使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>RecyclerView 是如何经过测量、布局，最终绘制到屏幕上</li><li>RecycleView 是在 Android 5.0 版本作为 support-v7 的一个组件出现，高效替代了最初的 ListView 等列表 组件。使用上实现了视图代码解耦，功能上具备强大的 item 复用机制，并且提供默认 多种 LayoutMananger 用来处理多种布局。</li><li>RecyclerView 使用了 ViewHolder 模式，这 样做可以提高性能，因为它无需频繁调用 findViewById()方法即可访问表项的视图。</li><li>在新版的Android开发中，RecyclerView控件被内置到Android Studio中，不需要再去引入依赖项，直接配置即可。</li></ul><h2 id="RecyclerView的基本使用"><a href="#RecyclerView的基本使用" class="headerlink" title="RecyclerView的基本使用"></a>RecyclerView的基本使用</h2><h3 id="RecyclerView组件"><a href="#RecyclerView组件" class="headerlink" title="RecyclerView组件"></a>RecyclerView组件</h3><ol><li>新建一个页面（Activity），在里面引入RecyclerView控件</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWHnv.png" alt=""></p><ol><li>新建一个子组件的item页面，来用作每个组件的展示模板，例如下图这样。</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWPGG.png" alt=""></p><h3 id="RecyclerViewHolder类"><a href="#RecyclerViewHolder类" class="headerlink" title="RecyclerViewHolder类"></a>RecyclerViewHolder类</h3><ul><li>RecyclerView中的ViewHolder类主要构造方法将<strong>子组件（单条数据）</strong>的ui和组件对象（Java类）关联起来。</li><li><p>比如上图我的子组件，我要多条展示的这些数据，每条数据的<strong>名字（name），图片（iv），描述（introduce）</strong>是各不相同的，所以要配置它们，将这些组件用Java类关联起来，然后用Java类方法进行<strong>修改和批量展示</strong>。</p></li><li><p><strong>相关代码：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">    <span class="comment">//展示单条数据的界面组件对象</span></span><br><span class="line">    TextView name;</span><br><span class="line">    ImageView iv;</span><br><span class="line">    TextView introduce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法：将组件（ui）与组件对象（java类）关联起来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecyclerViewHolder</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(view);</span><br><span class="line">        <span class="comment">//关联id = name的组件</span></span><br><span class="line">        name = (TextView) view.findViewById(R.id.name);</span><br><span class="line">        <span class="comment">//关联id = iv的组件</span></span><br><span class="line">        iv = (ImageView) view.findViewById(R.id.iv);</span><br><span class="line">        <span class="comment">//关联id = introduce的组件</span></span><br><span class="line">        introduce = (TextView) view.findViewById(R.id.introduce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RecyclerAdapter类"><a href="#RecyclerAdapter类" class="headerlink" title="RecyclerAdapter类"></a>RecyclerAdapter类</h3><ul><li>RecyclerView中的Adapter是适配器、数据和视图对接的桥梁。</li><li>简单来说，就是新建一个类，在里面设置一些方法，按照item页面的那个模板批量生产子组件，然后将生产的这些子组件塞到一开始新建的那个RecyclerView控件里面，由上往下一个一个排。</li><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;RecyclerViewHolder&gt;&#123;</span><br><span class="line">    <span class="comment">// 创建两个数组包含要展示的数据图片、姓名和它们的详细介绍</span></span><br><span class="line">    <span class="keyword">private</span> String[] names = &#123; <span class="string">&quot;橘猫&quot;</span>, <span class="string">&quot;葫芦娃&quot;</span>, <span class="string">&quot;小怪兽&quot;</span>, <span class="string">&quot;哆啦COS梦&quot;</span>, <span class="string">&quot;小猪佩奇&quot;</span>, <span class="string">&quot;睡爆emo&quot;</span>, <span class="string">&quot;逗乐表情包&quot;</span>, <span class="string">&quot;小松鼠&quot;</span>, <span class="string">&quot;小鲸鱼&quot;</span>, <span class="string">&quot;兔子&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] icons = &#123;R.drawable.a1,R.drawable.a2,R.drawable.a3,R.drawable.a4,R.drawable.a5,</span><br><span class="line">            R.drawable.a6,R.drawable.a7,R.drawable.a8,R.drawable.a9,R.drawable.a10&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] introduces = &#123;</span><br><span class="line">            <span class="string">&quot;橘猫，路边看到的小猫，好像隐藏着什么强大的力量，感觉这不是一只普通的小猫。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;葫芦娃，送头之王，有七兄弟，葫芦娃救爷爷一个一个送&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小怪兽，凹凸曼的好朋友，喜欢和凹凸曼一起去逗乐，特摄节目中的超级猪脚。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;COS哆啦A梦的小朋友，简称哆啦COS梦，可爱，萌，就是没有哆啦A梦那么圆那么胖。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小猪佩奇，一只可爱的粉色小猪，貌似很受小孩子的欢迎，虽然我不知道这有啥好看就是了，说不定很逗乐。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;睡爆emo，上数学课英文课的时候大概就是这样了，梦里什么都有。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;逗乐表情包，一个表情包，挺逗乐的，不过现在估计没什么人用了，时代变了大人。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小松鼠，挺可爱挺萌的，长得还挺像皮卡丘，好想抓一只拿回家里养，就是不知道会不会发电。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小鲸鱼，能够头上喷水的一种鱼，遭受人类的迫害和捕杀，现在濒临灭绝了。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;兔子，一种胆小的动物，突然喧闹声、生人和陌生动物，如猫狗等都会使它惊慌失措。&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="comment">//  加载展示单条数据的布局文件recycler_item.xml</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="type">RecyclerViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecyclerViewHolder</span>(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示单条数据,index代表数据在数组中的下标</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(RecyclerViewHolder holder, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//设置数组names[index]为展示的id为name的text组件</span></span><br><span class="line">        holder.name.setText(names[index]);</span><br><span class="line">        <span class="comment">//设置数组icons[index]为展示的id为iv的Image组件</span></span><br><span class="line">        holder.iv.setImageResource(icons[index]);</span><br><span class="line">        <span class="comment">//设置数组introduces[index]为展示的id为introduce的text组件</span></span><br><span class="line">        holder.introduce.setText(introduces[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  获取所有数据的数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> names.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码看上去可能有点长，其实一点都不复杂，一开始的新建的三个数组就是要批量生产的子组件的数据。</p><p>​    在onCreateViewHolder里，先加载子组件item的模板布局，然后将模板布局里面的子组件通过RecyclerHolder类匹配到Java对象上。</p><p>​    在onBindViewHolder里，将三个数组里的数据，set到item的模板布局上面，简单来说就是拿一个模板，向里面按格式写入东西。</p><p>​    最后，再设置一个getItemCount()方法，获取要批量生产的子组件数量。</p><h3 id="RecyclerViewActivtiy类"><a href="#RecyclerViewActivtiy类" class="headerlink" title="RecyclerViewActivtiy类"></a>RecyclerViewActivtiy类</h3><ol><li>到需要多条展示数据的页面Activtiy类里面</li><li>新建两个对象，一个是RecyclerView类的对象和适配器RecyclerViewAdapter类的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line"><span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br></pre></td></tr></table></figure><ol><li>布局文件通过findViewById()找到一开始新建的那个Recycler控件</li><li>然后直接按下面的代码一样配置即可</li></ol><ul><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 加载布局文件，里面有recyclerview组件</span></span><br><span class="line">        setContentView(R.layout.activity_recycler_view_activity);</span><br><span class="line">        <span class="comment">//建立组件对象与组件的关联</span></span><br><span class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.id_recyclerview);</span><br><span class="line">        <span class="comment">//设置recyclerview中展现多条数据的方式</span></span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">//创建适配器对象</span></span><br><span class="line">        mAdapter = <span class="keyword">new</span> <span class="title class_">RecyclerViewAdapter</span>();</span><br><span class="line">        <span class="comment">//recyclerview组件对象设置适配器对象，显示recyclerview组件</span></span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/Uq5DNY.gif" alt="Uq5DNY.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-RecyclerView的简单使用&quot;&gt;&lt;a href=&quot;#Android-RecyclerView的简单使用&quot; class=&quot;headerlink&quot; title=&quot;Android RecyclerView的简单使用&quot;&gt;&lt;/a&gt;Android Rec</summary>
      
    
    
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/Java/"/>
    
    <category term="Android" scheme="https://aliveseven.github.io/categories/Java/Android/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）</title>
    <link href="https://aliveseven.github.io/posts/a4ce3df7/"/>
    <id>https://aliveseven.github.io/posts/a4ce3df7/</id>
    <published>2022-09-05T17:38:47.132Z</published>
    <updated>2022-09-28T12:55:01.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）"><a href="#Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）" class="headerlink" title="Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）"></a>Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）</h1><h2 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h2><ul><li>给整个document添加监听点击事件，隐藏div</li><li>给div添加监听点击事件，阻止冒泡</li></ul><p><strong>HTML代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;Nav&quot;</span>&gt;</span>导肮展开栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Js代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Nav&#x27;</span>)</span><br><span class="line">   <span class="keyword">var</span> menu = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;menu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 点击body触发函数</span></span><br><span class="line">       <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止冒泡，即阻止触发点击事件</span></span><br><span class="line">   nav[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">       <span class="title function_">stopMaoPao</span>(e)</span><br><span class="line">       menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">   &#125; , <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 阻止菜单冒泡事件</span></span><br><span class="line">   menu[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">       <span class="title function_">stopMaoPao</span>(e)</span><br><span class="line">   &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 阻止事件向上传递，事件冒泡</span></span><br><span class="line">   <span class="comment">// cancelBubble:设置或获取当前事件是否要在事件句柄中向上冒泡</span></span><br><span class="line">   <span class="comment">// stopPropagation符合w3c标准，是应用于firefox浏览器，而不支持IE浏览器</span></span><br><span class="line">   <span class="comment">// 而cancelBubble则相反，不符合w3c标准，只支持ＩＥ浏览器。</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">stopMaoPao</span>(<span class="params">e</span>) &#123; </span><br><span class="line">       e.<span class="property">stopPropagation</span> ? e.<span class="title function_">stopPropagation</span>() : e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Js小提示"><a href="#Js小提示" class="headerlink" title="Js小提示"></a>Js小提示</h3><ul><li>使用addEventListener要注意</li><li>getElementsByClassName getElementByTagName()获取到的都是数组，即使满足条件的元素只有一个，也是数组， 因此在事件监听时，必须加[0]，否则会报错误</li><li>getElementById就不需要加[0]</li><li>addEventListener 第三个参数默认是false，false为冒泡事件，true为捕获事件</li></ul><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/UqMoWH.gif" alt="UqMoWH.gif"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;Nav&quot;</span>&gt;</span>导肮展开栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Nav&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> menu = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;menu&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击body触发函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用addEventListener要注意，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementsByClassName getElementByTagName()获取到的都是数组，即使满足条件的元素只有一个，也是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 因此在事件监听时，必须加[0]，否则会报错误</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementById就不需要加[0]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// addEventListener 第三个参数默认是 false false为冒泡事件 true为捕获事件</span></span></span><br><span class="line"><span class="language-javascript">    nav[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止冒泡，即阻止触发点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">stopMaoPao</span>(e)</span></span><br><span class="line"><span class="language-javascript">        menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; , <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止菜单冒泡事件</span></span></span><br><span class="line"><span class="language-javascript">    menu[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">stopMaoPao</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止事件向上传递，事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// cancelBubble:设置或获取当前事件是否要在事件句柄中向上冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// stopPropagation符合w3c标准，是应用于firefox浏览器，而不支持IE浏览器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 而cancelBubble则相反，不符合w3c标准，只支持ＩＥ浏览器。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">stopMaoPao</span>(<span class="params">e</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">stopPropagation</span> ? e.<span class="title function_">stopPropagation</span>() : e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.Nav</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#a6a6e3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#cbd9dc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最好是采用一个透明的遮罩层进行点击事件从而达到隐藏。</p><p>为什么不采用监听body的监听事件呢，一方面是因为可能会发生点击事故，就是不小心点到其他a标签、跳转标签或者事件触发元素，会直接触发其他函数或者跳转页面；另一方面是因为可维护性不好，假设可以通过点击多个元素关闭，那么需要挨个判断id。</p></blockquote><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li>使用Vue来处理相比Js会灵活很多</li><li>可以在盒子外层加一层固定的遮罩层进行点击事件从而达到隐藏。</li></ul><p><strong>实现代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 采用一个透明的遮罩层进行点击事件从而达到隐藏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;navPhoneOpen&quot;</span> <span class="attr">id</span>=<span class="string">&quot;menu-mask&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;hideNav()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavPhone</span>&gt;</span><span class="tag">&lt;/<span class="name">NavPhone</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用v-show给遮罩层设定展示条件，当<strong>盒子处于显示</strong>时，遮罩层也一起显示，z-index大于body小于盒子即可，点击遮罩层即可触发hideNav()事件，可以<strong>利用vuex定义一个变量用来控制盒子的隐藏和出现</strong></li><li>或者不定义也行，在data()里面定义也可以，方法有很多，反正用一个变量通过v-show来控制盒子的隐藏和显示就行了。</li><li>hideNav()函数就是更改那个控制盒子显示的变量</li></ul><p><img src="https://m1.im5i.com/2022/09/06/UqMtRa.png" alt="UqMtRa.png"></p><h3 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/UqM1dT.gif" alt="UqM1dT.gif"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）&quot;&gt;&lt;a href=&quot;#Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）&quot; class=&quot;headerlink&quot; title=&quot;Js/Vue实现点击div区域外隐藏div区域（</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Flex弹性布局详解</title>
    <link href="https://aliveseven.github.io/posts/8a0f1987/"/>
    <id>https://aliveseven.github.io/posts/8a0f1987/</id>
    <published>2022-09-03T15:42:50.397Z</published>
    <updated>2022-09-17T07:11:35.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Flex弹性布局详解"><a href="#Flex弹性布局详解" class="headerlink" title="Flex弹性布局详解"></a>Flex弹性布局详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>flex就是flexible box的缩写，意为弹性布局，任何一个容器都可以指定为flex布局</p><p><strong>Webkit</strong>内核的浏览器，必须加上-webkit前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p></blockquote><p>🌀<strong><em>Flex布局与传统布局对比：</em></strong></p><p><strong>传统布局：</strong></p><ul><li>兼容性好</li><li>布局繁琐</li><li>局限（不能在移动端很好的布局）</li></ul><p><strong>FLex布局：</strong></p><ul><li>操作方便，布局简单，移动端广泛应用</li><li>PC端浏览器支持较差</li><li>IE11或更低版本不支持或部分支持</li></ul><p>🌀<strong><em>Flex布局原理：</em></strong></p><p>—通过给父元素添加flex属性来控制子元素的位置和排列方式</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>容器默认存在两根轴：水平的<strong>主轴</strong>（main axis）和垂直的<strong>交叉轴</strong>（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code></p><p>项目默认沿主轴排列，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code></p><p><img src="https://m1.im5i.com/2022/09/03/Uq0A6S.png" alt="Uq0A6S.png"></p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><ol><li><strong>flex-direction：设置主轴方向，一般默认为x轴</strong></li><li><strong>justify-content：设置主轴上的子元素排列方式，一般默认为y轴</strong></li><li><strong>flex-wrap：设置子元素是否换行</strong></li><li><strong>align-items：设置侧轴上子元素排列方式（单行）</strong></li><li><strong>align-content：设置侧轴上子元素排列方式（多行）</strong></li><li><strong>align-self：控制子元素本身在交叉轴上的对齐方式</strong></li><li><strong>flex-flow：复合属性，同时设置了flex-direction和flex-wrap</strong></li></ol><h3 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h3><ul><li><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>row</code>：默认值，主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li></ul><p><img src="https://m1.im5i.com/2022/09/03/Uq0IH0.png" alt="Uq0IH0.png"></p><h3 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h3><ul><li><p><code>justify-content</code> 是用于控制项目在主轴上的对齐方式。</p></li><li><p>常用属性有以下六个</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>flex-start</code><strong>：默认值，子盒子在主轴方向上排列，一般是在x轴水平方向，从左到右。</strong></li><li><code>flex-end</code><strong>：子盒子在主轴方向上反向排列，一般是在x轴水平方向，从右到左边。</strong></li><li><code>center</code><strong>：子盒子在主轴方向上居中。</strong></li><li><code>space-between</code><strong>：子盒子在主轴方向上，两端对齐，然后项目中间间隔是相等的。</strong></li><li><code>space-around</code><strong>：在主轴方向上，在左右两侧会留下边距。</strong></li><li><code>space-evenly</code><strong>：均匀排列每个元素，每个元素之间的间隔相等</strong></li></ul><p><img src="https://image-static.segmentfault.com/250/241/2502411604-75463c5584aa3aff" alt=""></p><h4 id="space-around和space-evenly的区别"><a href="#space-around和space-evenly的区别" class="headerlink" title="space-around和space-evenly的区别"></a>space-around和space-evenly的区别</h4><p>​                    <img src="https://m1.im5i.com/2022/09/03/Uq0Hez.md.png" alt="Uq0Hez.md.png"></p><h3 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h3><ul><li><strong>flex-wrap：</strong> 控制项目(子元素)是否换行</li></ul><p>它可能取三个值：</p><ul><li>nowrap：（默认值）不换行；</li><li>wrap：换行，第一行在上方；</li><li>wrap-reverse：换行，第一行在下方。</li></ul><blockquote><p><strong>注意：默认情况下是不换行的，如果父元素装不下会缩小所有子元素的宽度，使子元素挤在一起。</strong></p></blockquote><p><img src="https://m1.im5i.com/2022/09/03/Uq0mTB.png" alt="Uq0mTB.png"></p><h3 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h3><ul><li><code>align-items</code> 是控制项目在交叉轴上的对齐方式，一般是垂直方向y轴上面的。</li><li>有常用的五个属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch | flex-start | flex-end | center | baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>stretch</code>：默认值，如果项目没有设置固定高度，则会被拉伸填充满交叉轴方向剩余的空间。</li><li><code>flex-start</code>：项目在沿交叉轴起始线位置对齐。</li><li><code>flex-end</code>：项目沿交叉轴终点线位置对齐。</li><li><code>center</code>：项目在交叉轴方向居中对齐。</li><li><code>baseline</code>：项目在交叉轴方向沿项目中第一行文字的基线对齐。</li></ul><p><img src="https://image-static.segmentfault.com/352/840/3528400318-699131d320f31e62" alt=""></p><blockquote><ol><li>stretch 是“拉伸，拉长”的意思，所以项目会被拉伸</li><li>start、end、center 分别的“起始”、“终点”、“中间”的意思，所以项目分别是起始位置、终端位置、居中对齐。</li><li>baseline 是“基线、底线”的意思，这里是沿文字的基线对齐的意思。</li></ol></blockquote><h3 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h3><ul><li><code>align-content</code> 控制多行项目（多根主轴线）对齐方式。类似 <code>justify-content</code> ，只不过，<code>align-content</code> 是控制行与行之间的空间分配，<code>justify-content</code> 是控制子盒子与子盒子之间的空间分配。</li><li>有七个常用的属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch | flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除了<strong>stretch属性</strong>外，其他的属性功能和性质基本和<strong>justify-content</strong>那里的属性一样</li><li><code>stretch</code><strong>：默认值，交叉轴方向剩余的空间平均分配到每一行，并且行的高度会拉伸，填满整行的空间</strong></li></ul><p><img src="https://image-static.segmentfault.com/719/027/719027543-420f34821a508347" alt=""></p><h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><ul><li><code>align-self</code> 控制子盒子本身在交叉轴上的对齐方式。优先级高于 <code>align-items</code>。<code>align-items</code> 是容器统一控制容器里的每个子盒子的对齐方式，<code>align-self</code> 则是子盒子控制子盒子本身的对齐方式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>align-self: auto;</code> ，继承容器设置的 <code>align-items</code> 的值。也就是默认是由容器设置 <code>align-items</code> 统一控制项目在交叉轴上的对齐方式。</li><li>除了比 <code>align-items</code> 多一个 <code>auto</code> 选项外，其他选项与 <code>align-items</code> 一致。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  dispaly: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; // 容器控制所有项目顶部对齐排列</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-class">.four</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end; // 第四个项目控制底部对齐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/110/315/1103156958-4717e400ec943764" alt=""></p><h3 id="flow-grow属性"><a href="#flow-grow属性" class="headerlink" title="flow-grow属性"></a>flow-grow属性</h3><ul><li><code>flex-grow</code> 用于控制子盒子在主轴方向上拉伸放大占剩余空间（如果有的话）的比例。</li><li>grow 的意思是“扩大，使生长”，所以就是让项目放大的意思。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>0</code>，不放大。</li></ul><p><img src="https://image-static.segmentfault.com/114/795/1147952730-93479b1ca8af8f91" alt=""></p><blockquote><p>例子中，容器宽设为 300px，项目宽设为 50px。项目总宽 150px，剩余空间宽 150px</p><p>flex-grow 都设置为 1 的时候，项目拉伸成 100px，剩余空间被按 1:1:1 分配，每个项目各占了 1/3。</p><p>flex-grow 分别设为 33、66、66 的时候，项目分别被拉伸成 87.5px、125px、87.5px，剩余空间被按 1:2:1 分配，项目分别占了剩余空间的 1/4、1/2、1/4。</p><p><strong>可以看到，放大的比例跟数值的大小无关，跟数值的比例有关。</strong></p></blockquote><h3 id="flow-shrink属性"><a href="#flow-shrink属性" class="headerlink" title="flow-shrink属性"></a>flow-shrink属性</h3><ul><li><code>flex-shrink</code> 用于控制项目在主轴方向上缩小的程度。数值越大，收缩越多</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认是 <code>flex-shrink: 1</code> ，同等比例收缩。</li></ul><p><img src="https://image-static.segmentfault.com/153/086/1530865475-13fb240e2cab993d" alt=""></p><blockquote><p>例子中，容器宽为 400px，项目宽为100px。因为项目超过了容器空间，所以自动被缩小了。默认 flex-shrink 是 1，所有项目同等比例缩小成 80px。</p><p>右上，设置 flex-shrink，全部设置为 0，项目保存原来设置的宽度 100px，不缩小，所以溢出容器空间。</p><p>右中，设置 flex-shrink 分别为 6、6、6、默认、默认，项目宽变成 70px、70px、70px、95px、95px，超出的 100px 分成 20 份，按比例缩小。</p><p>右上，设置 flex-shrink 分别为 999、默认、默认、默认、默认，项目宽变成 16px、96px、96px、96px、96px，可以看到这里就不按比例缩小的了。</p></blockquote><h3 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h3><ul><li><code>flex-basis</code> 用于初始化每个项目占据主轴空间的尺寸（main size）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex-basis: auto</code> , 自动检测尺寸，如果项目有设置尺寸，则取项目设置的值，否则根据项目内容计算出尺寸。</li></ul><h3 id="flex-项目的属性：flex"><a href="#flex-项目的属性：flex" class="headerlink" title="flex 项目的属性：flex"></a>flex 项目的属性：flex</h3><ul><li><code>flex</code> 是上面三个合并的简写。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: &lt;flex-grow&gt; [&lt;flex-shrink&gt;] [&lt;flex-basis&gt;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex: 0 1 auto;</code> 后两个参数为可选参数。</li></ul><ul><li><code>flex: auto</code>：等同于 <code>flex: 1 1 auto</code>。可以拉伸，可以缩小，自动计算项目尺寸，一般情况下会自动拉伸填充满整个容器。</li><li><code>flex: none</code>： 等同于 <code>flex: 0 0 auto</code>。不能拉伸，不能缩小，直接使用获取到项目的 <code>flex-basis</code> 尺寸。</li><li><code>flex: &lt;positive-number&gt;</code>：等同于 <code>flex: &lt;positive-number&gt; 1 0</code> 。positive-number 为正数，例如 <strong><code>flex: 1</code> 等同于 <code>flex: 1 1 0</code>。</strong></li></ul><h3 id="flex-项目的属性：order"><a href="#flex-项目的属性：order" class="headerlink" title="flex 项目的属性：order"></a>flex 项目的属性：order</h3><ul><li><code>order</code> 用于控制项目在主轴上的排列顺序。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值： <code>order: 0;</code> ，参数值正负数都可以，全部项目按主轴方向依次排列。设置后，按数值大小，从小到大排列。</li></ul><p><img src="https://image-static.segmentfault.com/144/234/1442340051-b6045f89bffe1540" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Flex弹性布局详解&quot;&gt;&lt;a href=&quot;#Flex弹性布局详解&quot; class=&quot;headerlink&quot; title=&quot;Flex弹性布局详解&quot;&gt;&lt;/a&gt;Flex弹性布局详解&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
</feed>
