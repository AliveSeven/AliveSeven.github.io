<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2023-01-13T14:31:20.780Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot文件上传大小限制问题</title>
    <link href="https://aliveseven.github.io/posts/6c4f14c4/"/>
    <id>https://aliveseven.github.io/posts/6c4f14c4/</id>
    <published>2023-01-13T14:11:38.063Z</published>
    <updated>2023-01-13T14:31:20.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot文件上传大小限制问题"><a href="#SpringBoot文件上传大小限制问题" class="headerlink" title="SpringBoot文件上传大小限制问题"></a>SpringBoot文件上传大小限制问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用SpringBoot开发后台系统的时候，需要开发文件上传业务，但是上传大文件控制台会报错：<code>The field files exceeds its maximum permitted size</code>。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>一般SpringBoot的文件上传大小限制在1M以下，单个请求中最多可容纳10M大小的文件流数据，这个大小对于我们实际开发来说实在太小了。</p><p>解决办法也很简单，在配置文件application.properties里面加入相关配置即可</p><p><img src="https://pic.imgdb.cn/item/63c16624be43e0d30e83ac82.jpg" alt=""></p><h3 id="Spring-Boot-1-3-x或之前版本，配置如下："><a href="#Spring-Boot-1-3-x或之前版本，配置如下：" class="headerlink" title="Spring Boot 1.3.x或之前版本，配置如下："></a>Spring Boot 1.3.x或之前版本，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipart.maxFileSize=100Mb</span><br><span class="line">multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-1-4-x版本及以上，配置如下："><a href="#Spring-Boot-1-4-x版本及以上，配置如下：" class="headerlink" title="Spring Boot 1.4.x版本及以上，配置如下："></a>Spring Boot 1.4.x版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.http.multipart.maxFileSize=100Mb</span><br><span class="line">spring.http.multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-2-0版本及以上，配置如下："><a href="#Spring-Boot-2-0版本及以上，配置如下：" class="headerlink" title="Spring Boot 2.0版本及以上，配置如下："></a>Spring Boot 2.0版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-file-size = 100MB</span><br><span class="line">spring.servlet.multipart.max-request-size = 1000MB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;a href=&quot;#SpringBoot文件上传大小限制问题&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;/a&gt;SpringBoot文件上传大小限制问题&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vue3父组件调用子组件的方法</title>
    <link href="https://aliveseven.github.io/posts/2d7c1534/"/>
    <id>https://aliveseven.github.io/posts/2d7c1534/</id>
    <published>2023-01-12T15:19:44.736Z</published>
    <updated>2023-01-12T15:30:30.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3父组件调用子组件的方法"><a href="#Vue3父组件调用子组件的方法" class="headerlink" title="Vue3父组件调用子组件的方法"></a>Vue3父组件调用子组件的方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在开发落地页项目的时候，有这样的一个业务：</p><ol><li>角色在登录之后，需要知道这个用户是否之前有绑定过角色，</li><li>因为一个账号有多个角色，但是能够领取奖励的只能有一个角色</li><li>所以需要知道这个用户是否有绑定过角色，如果有，那么直接跳过绑定角色这一步，如果没有，转到绑定角色的弹窗去。</li><li>但是现在就有个问题，我弹窗是自己做的一个用来装其他，比如登录框、绑定框、选择账号框的一个<strong>父组件</strong>，这里用到的<strong>绑定角色框</strong>是其中的一个<strong>子组件</strong>。</li><li>但是绑定角色里面的逻辑业务是需要在这个子组件里面调用的，不能放在像pinia、vuex里面这种公共区域调用，也不能放在别的组件中调用，所以现在有这样一个需求，<strong>vue3中父组件调用子组件的方法</strong></li></ol><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>在网上看到很多都是说用ref给子组件绑定一个值，然后在子组件中通过defineExpose将要调用的方法暴露出去。</p><p>但是弄了很多次，子组件ref绑定的值一直是undefined，不知道是不是我操作姿势不知道还是什么。</p><h2 id="vue3-eventbus"><a href="#vue3-eventbus" class="headerlink" title="vue3-eventbus"></a>vue3-eventbus</h2><p>这是一个很好用的插件，类似于vue2中的事件总线，特别好用，只需要在要被调用的子组件中用bus.on()，设置要监听的方法名和，触发的函数。</p><h3 id="在全局注册"><a href="#在全局注册" class="headerlink" title="在全局注册"></a>在全局注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;vue3-eventbus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(eventBus)</span><br></pre></td></tr></table></figure><h3 id="在子组件中"><a href="#在子组件中" class="headerlink" title="在子组件中"></a>在子组件中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;vue3-eventbus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bus.<span class="title function_">on</span>(<span class="string">&#x27;bindrole&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 绑定角色的方法</span></span><br><span class="line">    <span class="title class_">BindRole</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;绑定角色&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在父组件中"><a href="#在父组件中" class="headerlink" title="在父组件中"></a>在父组件中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindOnlyRole</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// event-bus yyds</span></span><br><span class="line">  <span class="comment">// 触发绑定角色事件</span></span><br><span class="line">  bus.<span class="title function_">emit</span>(<span class="string">&#x27;bindrole&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，这个也能用于子组件与子组件、子组件与父组件间等等的传值、方法调用，很好用。</p><p>使用方法基本都差不多，要调用方法的组件中，用bus.on()来监听要触发的方法，在其他组件中用bus.emit()来触发相关方法，用方法名来做依据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3父组件调用子组件的方法&quot;&gt;&lt;a href=&quot;#Vue3父组件调用子组件的方法&quot; class=&quot;headerlink&quot; title=&quot;Vue3父组件调用子组件的方法&quot;&gt;&lt;/a&gt;Vue3父组件调用子组件的方法&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2/Vue3实现路由过渡动画效果</title>
    <link href="https://aliveseven.github.io/posts/fc56fa96/"/>
    <id>https://aliveseven.github.io/posts/fc56fa96/</id>
    <published>2023-01-10T16:04:43.780Z</published>
    <updated>2023-01-13T16:53:36.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-Vue3实现路由过渡动画效果"><a href="#Vue2-Vue3实现路由过渡动画效果" class="headerlink" title="Vue2/Vue3实现路由过渡动画效果"></a>Vue2/Vue3实现路由过渡动画效果</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在后台开发的过程中，页面经常有路由的转换，但是由于转换过程太过于死板，所以想给它加入一点点动画效果，或者是淡入/淡出效果，提高体验</p><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><p>在Vue2中，可以在路由router-view上加上transition和效果即可</p><p> <router-view>是基本的动态组件，所以我们可以用<transition>组件给它添加一些过渡效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">class</span>=<span class="string">&quot;child-view&quot;</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;is_show&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RouterView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该过渡效果的CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 离开 */</span></span><br><span class="line"><span class="selector-class">.slide-fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 进入 */</span></span><br><span class="line"><span class="selector-class">.slide-fade-enter-from</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="selector-class">.fade-enter</span> &#123;  </span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* transition: all 1s; */</span></span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">6s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">55</span>, <span class="number">0</span>, .<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue3中enter事件的css可能会失效，需要重写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-from</span> &#123;  </span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-to</span> &#123; </span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* transition: all 1s; */</span></span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">6s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">55</span>, <span class="number">0</span>, .<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>transiton的属性及其含义：</strong></p><ol><li>name为过渡效果名，后续的css样式需要与 name建立关系，以name替代上面的v</li><li>mode设置动画模式，原先进入和离开的元素都是在同时开始动画的，使用mode=”out-in”可以先执行完离开动画，然后再执行进入动画</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-Vue3实现路由过渡动画效果&quot;&gt;&lt;a href=&quot;#Vue2-Vue3实现路由过渡动画效果&quot; class=&quot;headerlink&quot; title=&quot;Vue2/Vue3实现路由过渡动画效果&quot;&gt;&lt;/a&gt;Vue2/Vue3实现路由过渡动画效果&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Element-UI上传文件用action上传跨域问题</title>
    <link href="https://aliveseven.github.io/posts/706eff6b/"/>
    <id>https://aliveseven.github.io/posts/706eff6b/</id>
    <published>2023-01-08T08:49:05.591Z</published>
    <updated>2023-01-08T08:58:03.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Element-UI上传文件用action上传跨域问题"><a href="#Element-UI上传文件用action上传跨域问题" class="headerlink" title="Element-UI上传文件用action上传跨域问题"></a>Element-UI上传文件用action上传跨域问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实习过程，遇到了需要开发大文件上传的业务，由于公司之前的小文件上传是用action的方式来上传，但是这样做有比较大的限制，而且很容易遇到跨域的问题出现。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>需要使用 <strong>:http-request</strong> 的方式上传，通过这种方式上传，可以不给action赋值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;视频封面上传&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;upload-demo&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:http-request</span>=<span class="string">&quot;uploadImg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-preview</span>=<span class="string">&quot;handlePictureCardPreview&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-exceed</span>=<span class="string">&quot;handleExceed&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-change</span>=<span class="string">&quot;handleChangeImg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-upload</span>=<span class="string">&quot;beforeImgUpload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">&quot;uploadData&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;image/png, image/jpeg&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span>&gt;</span>上传视频封面图片文件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里上传是采用自动上传的方式来执行，通过 <strong>:http-request</strong>的方式引入<strong>axios</strong>封装的<strong>request</strong>请求来调用接口方法，获取数据，一般可以解决跨域的问题。</p><p>此外，需要给request加入以下请求头，是用来<strong>上传文件流</strong>用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> headers = &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundarynl6gT1BKdPWIejNq&quot;</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;视频上传&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;videoLoading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;upload-demo&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:http-request</span>=<span class="string">&quot;uploadFile&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:header</span>=<span class="string">&quot;header&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-remove</span>=<span class="string">&quot;beforeRemove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-change</span>=<span class="string">&quot;handleChange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-upload</span>=<span class="string">&quot;beforeFileUpload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">drag</span></span></span><br><span class="line"><span class="tag">    <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-exceed</span>=<span class="string">&quot;handleExceed&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">&quot;uploadData&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;video/mp4, video/flv, video/avi, video/rmvb&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>将文件拖到此处，或<span class="tag">&lt;<span class="name">em</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span>&gt;</span>上传视频文件，可以拖拽上传<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="上传的方法"><a href="#上传的方法" class="headerlink" title="上传的方法"></a>上传的方法</h3><p><strong>:http-request</strong> 指定自定义的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传视频</span></span><br><span class="line"><span class="title function_">uploadFile</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在上传视频:&quot;</span>,params)</span><br><span class="line">    <span class="comment">// 开始等待</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoLoading</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"> formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, params.<span class="property">file</span>)</span><br><span class="line">    <span class="title function_">upload</span>(formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视频上传：&quot;</span>,res)</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">fileId</span> = res.<span class="property">data</span>.<span class="property">fileId</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">fileName</span> = res.<span class="property">data</span>.<span class="property">fileName</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">filePath</span> = res.<span class="property">data</span>.<span class="property">filePath</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">fileUrl</span> = res.<span class="property">data</span>.<span class="property">fileUrl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&quot;上传失败，请重试&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待完成</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">videoLoading</span> = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传视频封面</span></span><br><span class="line"><span class="title function_">uploadImg</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"> formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, params.<span class="property">file</span>)</span><br><span class="line">    <span class="title function_">upload</span>(formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片上传：&quot;</span>,res)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">popUrl</span> = res.<span class="property">data</span>.<span class="property">fileUrl</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Element-UI上传文件用action上传跨域问题&quot;&gt;&lt;a href=&quot;#Element-UI上传文件用action上传跨域问题&quot; class=&quot;headerlink&quot; title=&quot;Element-UI上传文件用action上传跨域问题&quot;&gt;&lt;/a&gt;Eleme</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JWT令牌Token验证，过期验证</title>
    <link href="https://aliveseven.github.io/posts/1b9ff95e/"/>
    <id>https://aliveseven.github.io/posts/1b9ff95e/</id>
    <published>2023-01-01T07:59:17.552Z</published>
    <updated>2023-01-07T17:25:00.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT令牌Token验证，过期验证"><a href="#JWT令牌Token验证，过期验证" class="headerlink" title="JWT令牌Token验证，过期验证"></a>JWT令牌Token验证，过期验证</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行中后台开发的时候，发现一些小问题，就是在用户已经登录，本地浏览器存入token的情况下，用户如果之间跳转到登录/login的路由，这时候是需要判断当前用户的token状态是否过期，如果过期了就停留在登录页面（login路由），如果没有过期，就跳转到首页的路由</p><h2 id="实现的方法"><a href="#实现的方法" class="headerlink" title="实现的方法"></a>实现的方法</h2><p>前端我是设置了一个路由监听，如果当前的路由是Login，调用后端方法进行token的期限判断，如果没有过期就跳转到首页</p><h2 id="路由监听"><a href="#路由监听" class="headerlink" title="路由监听"></a>路由监听</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由监听</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to , <span class="keyword">from</span> , next</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; setRouteName &#125; = <span class="title function_">useState</span>()</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;currentRouteName&#x27;</span>, to.<span class="property">name</span> <span class="keyword">as</span> <span class="built_in">string</span>)</span><br><span class="line">  <span class="comment">// 设置当前路由</span></span><br><span class="line">  <span class="title function_">setRouteName</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前路由是登录</span></span><br><span class="line">  <span class="keyword">if</span>(to.<span class="property">name</span> === <span class="string">&#x27;Login&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">token</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 检查token是否过期</span></span><br><span class="line">    <span class="title function_">isExpiration</span>(token).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 如果token没有过期，之间跳到主控台</span></span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">data</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&quot;/home/dashBoard&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未找到路由的情况</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!to.<span class="property">matched</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> storeMenus = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;menus&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (storeMenus) &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/404&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 跳回登录页面</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 其他的情况都放行</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="后端token过期验证"><a href="#后端token过期验证" class="headerlink" title="后端token过期验证"></a>后端token过期验证</h2><p>auth0 JWT库具有用于分析和（可选）验证令牌的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验token是否过期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token  密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否过期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isExpiration</span><span class="params">(String token)</span>&#123;</span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">    <span class="keyword">if</span>( jwt.getExpiresAt().before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;token is expired&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回false，说明过期了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 返回true，说明还没过期</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证token是否正确"><a href="#验证token是否正确" class="headerlink" title="验证token是否正确"></a>验证token是否正确</h2><p>这个可加也可不加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验token是否正确</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token  密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sign 用户的密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否正确</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isToken</span><span class="params">(String token, String userId ,String sign)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//根据密码生成JWT效验器</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(sign);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).withAudience(userId).build();</span><br><span class="line">        <span class="comment">//效验TOKEN</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JWT令牌Token验证，过期验证&quot;&gt;&lt;a href=&quot;#JWT令牌Token验证，过期验证&quot; class=&quot;headerlink&quot; title=&quot;JWT令牌Token验证，过期验证&quot;&gt;&lt;/a&gt;JWT令牌Token验证，过期验证&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vue3中的toRef和toRefs</title>
    <link href="https://aliveseven.github.io/posts/4d78abc9/"/>
    <id>https://aliveseven.github.io/posts/4d78abc9/</id>
    <published>2022-12-27T14:09:37.744Z</published>
    <updated>2023-01-07T17:25:48.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3中的toRef和toRefs"><a href="#Vue3中的toRef和toRefs" class="headerlink" title="Vue3中的toRef和toRefs"></a>Vue3中的toRef和toRefs</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li><code>toRef</code>和<code>toRefs</code>是用于复制<code>reactive</code>里面的属性，然后转成<code>ref</code>。</li><li><code>reactive</code>原本是响应式对象，被解构后里面的属性丧失了响应特性。而<code>toRefs</code>可以将一个响应式对象变成普通对象，而将它的属性全部变成相应式属性</li><li>类似于浅拷贝的方式，它复制的其实就是引用 + 响应式 <code>ref</code></li><li>toRef: 复制 reactive 里的单个属性并转成 ref</li><li>toRefs: 复制 reactive 里的所有属性并转成 ref</li></ul><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Tony&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 复制 info 里的 name 属性</span></span><br><span class="line">    <span class="keyword">let</span> rName = <span class="title function_">toRef</span>(info, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="comment">// 更改 rName</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onChangeName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      rName.<span class="property">value</span> = <span class="string">&#x27;Stack!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      info,</span><br><span class="line">      rName,</span><br><span class="line">      onChangeName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63adb3b808b68301632a7285.gif" alt=""></p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;</span><br><span class="line">    reactive-info-name: &#123;&#123; info.name &#125;&#125; </span><br><span class="line">  &lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;</span><br><span class="line">    toRefs-rInfo: &#123;&#123; rInfo.name.value &#125;&#125;</span><br><span class="line">  &lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;onChangeInfo&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">    let info = reactive(&#123;</span><br><span class="line">      name: &#x27;Tony&#x27;,</span><br><span class="line">      age: 30</span><br><span class="line">    &#125;)</span><br><span class="line">// 复制 info 里的 name 属性</span><br><span class="line">    let rInfo = toRefs(info)</span><br><span class="line">    // 更改 rInfo</span><br><span class="line">    const onChangeInfo = () =&gt; &#123;</span><br><span class="line">      rInfo.name.value = &#x27;Stack!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      info,</span><br><span class="line">      rInfo,</span><br><span class="line">      onChangeInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3中的toRef和toRefs&quot;&gt;&lt;a href=&quot;#Vue3中的toRef和toRefs&quot; class=&quot;headerlink&quot; title=&quot;Vue3中的toRef和toRefs&quot;&gt;&lt;/a&gt;Vue3中的toRef和toRefs&lt;/h1&gt;&lt;h2 id=&quot;作</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>通过axios下载/导出文件</title>
    <link href="https://aliveseven.github.io/posts/9957f058/"/>
    <id>https://aliveseven.github.io/posts/9957f058/</id>
    <published>2022-12-26T13:45:37.903Z</published>
    <updated>2023-01-07T17:32:30.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过axios下载-导出文件"><a href="#通过axios下载-导出文件" class="headerlink" title="通过axios下载/导出文件"></a>通过axios下载/导出文件</h1><h2 id="TypeScript代码"><a href="#TypeScript代码" class="headerlink" title="TypeScript代码"></a>TypeScript代码</h2><h3 id="API接口代码"><a href="#API接口代码" class="headerlink" title="API接口代码"></a>API接口代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exportUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        url : <span class="string">&#x27;/user/export&#x27;</span>,</span><br><span class="line">        method : <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出信息文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exportUserInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">exportUser</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res : <span class="built_in">any</span></span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> blob :<span class="built_in">any</span> = <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob); <span class="comment">// 创建一个临时的url指向blob对象</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&#x27;用户信息&#x27;</span>;  <span class="comment">// 自定义下载文件名</span></span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    <span class="comment">// 释放这个临时的对象url</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url); </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;网络错误&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最近阳了，鸽了好多天没更博客了😣😣</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过axios下载-导出文件&quot;&gt;&lt;a href=&quot;#通过axios下载-导出文件&quot; class=&quot;headerlink&quot; title=&quot;通过axios下载/导出文件&quot;&gt;&lt;/a&gt;通过axios下载/导出文件&lt;/h1&gt;&lt;h2 id=&quot;TypeScript代码&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Options请求详解</title>
    <link href="https://aliveseven.github.io/posts/dd78f1f7/"/>
    <id>https://aliveseven.github.io/posts/dd78f1f7/</id>
    <published>2022-12-17T15:37:07.456Z</published>
    <updated>2023-01-07T17:43:12.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Options请求详解"><a href="#Options请求详解" class="headerlink" title="Options请求详解"></a>Options请求详解</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>Option请求就是预处理请求，一般是发生在跨域请求的时候，浏览器为了安全起见，会执行CORS预检请求，也就是Options请求。</li><li>HTTP 的 OPTIONS 方法用于获取目的资源所支持的通信选项。</li><li>在跨域请求时，浏览器会向服务器发起Options请求，从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。</li></ul><blockquote><p>某些请求不会触发CORS预检请求，这样的请求一般称为 “简单请求” ，而会触发预检的请求则是 “复杂请求” 。</p></blockquote><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><ul><li>一般通过GET、HEAD、POST请求时，都是简单请求</li><li>请求中的任意 XMLHttpRequestUpload对象均没有注册任何事件监听器；</li><li>请求中没有使用 ReadableStream对象。</li><li>Content-Type 的值仅限于下列三者之一,即application/x-www-form-urlencoded、multipart/form-data、text/plain；</li></ul><h2 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h2><ul><li>通过PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH请求</li><li>Content-Type 的值不属于下列之一，即application/x-www-form-urlencoded、multipart/form-data、text/plain。</li></ul><h2 id="Options请求优化策略"><a href="#Options请求优化策略" class="headerlink" title="Options请求优化策略"></a>Options请求优化策略</h2><p>当发起跨域请求时，简单请求只发起1次请求；复杂请求则需要2次，先发起options请求，确认目标资源是否支持跨域，浏览器会根据服务端响应的header自动处理剩余的请求，如果响应支持跨域，则继续发出正常请求；不支持的话，会在控制台显示错误。</p><p>所以，当触发预检时，跨域请求便会发送2次请求，增加请求次数，同时，也延迟了请求真正发起的时间，会严重地影响性能。</p><h3 id="优化方法一"><a href="#优化方法一" class="headerlink" title="优化方法一"></a>优化方法一</h3><ul><li>用其它的跨域方式做跨域请求，将复杂请求转为简单请求，比如JSONP等</li><li>对 options 请求进行缓存</li></ul><blockquote><p>文章参考：<a href="https://blog.csdn.net/kjssjj12/article/details/125298347">https://blog.csdn.net/kjssjj12/article/details/125298347</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Options请求详解&quot;&gt;&lt;a href=&quot;#Options请求详解&quot; class=&quot;headerlink&quot; title=&quot;Options请求详解&quot;&gt;&lt;/a&gt;Options请求详解&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue通过不同的值改变class</title>
    <link href="https://aliveseven.github.io/posts/6df76c49/"/>
    <id>https://aliveseven.github.io/posts/6df76c49/</id>
    <published>2022-12-14T15:10:33.302Z</published>
    <updated>2023-01-07T17:38:47.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue通过不同的值改变class"><a href="#Vue通过不同的值改变class" class="headerlink" title="Vue通过不同的值改变class"></a>Vue通过不同的值改变class</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>我们在进行组件化开发的时候，可能想让当前类有不同的样式，或者是多种样式。</li><li>亦或是我们想要通过<strong>props</strong>来进行父组件给子组件传值，然后子组件根据传过来的值进行判断，不同的值对应不同的样式（有点像组件库中的size）</li><li>这时候就引出上题了</li></ul><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>其实很简单，只需要给class加上<code>&#123; &#39;类名&#39; : &#39;条件&#39; &#125;</code>即可，比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pop&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; popB : popAct == true&#125;&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>这里就给盒子加入pop 和 popB的类名了，popB是<strong>(popAct == true)</strong>这个条件为true的时候才触发，也就是popAct == false的时候，这个时候就没有popB这个类名了。</p><p>即：</p><ul><li>当popAct == true的时候，class = “pop popB”</li><li>当popAct == false的时候，不满足触发popB的条件，class = “pop”</li></ul><h2 id="多个条件的情况下"><a href="#多个条件的情况下" class="headerlink" title="多个条件的情况下"></a>多个条件的情况下</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#123; big : size == &#x27;da&#x27; &#125;,&#123; mid : size == &#x27;zhong&#x27;&#125;,&#123;small : size==&#x27;xiao&#x27;&#125;]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码的意思：</p><ul><li>当size这个变量等于’da’的时候，即size == ‘da’ 为true的时候，class=”big”</li><li>当size这个变量等于’zhong’的时候，即size == ‘zhong’ 为true的时候，class=”mid”</li><li>当size这个变量等于’xiao’的时候，即size == ‘xiao’ 为true的时候，class=”small”</li></ul><p>这样看是不是很容易理解了。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue通过不同的值改变class&quot;&gt;&lt;a href=&quot;#Vue通过不同的值改变class&quot; class=&quot;headerlink&quot; title=&quot;Vue通过不同的值改变class&quot;&gt;&lt;/a&gt;Vue通过不同的值改变class&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>css中的 /deep/ 的作用</title>
    <link href="https://aliveseven.github.io/posts/d8bf5e98/"/>
    <id>https://aliveseven.github.io/posts/d8bf5e98/</id>
    <published>2022-12-09T16:49:07.089Z</published>
    <updated>2023-01-07T17:31:12.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css中的-deep-的作用"><a href="#css中的-deep-的作用" class="headerlink" title="css中的 /deep/ 的作用"></a>css中的 /deep/ 的作用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在用Vue进行模块化、组件化开发的时候，可以通过给样式加上scoped，避免了父组件的样式影响了子组件的样式。而<code>/deep/</code> 的作用和scoped也有点类似。</p><h2 id="css中的scoped"><a href="#css中的scoped" class="headerlink" title="css中的scoped"></a>css中的scoped</h2><p>使用<code>&lt;style scoped&gt;</code>，这样父组件中如果有跟子组件相同的class名称或者使用选择器的时候，就不会影响到子组件的样式。</p><p>通过给style添加<code>scoped</code>，使它的<strong>css只作用于当前组件的元素。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="string">&#x27;#999&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="深度选择器-deep"><a href="#深度选择器-deep" class="headerlink" title="深度选择器 /deep/"></a>深度选择器 /deep/</h2><p>使用了外界的组件（比如像Element-UI、Ant Design、Vant等组件库中的组件）或者自己开发一个组件，修改一处就可能会影响到用这个组件的所有样式，所以就需要有一个方法或者方式，<strong>既不影响到别的地方</strong>，<strong>又能修改子组件在当前的样式</strong>。<code>/deep/</code>就能实现。</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> /deep/ <span class="selector-class">.el-tabs__item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#303133</span> <span class="meta">!important</span>;  // !important 优先级</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v-deep"><a href="#v-deep" class="headerlink" title="::v-deep"></a>::v-deep</h2><p>在vue2中，我们舍弃了’&gt;&gt;&gt;’ 和 / deep /，改用<strong>::v-deep</strong>来进行深度选择</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::v-deep .el-col &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v-deep-1"><a href="#v-deep-1" class="headerlink" title="v-deep"></a>v-deep</h2><p>而在vue3中，官方推荐使用<strong>v-deep(.className)</strong>来进行深度选择，当然::v-deep依旧也可以使用，不过可以采用缩写的方式来进行css编译—— <strong>:deep</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">::<span class="built_in">v-deep</span>(.el-col) &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 缩写</span><br><span class="line">:<span class="built_in">deep</span>(.el-col) &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css中的-deep-的作用&quot;&gt;&lt;a href=&quot;#css中的-deep-的作用&quot; class=&quot;headerlink&quot; title=&quot;css中的 /deep/ 的作用&quot;&gt;&lt;/a&gt;css中的 /deep/ 的作用&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue中$emit的用法</title>
    <link href="https://aliveseven.github.io/posts/3900e167/"/>
    <id>https://aliveseven.github.io/posts/3900e167/</id>
    <published>2022-12-07T15:38:31.955Z</published>
    <updated>2023-01-07T17:37:23.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue中-emit的用法"><a href="#Vue中-emit的用法" class="headerlink" title="Vue中$emit的用法"></a>Vue中$emit的用法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发的过程中，我们很多时候都需要用到组件之间的通信，父组件可以通过props把数据传给子组件，这是父→子的通信。同样，也有子→父的通信方式，$emit就是其中的一种。子组件可以通过$emit，让父组件监听到自定义事件。</p><h2 id="Vue2中"><a href="#Vue2中" class="headerlink" title="Vue2中"></a>Vue2中</h2><blockquote><p>使用：比如子组件使用$emit定义一个 自定义事件FuncHello</p></blockquote><ul><li>子组件在方法中设定一个sendByEmit方法，方法中使用$emit向父组件发出启动’FuncHello’的方法，传入的参数是data。</li><li>加入一个按钮，点击按钮触发sendByEmit函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;sendByEmit()&quot;&gt;按下发送$emit&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name :  &#x27;Children&#x27;,</span><br><span class="line">    props : &#123;</span><br><span class="line">        msg : String</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        sendByEmit()&#123;</span><br><span class="line">            let data = &#x27;hello&#x27;</span><br><span class="line">            this.$emit(&#x27;FuncHello&#x27;, data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>父组件中引入子组件，通过v-on或者是@引入自定义的方法FuncHello</p></blockquote><ul><li>加入一个h1标签，用v-for的方法将数据中的text数组遍历出来。</li><li>声明一个getEmitData方法，用于接受FuncHello方法传过来的数据，对数据进行操作，这里是把数据推到text数组里面</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 v-for=&quot;(item, index) in text&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">        &lt;Children @FuncHello=&quot;getEmitData&quot; &gt;&lt;/Children&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Children from &#x27;@/components/Children.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name : &#x27;Father&#x27;,</span><br><span class="line">    components : &#123;</span><br><span class="line">        Children</span><br><span class="line">    &#125;, </span><br><span class="line">    data() &#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            text : [&#x27;12345&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        getEmitData(data)&#123;</span><br><span class="line">            this.text.push(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h8voh8ucx5g30b40kv3zn.gif" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue中-emit的用法&quot;&gt;&lt;a href=&quot;#Vue中-emit的用法&quot; class=&quot;headerlink&quot; title=&quot;Vue中$emit的用法&quot;&gt;&lt;/a&gt;Vue中$emit的用法&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>XSS和CSRF的概念</title>
    <link href="https://aliveseven.github.io/posts/9509af57/"/>
    <id>https://aliveseven.github.io/posts/9509af57/</id>
    <published>2022-12-02T12:35:56.065Z</published>
    <updated>2023-01-07T17:36:08.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XSS和CSRF的概念"><a href="#XSS和CSRF的概念" class="headerlink" title="XSS和CSRF的概念"></a>XSS和CSRF的概念</h1><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>全称Cross Site Scripting，名为<strong>跨站脚本攻击</strong>，黑客将恶意脚本代码植入到页面中从而实现盗取用户信息等操作。</p><p>恶意攻击者往 Web 页面里嵌入恶意的客户端脚本，当用户浏览此网页时，脚本就会在用户的浏览器上执行，进而达到攻击者的目的。比如获取用户的 Cookie、导航到恶意网站、携带木马等。</p><h3 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h3><p>任何可以输入的地方都有可能引起XSS攻击，包括URL</p><ul><li>在HTML内嵌的文本中，恶意内容以script标签形成注入</li><li>在内联的JavaScript中，拼接的数据突破了原本的限制（字符串，变量，方法名）等</li><li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签</li><li>在标签的 <code>href、src</code> 等属性中，包含 <code>javascript:</code> (伪协议)等可执行代码。</li><li>在 <code>onload、onerror、onclick</code> 等事件中，注入不受控制代码。</li></ul><h3 id="XSS的分类"><a href="#XSS的分类" class="headerlink" title="XSS的分类"></a>XSS的分类</h3><p>可分为存储型、反射性和DOM型三种</p><h3 id="预防XSS"><a href="#预防XSS" class="headerlink" title="预防XSS"></a>预防XSS</h3><ul><li>前端和后端一起做数据过滤，前端可以使用axios拦截器，在发送请求前先过滤一遍数据，后端在接收时再过滤一遍。</li><li>尽量使用post，使用get方式时对路径长度进行限制</li><li>对输入、输出结果进行过滤和必要的转义</li></ul><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p><strong>跨站请求伪造</strong>（Cross-site request forgery），就是攻击者伪装成用户身份来执行一些非用户自愿的恶意以及非法操作。</p><p>典型的CSRF攻击：</p><ul><li>用户A经常访问网站B，然后攻击者发现网站B中存在CSRF的漏洞，加以利用，勾引用户A访问攻击者写好的危险网站C，此时用户A的cookie等信息还没有失效，危险网站C中有向网站B的非法请求，此时用户的信息就容易泄露了。</li><li>通常请求被放置在img标签的src中，当用户访问了包含这个标签的网页时，浏览器会自动向src中的地址提交一次http请求</li><li>通过夸张的广告诱导用户点击链接，跳转到危险的网站，该网站自动自动发送请求，冒充用户执行相应的操作。</li></ul><h3 id="预防CSRF"><a href="#预防CSRF" class="headerlink" title="预防CSRF"></a>预防CSRF</h3><ul><li>验证码</li><li>设置CSRF Token，或使用TokenId令牌</li><li>为Set-Cookie响应头新增Samesite属性，Samesite=Strict</li></ul><h2 id="CSRF和XSS的区别"><a href="#CSRF和XSS的区别" class="headerlink" title="CSRF和XSS的区别"></a>CSRF和XSS的区别</h2><ol><li>CSRF需要登陆后操作，XSS不需要</li><li>CSRF是请求页面api来实现非法操作，XSS是向当前页面植入js脚本来修改页面内容。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;XSS和CSRF的概念&quot;&gt;&lt;a href=&quot;#XSS和CSRF的概念&quot; class=&quot;headerlink&quot; title=&quot;XSS和CSRF的概念&quot;&gt;&lt;/a&gt;XSS和CSRF的概念&lt;/h1&gt;&lt;h2 id=&quot;XSS&quot;&gt;&lt;a href=&quot;#XSS&quot; class=&quot;he</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue3+TypeScript实现节流</title>
    <link href="https://aliveseven.github.io/posts/67f65b3c/"/>
    <id>https://aliveseven.github.io/posts/67f65b3c/</id>
    <published>2022-11-28T15:31:54.116Z</published>
    <updated>2023-01-07T17:13:33.875Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-TypeScript实现节流"><a href="#Vue3-TypeScript实现节流" class="headerlink" title="Vue3+TypeScript实现节流"></a>Vue3+TypeScript实现节流</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>在Vue中可以使用闭包的方法实现防抖节流。</li><li>同样也可以用lodash函数库中的<em>.throttle() /  </em>.debounce()实现节流防抖</li><li>亦或是使用Vue中的directive()自定义指令，这样做的好处可以随处使用（建议）</li></ol><h2 id="自定义指令v-throttle"><a href="#自定义指令v-throttle" class="headerlink" title="自定义指令v-throttle"></a>自定义指令v-throttle</h2><ol><li>首先在src目录下新建一个throttle的文件夹</li><li>新建index.ts文件</li><li>写入下面的代码</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">App</span>, <span class="title class_">Directive</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出节流函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">setupThrottleDriective</span>(<span class="params">app : App</span>) &#123;</span><br><span class="line">  <span class="comment">/** 定时器 */</span></span><br><span class="line">  <span class="keyword">let</span> timer : <span class="built_in">any</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 节流，第二个参数就是要进行节流的时间间隔</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">throttleELfun</span>(<span class="params">el : HTMLElement, throttleTime = <span class="number">5000</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 监听元素，捕获事件</span></span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event:Event</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">        timer = <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          timer = <span class="literal">null</span></span><br><span class="line">        &#125;, throttleTime)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 阻止同层级事件的冒泡</span></span><br><span class="line">        event?.<span class="title function_">stopImmediatePropagation</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> throttleDirective : <span class="title class_">Directive</span>&lt;<span class="title class_">HTMLElement</span>&gt; = &#123;</span><br><span class="line">    <span class="comment">// 载入前(完成了data和el数据初始化)，执行下面的函数</span></span><br><span class="line">    <span class="title function_">beforeMount</span>(<span class="params">el, bingding</span>) &#123;</span><br><span class="line">      <span class="title function_">throttleELfun</span>(el, bingding.<span class="property">value</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 新建一个新的指令为throttle</span></span><br><span class="line">  app.<span class="title function_">directive</span>(<span class="string">&#x27;throttle&#x27;</span>, throttleDirective)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局导入指令"><a href="#全局导入指令" class="headerlink" title="全局导入指令"></a>全局导入指令</h2><ol><li>打开项目中的main.ts文件</li><li>引入函数setupThrottleDriective()</li><li>传入参数</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> setupThrottleDriective <span class="keyword">from</span> <span class="string">&#x27;./throttle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./assets/base.css&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">setupThrottleDriective</span>(app)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h8l9equg68j30l307n77p.jpg" alt=""></p><blockquote><p>然后即可直接在组件中使用了，使用之后会对该HTML元素进行监听，在一定的时间间隔里面多次执行，只会执行一次</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-TypeScript实现节流&quot;&gt;&lt;a href=&quot;#Vue3-TypeScript实现节流&quot; class=&quot;headerlink&quot; title=&quot;Vue3+TypeScript实现节流&quot;&gt;&lt;/a&gt;Vue3+TypeScript实现节流&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue中$nextTick的作用</title>
    <link href="https://aliveseven.github.io/posts/f4a37cd9/"/>
    <id>https://aliveseven.github.io/posts/f4a37cd9/</id>
    <published>2022-11-23T18:35:06.165Z</published>
    <updated>2023-01-07T17:11:56.942Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue中-nextTick的作用"><a href="#Vue中-nextTick的作用" class="headerlink" title="Vue中$nextTick的作用"></a>Vue中$nextTick的作用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有些时候，我们在做了某些回调方法或者说是作了某些修改数据的操作之后，会发现数据在视图上没有立即更新，出现这种情况如何解决，就用到了$nextTick了。</p><p>作用：它可以在下次dom更新循环结束之后执行延迟回调，在修改数据之后立即使用该方法，就可以获取更新之后的dom。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>在 Vue 的文档中，说明了 Vue 是<strong>异步</strong>执行 dom 更新的。然后异步任务的执行机制，是等所有同步任务执行完之后，浏览器读取任务队列中的异步任务，开始执行。当任务队列中的任务执行完毕之后，算一轮事件循环，这个时候Vue才会进行dom视图更新。</p><blockquote><p>Vue 在修改数据后，视图不会立刻更新，而是等<strong>同一事件循环</strong>中的所有数据变化完成之后，再统一进行视图更新。</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>在vue的生命周期 <code>created()</code> 钩子函数中进行 dom 操作，一定要放在 <code>$nextTick()</code> 函数中执行。在 <code>created()</code> 钩子函数执行的时候 DOM 其实并未进行任何渲染，而此时进行 DOM 操作无异于徒劳，所以此处一定要将 DOM 操作的代码放进 <code>nextTick()</code> 的回调函数中。</li><li>在数据变化后要执行某个操作，而这个操作需要使用随数据改变而改变的 DOM 结构的时候，这个操作都应该放进 Vue.nextTick()的回调函数中。</li><li>获取元素宽度，需要在 DOM 渲染完毕后执行</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue中-nextTick的作用&quot;&gt;&lt;a href=&quot;#Vue中-nextTick的作用&quot; class=&quot;headerlink&quot; title=&quot;Vue中$nextTick的作用&quot;&gt;&lt;/a&gt;Vue中$nextTick的作用&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>单链表反转</title>
    <link href="https://aliveseven.github.io/posts/6b96a7/"/>
    <id>https://aliveseven.github.io/posts/6b96a7/</id>
    <published>2022-11-23T15:31:31.944Z</published>
    <updated>2023-01-07T17:12:05.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>先声明一个新的节点pre = null，然后声明一个新的节点cur = head，把头节点赋值给它，然后声明一个中间节点temp = cur.next，也就是将下一个节点赋值给中间节点temp</p><p>然后，赋值完之后再对cur.next进行操作，领cur.next = pre，也就是将当前节点的下一个节点，就是当前传过来的节点，比如一开始不是传入头节点吗，那么这时就让头节点的下一个节点指向pre，也就是null，然后再对pre进行操作，领pre = cur，主要是为下一次的迭代做好铺路，再让cur = temp，就是将开头中间节点保存的那个节点赋值给cur。以上的这些操作一直循环执行，直到cur指向null</p><p>最后，这些操作完之后，此时pre就是最后的节点了，返回pre</p><h2 id="案例代码"><a href="#案例代码" class="headerlink" title="案例代码"></a>案例代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reverseList = <span class="keyword">function</span>(<span class="params">head</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.<span class="property">next</span> == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> head</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明中间变量</span></span><br><span class="line">        <span class="keyword">let</span> cur = head</span><br><span class="line">        <span class="keyword">let</span> pre = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">let</span> next = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 把下一个节点赋给next</span></span><br><span class="line">            next = cur.<span class="property">next</span></span><br><span class="line">            <span class="comment">// 再把下一个节点赋予中间值pre</span></span><br><span class="line">            cur.<span class="property">next</span> = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = next</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h8fn4jh21gj30r30os79m.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实现思路&quot;&gt;&lt;a href=&quot;#实现思路&quot; class=&quot;headerlink&quot; title=&quot;实现思路&quot;&gt;&lt;/a&gt;实现思路&lt;/h2&gt;&lt;p&gt;先声明一个新的节点pre = null，然后声明一个新的节点cur = head，把头节点赋值给它，然后声明一个中间节点te</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="算法" scheme="https://aliveseven.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue3通过Vite动态引入图片:scr</title>
    <link href="https://aliveseven.github.io/posts/b0c5b807/"/>
    <id>https://aliveseven.github.io/posts/b0c5b807/</id>
    <published>2022-11-18T13:12:01.255Z</published>
    <updated>2023-01-07T17:09:41.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3通过Vite动态引入图片-scr"><a href="#Vue3通过Vite动态引入图片-scr" class="headerlink" title="Vue3通过Vite动态引入图片:scr"></a>Vue3通过Vite动态引入图片:scr</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多时候我们在开发的时候需要动态引入图片，在Vue2中可以用require()来实现这个，但是Vue3中却不支持require()。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul><li>给scr绑定一个函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=&quot;getImageUrl(img)&quot; alt=&quot;&quot; /&gt;</span><br></pre></td></tr></table></figure><ul><li>获取照片的函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getImageUrl</span>(<span class="params">img : <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">`../assets/Img/<span class="subst">$&#123;img&#125;</span>.jpg`</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>).<span class="property">href</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="new-URL"><a href="#new-URL" class="headerlink" title="new URL()"></a>new URL()</h2><ul><li>用于创建一个新 URL 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title function_">URL</span>(url, [base])</span><br></pre></td></tr></table></figure><ul><li>url —— 完整的 URL，或者仅路径（如果设置了 base）</li><li>base —— 可选的 base URL：如果设置了此参数，且参数 url 只有路径，则会根据这个 base 生成 URL。</li><li><code>import.meta.url</code>是base url（根链接）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3通过Vite动态引入图片-scr&quot;&gt;&lt;a href=&quot;#Vue3通过Vite动态引入图片-scr&quot; class=&quot;headerlink&quot; title=&quot;Vue3通过Vite动态引入图片:scr&quot;&gt;&lt;/a&gt;Vue3通过Vite动态引入图片:scr&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>事件循环机制</title>
    <link href="https://aliveseven.github.io/posts/6628f169/"/>
    <id>https://aliveseven.github.io/posts/6628f169/</id>
    <published>2022-11-14T16:43:23.931Z</published>
    <updated>2023-01-07T17:08:43.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件循环机制"><a href="#事件循环机制" class="headerlink" title="事件循环机制"></a>事件循环机制</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript是一种单线程的，为了利用好资源和任务分配，JS将任务分为同步任务和异步任务，<strong>而事件循环就是规定了执行任务的顺序。</strong></p><h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>事件循环机制就是按照以下的顺序模式来循环执行JS中的任务事件</p><p>顺序如下：</p><ol><li>同步先执行</li><li>异步（微任务 &gt; dom渲染 &gt; 宏任务，然后又继续去找有没微任务）</li></ol><h2 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a>微任务</h2><ul><li>promise.then（new promise构造函数是同步）、async/await。</li><li>process.nextTick</li><li>Promise.catch</li><li>resove/reject</li><li>MutationObserver</li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><blockquote><p>Promise是异步的，是指他的then()和catch()方法，<strong>Promise本身还是同步的</strong>，所以遇到Promise还是先执行的Promise同步代码。（同步优先）</p></blockquote><h2 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a>宏任务</h2><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate</li><li>ajax请求</li><li>dom事件</li><li>script块</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>先执行同步代码，</li><li>遇到异步宏任务则将异步宏任务放入宏任务队列中，</li><li>遇到异步微任务则将异步微任务放入微任务队列中，</li><li>当所有同步代码执行完毕后，再将异步微任务从【队列】中调入【主线程】执行，</li><li>微任务执行完毕后再将异步宏任务从【队列】中调入【主线程】执行，<br>一直循环直至所有任务执行完毕。</li></ol><p>同步（Promise）&gt;异步（微任务（process.nextTick ，Promises.then，Promise.catch ，resove/reject，MutationObserver) &gt; 宏任务（setTimeout，setInterval，setImmediate））</p><p>注意 <code>new Promise()</code>是同步方法，<code>resolve</code>才是异步方法。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.程序开头，主线程，先执行，输出&#x27;script start&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.执行函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3.1 执行await函数async2，也就是promise.then()</span></span><br><span class="line">    <span class="comment">// 3.4 执行完第一个await函数之后，微任务队列中还有一个任务，暂时跳出async函数</span></span><br><span class="line">    <span class="comment">// 3.5 输出&#x27;async1 end&#x27;，保留async1函数的上下文，然后跳出async1函数</span></span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line">    <span class="comment">// 5.拿回执行权，输出</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 3.2 开始执行任务，输出 &#x27;async2 end&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2 end&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.3 promise.resolve().then()，先加入微任务队列中，等待下一轮事件循环执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2 end1&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.开始调用async函数</span></span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有微任务执行完，开始执行宏任务</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4 new Promise是同步的，先执行同步</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 4.1 输出 &#x27;promise&#x27;，执行完这轮同步操作，继续往下看，还有没有同步的</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;)  <span class="comment">// 4.1 出现promise.then()，加入微任务队列，那么队列中就有两个微任务，按照先进先出的原则来执行，这一轮循环会先执行3.3 中的微任务，但是还是先执行同步任务先</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">&#125;) <span class="comment">// 4.4 执行完上一个then()之后又产生一个新的微任务，继续输出，当前微任务队列执行完毕。执行权回到async1</span></span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.3 有同步任务，先执行同步任务，输出 &#x27;script end&#x27; ，再执行异步</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h8d3bi1ka3j30kw08v3z7.jpg" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h8d3ekd507j30aw0kkwfk.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;事件循环机制&quot;&gt;&lt;a href=&quot;#事件循环机制&quot; class=&quot;headerlink&quot; title=&quot;事件循环机制&quot;&gt;&lt;/a&gt;事件循环机制&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>宏任务和微任务详解</title>
    <link href="https://aliveseven.github.io/posts/eb14c465/"/>
    <id>https://aliveseven.github.io/posts/eb14c465/</id>
    <published>2022-11-14T13:52:43.384Z</published>
    <updated>2023-01-07T17:07:55.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="宏任务和微任务详解"><a href="#宏任务和微任务详解" class="headerlink" title="宏任务和微任务详解"></a>宏任务和微任务详解</h1><h2 id="JavaScript的单线程和任务队列"><a href="#JavaScript的单线程和任务队列" class="headerlink" title="JavaScript的单线程和任务队列"></a>JavaScript的单线程和任务队列</h2><ol><li>Js的内部引擎是单线程的，但是浏览器它是多线程的，单线程一意味着所有任务需要排队，前一个任务结束，才会执行后一个任务。</li><li>如果前一个任务耗时很长，后一个任务就不得不一直等待。而且有些时候，有些任务会挂载于<strong>等待状态</strong>，这个时候其实可以先去运行别的任务，等上一个任务需要再启动的时候，再来运行它。</li><li>于是，为了解决这个问题，有了同步任务（synchronous）和异步任务（asynchronous）。</li><li><strong>同步任务</strong>指的是，在<strong>主线程</strong>上，排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务</li><li><strong>异步任务</strong>指的是，不进入<strong>主线程</strong>，而进入“任务队列”（task queue）的任务，只有“任务队列”通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</li></ol><p>这里借用一张图，就很好解释了同步和异步任务的执行过程</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h850mrn783j30tr0oidm6.jpg" alt=""></p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><p>前面我们已经介绍了同步任务和异步任务的执行过程，为了协调这些任务有条不紊地在主线程上执行，页面进程引入了<strong>消息队列和事件循环机制</strong>。</p><p><strong>宏任务（task）</strong>：就是JS 内部（任务队列里）的任务，严格按照时间顺序压栈和执行。比如 script(整体代码)、 setTimeOut、setInverter、setImmediate 、 MessageChannel等。</p><p><strong>微任务（Microtask ）</strong>：微任务就是一个需要异步执行的函数，执行时机是在主函数执行结束之后、<strong>宏任务结束之前</strong>。比如process.nextTick、Promise.then()、async/await（实际就是Promise）、MutationObserver（HTML5新特性）</p><p>主要的执行顺序是：</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h850n8sa2hj30tp0o9dl8.jpg" alt=""></p><h2 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h2><ol><li>在执行栈中执行一个宏任务。</li><li>执行过程中遇到微任务，<strong>将微任务添加到微任务队列中</strong>。</li><li>当前宏任务执行完毕，<strong>立即执行微任务队列中的任务。</strong></li><li>当前微任务队列中的任务执行完毕，检查渲染，GUI线程接管渲染。</li><li>渲染完毕后，js线程接管，开启下一次事件循环，执行下一次宏任务（事件队列中取）。</li></ol><p>借用一下别人的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#x27;---start---&#x27;);//第一轮主线程</span><br><span class="line"> </span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;setTimeout&#x27;);  // 将回调代码放入个宏任务队列，第二轮宏任务执行</span><br><span class="line">&#125;, 0);</span><br><span class="line"> </span><br><span class="line">new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">  console.log(&#x27;---Promise第一轮微任务同步执行---&#x27;);//第一轮微任务同步执行</span><br><span class="line">  resolve()</span><br><span class="line">&#125;).then(()=&gt;&#123;</span><br><span class="line">  console.log(&#x27;Promise.then实例成功回调执行&#x27;); // 将回调代码放入微任务队列，第一轮宏任务执行完后立即执行</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">console.log(&#x27;---end---&#x27;);//第一轮主线程结束</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h84zxbure1j30ai050dgf.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;宏任务和微任务详解&quot;&gt;&lt;a href=&quot;#宏任务和微任务详解&quot; class=&quot;headerlink&quot; title=&quot;宏任务和微任务详解&quot;&gt;&lt;/a&gt;宏任务和微任务详解&lt;/h1&gt;&lt;h2 id=&quot;JavaScript的单线程和任务队列&quot;&gt;&lt;a href=&quot;#JavaSc</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Js实现元素拖拽</title>
    <link href="https://aliveseven.github.io/posts/e2d042a0/"/>
    <id>https://aliveseven.github.io/posts/e2d042a0/</id>
    <published>2022-11-12T06:24:13.951Z</published>
    <updated>2023-01-07T17:07:03.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js实现元素拖拽"><a href="#Js实现元素拖拽" class="headerlink" title="Js实现元素拖拽"></a>Js实现元素拖拽</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多时候，我们业务中需要对鼠标点击的元素进行拖拽，使用原生JS实现这个方法，主要用到鼠标事件和监听。</p><ol><li>onmousedown：鼠标按下事件</li><li>onmousemove：鼠标移动事件</li><li>onmouseup：鼠标抬起事件</li></ol><p>注意：</p><ol><li>被拖拽的元素一定要是绝对定位，脱离文档流才可以移动</li><li>绑定拖拽的元素，移动和鼠标松开后是对document的绑定，因为移动的是整个div。</li></ol><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ol><li>先获取<strong>被拖拽元素</strong>所能移动的<strong>最大距离</strong>，超过这个距离就移动不了</li><li>给元素的onmousedown绑定一个function(e)事件</li><li>获取鼠标按下的原点<strong>距离盒子边缘的距离</strong>diffX和diffY</li><li>设置onmousemove事件，将被拖拽元素的left和top设置</li><li>left的值是<strong>拖拽之后的那个位置</strong>的鼠标的x值减去diffX</li><li>top的值是<strong>拖拽之后的那个位置</strong>的鼠标的y值减去diffY</li><li>设置鼠标松开事件onmouseup</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 禁止图片拖拽打开新页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://tvax4.sinaimg.cn/large/ec43126fgy1gzp7qtgjs0j213a1jlnpd.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> <span class="attr">ondragstart</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 一定要绝对定位 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取盒子元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.box&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取元素最大能移动到的距离</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> maxLeft = <span class="variable language_">window</span>.<span class="property">innerWidth</span> - box.<span class="property">offsetWidth</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> maxTop = <span class="variable language_">window</span>.<span class="property">innerHeight</span> - box.<span class="property">offsetHeight</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 鼠标按下盒子事件</span></span></span><br><span class="line"><span class="language-javascript">    box.<span class="property">onmousedown</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取鼠标按下的原点距离盒子边缘的距离</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> diffX = e.<span class="property">clientX</span> - box.<span class="property">offsetLeft</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> diffY = e.<span class="property">clientY</span> - box.<span class="property">offsetTop</span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 鼠标移动</span></span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">onmousemove</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            e = e || <span class="variable language_">window</span>.<span class="property">event</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 移动之后记下鼠标在按下时的位置</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> x = e.<span class="property">clientX</span> - diffX</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> y = e.<span class="property">clientY</span> - diffY</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 限定元素只能在浏览器可视窗口内移动</span></span></span><br><span class="line"><span class="language-javascript">            x = x &lt; <span class="number">0</span> ? <span class="number">0</span> : x &gt; maxLeft ? maxLeft : x</span></span><br><span class="line"><span class="language-javascript">            y = y &lt; <span class="number">0</span> ? <span class="number">0</span> : y &gt; maxTop ? maxTop : y</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            box.<span class="property">style</span>.<span class="property">left</span> = x + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            box.<span class="property">style</span>.<span class="property">top</span> = y + <span class="string">&#x27;px&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        box.<span class="property">onmouseup</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">onmousemove</span> = <span class="literal">null</span> </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">onmouseup</span> = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h82bpvmwejg30ik0l2kjl.gif" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js实现元素拖拽&quot;&gt;&lt;a href=&quot;#Js实现元素拖拽&quot; class=&quot;headerlink&quot; title=&quot;Js实现元素拖拽&quot;&gt;&lt;/a&gt;Js实现元素拖拽&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Js实现防抖节流</title>
    <link href="https://aliveseven.github.io/posts/ffbd457d/"/>
    <id>https://aliveseven.github.io/posts/ffbd457d/</id>
    <published>2022-11-07T15:03:40.299Z</published>
    <updated>2023-01-07T17:06:21.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js实现防抖节流"><a href="#Js实现防抖节流" class="headerlink" title="Js实现防抖节流"></a>Js实现防抖节流</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>防抖节流是经常在开发中用到的一个东西，都是用来控制某个函数在一定时间内触发次数，两者都是为了<strong>减少触发频率</strong>，以便提高性能或者说避免资源浪费。</p><p><strong>防抖：</strong> n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p><p><strong>节流：</strong> n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</p><h2 id="手写防抖"><a href="#手写防抖" class="headerlink" title="手写防抖"></a>手写防抖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;FangDou&quot;</span>&gt;</span>防抖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#FangDou&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 手写防抖</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 防抖是函数在n秒内重复触发，则重新计时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// func  要进行防抖的方法，delay是要防抖的时间</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 声明变量来保存计时，让其作为局部变量保存在内存中，且不被随意访问，借助闭包来实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 返回一个闭包，通过return的函数可以来间接访问timer，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 保存闭包被调用时的this</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// let that = this</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果时间期限还没到又触发了，则清除上一个定时器，重新计算时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(timer)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清除定时器，debounce执行时要先把之前的setTimeout先清除再重新计时。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 箭头函数的this永远指向外层作用域的this</span></span></span><br><span class="line"><span class="language-javascript">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 使用apply来改变this指向，apply函数会执行fn函数，并改变this指向</span></span></span><br><span class="line"><span class="language-javascript">        func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 执行完毕之后，再把timer设为null</span></span></span><br><span class="line"><span class="language-javascript">                    timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">play</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11111</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">play</span> , <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="手写节流"><a href="#手写节流" class="headerlink" title="手写节流"></a>手写节流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写节流</span></span><br><span class="line"><span class="comment">// 节流是函数在n秒内重复触发，只触发一次</span></span><br><span class="line"><span class="comment">// func  要进行节流的方法，delay是要节流的时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func , delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 每次触发事件时，如果当前有等待执行的函数，则直接return</span></span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(<span class="variable language_">this</span> , <span class="variable language_">arguments</span>)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js实现防抖节流&quot;&gt;&lt;a href=&quot;#Js实现防抖节流&quot; class=&quot;headerlink&quot; title=&quot;Js实现防抖节流&quot;&gt;&lt;/a&gt;Js实现防抖节流&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
