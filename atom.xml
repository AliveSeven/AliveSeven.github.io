<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2023-08-19T13:56:30.923Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>禁止HTML页面进行缩放操作，以及meta标签的常见作用</title>
    <link href="https://aliveseven.github.io/posts/20b6931d/"/>
    <id>https://aliveseven.github.io/posts/20b6931d/</id>
    <published>2023-08-15T14:52:25.933Z</published>
    <updated>2023-08-19T13:56:30.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：开发H5的时候，有时候需要嵌入到IOS、安卓或者PC等其他端处，或者单纯是一个H5，可能有时候需要禁止用户对页面进行缩放和放大的操作。</p></blockquote><h2 id="meta是什么"><a href="#meta是什么" class="headerlink" title="meta是什么"></a>meta是什么</h2><ul><li>HTML中的meta标签用于提供关于网页的元数据信息，这些信息可以帮助浏览器正确地展示网页内容，同时也对**搜索引擎优化(SEO)**和社交媒体分享有一定作用。</li><li>meta标签主要包含name属性、http-equiv属性和content属性。这三个属性都是meta标签必须的属性。</li></ul><h2 id="meta标签可以包含以下信息"><a href="#meta标签可以包含以下信息" class="headerlink" title="meta标签可以包含以下信息"></a>meta标签可以包含以下信息</h2><ul><li><strong>网页关键词（keywords）</strong>：指定与页面相关的关键词，以便搜索引擎更好地理解并索引该页面。</li><li><strong>网页描述（description）</strong>：提供一个简短的描述，告诉搜索引擎和用户这个页面是关于什么的。</li><li><strong>编码方式（charset）</strong>：指定网页使用的字符编码方式，避免出现乱码问题。</li><li><strong>视口（viewport）</strong>：指定如何在移动设备上显示网页，使得用户可以更好地浏览。</li><li>其他信息：还可以包含其他自定义的元数据信息，比如作者、生成日期等。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>name属性用来指定元数据的名称，如“keywords”、“description”等；content属性则用来设置元数据的具体内容；而http-equiv属性则可以用来模拟HTTP头部的作用，常见的值有“refresh”、“content-type”等。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;HTML, CSS, JavaScript&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Learn HTML, CSS, and JavaScript online for free.&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;refresh&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5;url=https://www.example.com/&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>以上代码中第一个meta标签定义了页面的关键词，在<strong>搜索引擎优化</strong>时有着很大的作用；第二个meta标签则用来描述页面，帮助用户更好地了解该网页的内容；第三个meta标签则指定在5秒后自动跳转到另一个网页。</li></ul><blockquote><p>需要注意的是，虽然不是所有的meta标签都需要这三个属性，但至少需要一个name或http-equiv属性和一个content属性才能正确地定义元数据信息。</p></blockquote><h2 id="禁止HTML页面进行缩放操作"><a href="#禁止HTML页面进行缩放操作" class="headerlink" title="禁止HTML页面进行缩放操作"></a>禁止HTML页面进行缩放操作</h2><p>其实很简单，在index.html里面加入下面这行代码即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="设置防止手机百度转码"><a href="#设置防止手机百度转码" class="headerlink" title="设置防止手机百度转码"></a>设置防止手机百度转码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">content</span>=<span class="string">&quot;no-siteapp&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：开发H5的时候，有时候需要嵌入到IOS、安卓或者PC等其他端处，或者单纯是一个H5，可能有时候需要禁止用户对页面进行缩放和放大的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;meta是什么&quot;&gt;&lt;a href=&quot;#meta是什么&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML" scheme="https://aliveseven.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript基础</title>
    <link href="https://aliveseven.github.io/posts/dc8ffbe9/"/>
    <id>https://aliveseven.github.io/posts/dc8ffbe9/</id>
    <published>2023-08-15T14:52:25.865Z</published>
    <updated>2023-08-16T16:42:41.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>TS是JS的超集，所以JS基础的类型都包含在内</p><ul><li><strong>首先安装 npm install typescript -g</strong></li></ul><p>安装完之后，运行<strong>tsc -v</strong>可以看到当前ts的版本号</p><ul><li>nodejs环境执行ts文件</li><li>**npm i @types/node –save-dev **（node环境支持的依赖必装）</li><li><strong>npm i ts-node –g</strong></li></ul><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>基础类型：Boolean、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的 Symbol 和 ES10 的 BigInt。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>用string来定义，其中可以用`来定义ES6中的模板字符串，${expr}用来表示在模板字符串中的嵌入表达式。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str : <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 : <span class="built_in">string</span> = <span class="string">`web <span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li>支持十六<a href="https://so.csdn.net/so/search?q=%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">进制</a>、十进制、八进制和二进制；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notANumber : <span class="built_in">number</span> = <span class="title class_">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> num : <span class="built_in">number</span> = <span class="number">1234</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> infinityNumber : <span class="built_in">number</span> = <span class="title class_">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> decimal : <span class="built_in">number</span> = <span class="number">8</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> hex : <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> binary : <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> octal : <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//八进制s</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b : <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 : <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b3 : <span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个Boolean对象</span></span><br><span class="line"><span class="keyword">let</span> b4 : <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a>空值类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n : <span class="built_in">void</span> = <span class="literal">undefined</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m : <span class="built_in">void</span> = <span class="literal">null</span> <span class="comment">// 严格模式下不允许</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,m) <span class="comment">// undefined,null</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空类型函数，不需要return</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) : <span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></li></ul><h4 id="void和undefined和null的区别"><a href="#void和undefined和null的区别" class="headerlink" title="void和undefined和null的区别"></a>void和undefined和null的区别</h4><ul><li>void类型不能赋值为undefined</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写会报错 void类型不可以分给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样是没问题的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br><span class="line"> </span><br><span class="line"><span class="comment">//或者这样的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><hr><p>注意：如果你配置了tsconfig.json 开启了严格模式，<strong>null 不能 赋予 void 类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><ul><li>没有特定要哪个类型的时候，可以用any进行声明，而且可以随意切换类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">any</span> = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;AliveSeven&#x27;</span></span><br><span class="line">a = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>声明变量的时候没有指定任意类型默认为any</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">a = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;Aliving&#x27;</span></span><br><span class="line">a = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注意：如果使用any 就失去了TS类型检测的作用</p><p>TypeScript 3.0中引入的 <strong>unknown</strong> 类型，它是<strong>any</strong>类型对应的安全类型，比<strong>any</strong>更安全。</p><ul><li>unknown类型比any更加严格当你要使用any 的时候可以尝试使用unknow</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span>;</span><br><span class="line"> </span><br><span class="line">value = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">value = [];               <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br><span class="line"><span class="comment">//unknown类型不能赋值给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样就没问题 any类型是可以的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">any</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a   </span><br><span class="line"> </span><br><span class="line"><span class="comment">//unknown可赋值对象只有unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bbb</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aaa</span>:<span class="built_in">any</span>= <span class="string">&#x27;456&#x27;</span></span><br><span class="line"> </span><br><span class="line">aaa = bbb</span><br></pre></td></tr></table></figure><h2 id="接口和对象类型"><a href="#接口和对象类型" class="headerlink" title="接口和对象类型"></a>接口和对象类型</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>在ts中，我们定义对象的方式要用<strong>interface</strong>（接口）。</li><li>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种<strong>限制和规范</strong>的作用。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span></span><br><span class="line"><span class="comment">//使用接口约束的时候不能多一个属性也不能少一个属性</span></span><br><span class="line"><span class="comment">//必须与接口保持一致</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;213&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同名的接口，会合并</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名interface  可以合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,age : 20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>B接口继承了A接口，那么B接口的对象要有A接口的变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">interface</span> A&#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A&#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> obj : B = &#123;</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line">    name : <span class="string">&quot;AliveSeven&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)  <span class="comment">// &#123; age: 20, name: &#x27;AliveSeven&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="可选属性：-操作符"><a href="#可选属性：-操作符" class="headerlink" title="可选属性：?操作符"></a>可选属性：?操作符</h3><ul><li>?操作符用于声明<strong>可有可无的</strong>变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性的含义是该属性可以不存在</span></span><br><span class="line"><span class="comment">//所以说这样写也是没问题的</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    b?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意属性-propName-string"><a href="#任意属性-propName-string" class="headerlink" title="任意属性 [propName: string]"></a>任意属性 [propName: string]</h3><p>注意：<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这个例子当中我们看到接口中并没有定义sex但是并没有报错</span></span><br><span class="line"><span class="comment">//应为我们定义了[propName: string]: any;</span></span><br><span class="line"><span class="comment">//允许添加新的任意属性</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,sex : &#x27;boy&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h3><ul><li>readonly 只读属性是不允许被赋值的只能读取</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的</span></span><br><span class="line"><span class="comment">//因为sex是只读的不允许重新赋值</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">a.<span class="property">sex</span> = <span class="string">&#x27;girl&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="增加函数"><a href="#增加函数" class="headerlink" title="增加函数"></a>增加函数</h3><ul><li>接口里面可以声明函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="title function_">exam</span>() : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    <span class="attr">exam</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name: &#x27;AliveSeven&#x27;, sex: &#x27;boy&#x27;, exam: [Function: exam] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><ul><li>常见的声明数组方法👇</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   <span class="comment">// 数字类型数组</span></span><br><span class="line"><span class="keyword">let</span> b : <span class="built_in">string</span>[] = [<span class="string">&#x27;Alive&#x27;</span>,<span class="string">&#x27;Seven&#x27;</span>]  <span class="comment">//字符串类型数组</span></span><br><span class="line"><span class="keyword">let</span> c : <span class="built_in">boolean</span>[] = [<span class="literal">true</span> , <span class="literal">false</span>]  <span class="comment">// 布尔类型数组</span></span><br><span class="line"><span class="keyword">let</span> d : <span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Love&#x27;</span>,<span class="literal">true</span>]   <span class="comment">// 任意类型数组</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)  <span class="comment">// [ 1, 2, 3 ] [ &#x27;Alive&#x27;, &#x27;Seven&#x27; ] [ true, false ] [ 1, 2, &#x27;Love&#x27;, true ]</span></span><br></pre></td></tr></table></figure><ul><li>数组泛型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr : <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">66</span> , <span class="number">77</span> , <span class="number">88</span>]</span><br><span class="line"><span class="keyword">let</span> str : <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Love&#x27;</span> , <span class="string">&#x27;You&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> x : <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span>&gt; = [<span class="literal">true</span> , <span class="literal">false</span>]</span><br><span class="line"><span class="keyword">let</span> y : <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; = [<span class="number">1</span> , <span class="literal">true</span> , <span class="string">&#x27;Fly&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="keyword">let</span> z : <span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;&gt; = [[<span class="number">1</span> , <span class="number">2</span> , <span class="string">&#x27;Alive&#x27;</span>] , [<span class="number">66</span> , <span class="string">&#x27;Seven&#x27;</span> , <span class="string">&#x27;77&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr,str,x,y) <span class="comment">//  [ 66, 77, 88 ] [ &#x27;Love&#x27;, &#x27;You&#x27; ] [ true, false ] [ 1, true, &#x27;Fly&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z)  <span class="comment">// [ [ 1, 2, &#x27;Alive&#x27; ], [ 66, &#x27;Seven&#x27;, &#x27;77&#x27; ] ]</span></span><br></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    [index : <span class="built_in">number</span>] : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// [ 1,2,3,4 ]</span></span><br></pre></td></tr></table></figure><h3 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">//错误的arguments 是类数组不能这样定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) </span><br><span class="line">    <span class="comment">//ts内置对象IArguments 定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">IArguments</span> = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArguments</span> &#123;</span><br><span class="line">[<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line"><span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><ul><li> fn = (函数变量1 , 函数变量2 …) : 函数类型 =&gt; { 函数返回值 }</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn = (函数变量1 , 函数变量2 , 可选函数变量3 ) : 函数类型 =&gt; &#123; 函数返回值 &#125;</span></span><br><span class="line"><span class="keyword">const</span> fn = (name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex? : <span class="built_in">string</span>) : <span class="function"><span class="params">string</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (name + age + sex)  <span class="comment">// 返回name+age+sex组合字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : <span class="built_in">string</span> = <span class="title function_">fn</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// AliveSeven20undefined</span></span><br></pre></td></tr></table></figure><ul><li>可以接口来约束方法变量和类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = (a : A) : <span class="function"><span class="params">A</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x : A = &#123; name : <span class="string">&#x27;步君&#x27;</span> , age : <span class="number">21</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( x ) <span class="comment">// &#123; name: &#x27;步君&#x27;, age: 21 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul><li>重载是<strong>方法名字相同</strong>，而<strong>参数不同</strong>，返回类型可以相同也可以不同。</li><li>参数类型不同时，应设置为 <strong>any</strong>。</li><li>参数数量不同时，可以将不同的参数设置为<strong>可选</strong>。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">string</span>, params2: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">any</span>, params2?: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params2)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>,<span class="number">456</span>)</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span></span><br><span class="line"><span class="comment">//所以我们就可以使用联合类型支持座机字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写是会报错的因为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>函数使用联合类型：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="attr">something</span>:<span class="built_in">number</span> | <span class="built_in">boolean</span>):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> !!something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><ul><li><p>多种类型的集合，联合对象将具有所联合类型的所有成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Boy</span>&#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">AliveSeven</span> = (<span class="params">boy: People &amp; Boy</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">age</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">height</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">sex</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AliveSeven</span>(&#123;<span class="attr">age</span>: <span class="number">21</span>,<span class="attr">height</span>: <span class="number">180</span>,<span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 21</span></span><br><span class="line"><span class="comment">// 180 </span></span><br><span class="line"><span class="comment">// male</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">       <span class="attr">run</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">       <span class="attr">build</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">type</span> <span class="keyword">as</span> A).<span class="property">run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以使用类型断言来推断他传入的是A接口的值</span></span><br></pre></td></tr></table></figure><h3 id="使用any临时断言"><a href="#使用any临时断言" class="headerlink" title="使用any临时断言"></a>使用any临时断言</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">abc</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span></span><br></pre></td></tr></table></figure><h2 id="as-const"><a href="#as-const" class="headerlink" title="as const"></a>as const</h2><ul><li><p>是对字面值的<strong>断言</strong>，与const直接定义常量是有区别的</p></li><li><p>如果是普通类型跟直接const 声明是一样的</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="string">&#x27;AliveSeven&#x27;</span></span><br><span class="line">A = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> B = <span class="string">&#x27;AliveSeven&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">B = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">10</span>, <span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">a1.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span></span><br><span class="line">a2.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 通过，没有修改指针</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h3><ul><li>Boolean、Number、String、RegExp、Date、Error</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;我是步君&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;错误!&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br></pre></td></tr></table></figure><h3 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h3><p>Document、HTMLElement、Event、NodeList等</p><h3 id="定义Promise"><a href="#定义Promise" class="headerlink" title="定义Promise"></a>定义Promise</h3><p>如果我们不指定<strong>返回类型</strong>TS是推断不出来返回的是什么类型</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mq14ec5uj30wd09vtew.jpg"></p><p>指定返回的类型，这里指定为Number</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mr6jocakj30xg09w44u.jpg"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params"></span>) : <span class="title class_">Promise</span>&lt;<span class="title class_">Number</span>&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Number</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="title function_">reject</span>(<span class="number">0</span>)    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><h3 id="在Ts中定义类"><a href="#在Ts中定义类" class="headerlink" title="在Ts中定义类"></a>在Ts中定义类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行函数</span></span><br><span class="line">    run () &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</li></ul><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 默认为public，内外部都能访问</span></span><br><span class="line">    <span class="keyword">public</span> name : <span class="built_in">string</span></span><br><span class="line">    <span class="comment">// private修饰符，代表定义的变量私有的只能在内部访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">private</span> age : <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// protected修饰符，代表定义的变量私有的只能在内部和继承的子类中访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">protected</span> sex : <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 静态属性不需要new，可以直接通过类名调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">GPA</span> : <span class="built_in">number</span> = <span class="number">3.5</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex : <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AliveSeven</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// age只能在Person内部访问，这样写会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// sex只能在Person类或者其子类里面访问，同样报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">sex</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mr6t15kyj30ms05v77b.jpg"></p><h3 id="静态属性static"><a href="#静态属性static" class="headerlink" title="静态属性static"></a>静态属性static</h3><ul><li>在类中用static关键字声明的变量是静态属性，在constructor不能直接用this去访问，只能通过类名去调用。</li><li>同样用static声明的函数也不能用this去调用，也是通过类名调用</li><li>如果两个函数都是static 静态的是可以通过this互相调用</li></ul><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mseoj38rj30i3052gn0.jpg"></p><p><strong>完整代码：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 默认为public，内外部都能访问</span></span><br><span class="line">    <span class="keyword">public</span> name : <span class="built_in">string</span></span><br><span class="line">    <span class="comment">// private修饰符，代表定义的变量私有的只能在内部访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">private</span> age : <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// protected修饰符，代表定义的变量私有的只能在内部和继承的子类中访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">protected</span> sex : <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 静态属性不需要new，可以直接通过类名调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">GPA</span> : <span class="built_in">number</span> = <span class="number">3.5</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex : <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果两个函数都是static 静态的是可以通过this互相调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">A</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am Aliving&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;Alive7&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">        <span class="comment">// 子类可以访问protected的属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继承子类：&#x27;</span>,<span class="variable language_">this</span>.<span class="property">sex</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AliveSeven</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">GPA</span>)</span><br></pre></td></tr></table></figure><h3 id="interface-定义类"><a href="#interface-定义类" class="headerlink" title="interface 定义类"></a>interface 定义类</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mscf457tj30lv0aon13.jpg"></p><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="keyword">type</span> : <span class="built_in">boolean</span>) :<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="title function_">set</span>():<span class="built_in">void</span></span><br><span class="line">    <span class="variable constant_">AI</span> : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Alive&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类D继承类C，并且实现接口A和B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_ inherited__">C</span> <span class="keyword">implements</span> A,B&#123;</span><br><span class="line">    <span class="comment">// 接口B需要AI属性</span></span><br><span class="line">    <span class="attr">AI</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">AI</span> = <span class="string">&#x27;Aliving&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接口A有get方法需要实现</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">boolean</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接口B有set方法需要实现</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</p><p>下面这段代码会<strong>报错</strong>抽象类无法被实例化</p><p><strong>实例1：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><p><strong>实例2：</strong></p><p>我们在A类定义了 getName 抽象方法但为实现</p><p>我们B类实现了A定义的抽象方法，如不实现就不报错，<strong>我们定义的抽象方法必须在派生类实现</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">print</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(<span class="string">&#x27;AliveSeven&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">getName</span>()); <span class="comment">// AliveSeven</span></span><br></pre></td></tr></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><ul><li><strong>元组（Tuple）是固定数量的不同类型的元素的组合</strong></li><li>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="keyword">readonly</span> [<span class="built_in">number</span>,<span class="built_in">boolean</span>,<span class="built_in">string</span>,<span class="literal">undefined</span>] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">&#x27;sring&#x27;</span>,<span class="literal">undefined</span>]</span><br><span class="line"><span class="comment">// arr[0]的类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(arr[<span class="number">0</span>]))  <span class="comment">// number</span></span><br><span class="line"><span class="comment">// arr[1]的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>].<span class="property">length</span>)  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>例如：红绿蓝 Red = 0，Green = 1，Blue= 2，分别代表红色0，绿色为1，蓝色为2</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认就是从0开始的 可以不写值</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增长枚举"><a href="#增长枚举" class="headerlink" title="增长枚举"></a>增长枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">Green</span>,</span><br><span class="line">   <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们定义了一个数字枚举， Red使用初始化为 <code>1</code>。 其余的成员会从 <code>1</code>开始自动增长。 换句话说， Type.<code>Red</code>的值为 <code>1</code>， <code>Green</code>为 <code>2</code>， <code>Blue</code>为 <code>3</code>。</p><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><ul><li>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。</li></ul><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><ul><li>枚举可以混合字符串和数字成员</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口枚举"><a href="#接口枚举" class="headerlink" title="接口枚举"></a>接口枚举</h3><p>定义一个枚举Types，定义一个接口A，他有一个属性<code>red</code>值为<code>Types.yyds</code></p><p>声明对象的时候要遵循这个规则</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">   yyds,</span><br><span class="line">   dddd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:A = &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><p>let 和 var 都是不允许声明枚举enum的，只能使用const。</p><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格，这时我们可以用const枚举</p><ul><li>const 声明的枚举会被编译成常量</li><li>普通声明的枚举编译完后是个对象</li></ul><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = <span class="number">2</span>,</span><br><span class="line">    C = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据枚举的值name映射得到value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Types</span>.<span class="property">A</span>)  <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 根据枚举的value映射得到name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Types</span>[<span class="number">1</span>])  <span class="comment">// C</span></span><br></pre></td></tr></table></figure><h2 id="类型推论-类型别名"><a href="#类型推论-类型别名" class="headerlink" title="类型推论 | 类型别名"></a>类型推论 | 类型别名</h2><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>我声明了一个变量但是没有定义类型。</p><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p><p>比如我声明一个str变量是’Alive’，所以TS帮我推断出来这是一个string类型。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mscxvdeuj309402374j.jpg"></p><p>我们在后面不能再给这个str赋值给别的类型的值。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfe9xz0j30eo041jsj.jpg"></p><p>如果你声明变量没有定义类型也没有赋值这时候TS会推断成any类型可以进行任何操作。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfmofrsj30lv07sgnf.jpg"></p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p><code>type</code> 关键字（可以给一个类型定义一个名字）多用于符合类型</p><p>定义<strong>类型</strong>别名：</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfs5yhfj30ki091jub.jpg"></p><p> 定义<strong>函数</strong>别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="function">() =&gt;</span> <span class="string">&quot;AliveSeven&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// [Function: s]</span></span><br></pre></td></tr></table></figure><p> 定义<strong>联合类型</strong>别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="number">123</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>: str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,s2);  <span class="comment">// 123  123</span></span><br></pre></td></tr></table></figure><p>定义<strong>值</strong>的别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//变量A的值  只能是上面value定义的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">A</span>:value = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h2><p>TypeScript 将使用 never 类型来表示不应该存在的状态</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfxgc2qj30je0dejv7.jpg"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A同时为number和string，这是不可能发生的事情，所以A为never</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span> &amp; <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) : <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="never-与-void-的差异"><a href="#never-与-void-的差异" class="headerlink" title="never 与 void 的差异"></a>never 与 void 的差异</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void类型只是没有返回值 但本身不会出错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Void</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;空&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只会抛出异常没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Never</span>(<span class="params"></span>):<span class="built_in">never</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;NEVER&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>比如当我们新增了一个C接口，我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG。</p><p>而且这将是一个“隐蔽型”的BUG，如果回归面不够广，很难发现此类BUG。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;A类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;B类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;C类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">All</span> = A | B</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">val : All</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span> ( val.<span class="property">type</span> )&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A类&#x27;</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B类&#x27;</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="comment">// 一般进不来这一步，进来就是程序异常了</span></span><br><span class="line">            <span class="keyword">const</span> check : <span class="built_in">never</span> = val</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于任何类型都不能赋值给 <code>never</code> 类型的变量，所以当存在进入 <code>default</code> 分支的可能性时，TS的类型检查会及时帮我们发现这个问题。</p><h2 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>自ECMAScript 2015起，<code>symbol</code>成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。</p><p><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>); <span class="comment">// 可选的字符串key</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2) <span class="comment">// Symbol(key)</span></span><br></pre></td></tr></table></figure><h3 id="Symbols是不可改变且唯一的。"><a href="#Symbols是不可改变且唯一的。" class="headerlink" title="Symbols是不可改变且唯一的。"></a>Symbols是不可改变且唯一的。</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">sym2 === sym3; <span class="comment">// false, symbols是唯一的</span></span><br></pre></td></tr></table></figure><h3 id="用做对象属性的键"><a href="#用做对象属性的键" class="headerlink" title="用做对象属性的键"></a>用做对象属性的键</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sym]: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]); <span class="comment">// &quot;value&quot;</span></span><br></pre></td></tr></table></figure><h3 id="symbol属性，不能通过如下方式遍历拿到"><a href="#symbol属性，不能通过如下方式遍历拿到" class="headerlink" title="symbol属性，不能通过如下方式遍历拿到"></a>symbol属性，不能通过如下方式遍历拿到</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj= &#123;</span><br><span class="line">   [symbol1]: <span class="string">&#x27;Aliving&#x27;</span>,</span><br><span class="line">   [symbol2]: <span class="string">&#x27;Seven&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">   <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 for in 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">   <span class="comment">// 注意在console看key,是不是没有遍历到symbol1</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 Object.keys 遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))</span><br><span class="line"><span class="comment">// 3 getOwnPropertyNames</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj))</span><br><span class="line"><span class="comment">// 4 JSON.stringfy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>遍历结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age</span><br><span class="line">sex</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27; ]</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27; ]</span><br><span class="line">&#123;&quot;age&quot;:21,&quot;sex&quot;:&quot;male&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>如何拿到：</strong></p><ol><li>Object.getOwnPropertySymbols方法</li><li>es6 的 Reflect 拿到对象的所有属性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj))</span><br><span class="line"><span class="comment">// 2 es6 的 Reflect 拿到对象的所有属性</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ Symbol(123), Symbol(456) ]</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27;, Symbol(123), Symbol(456) ]</span><br></pre></td></tr></table></figure><h3 id="Symbol-iterator-迭代器"><a href="#Symbol-iterator-迭代器" class="headerlink" title="Symbol.iterator 迭代器"></a>Symbol.iterator 迭代器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    age : <span class="built_in">number</span>,</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明只读数组array</span></span><br><span class="line"><span class="keyword">const</span> array : <span class="title class_">Array</span>&lt;A&gt; = [&#123; age : <span class="number">21</span>, name : <span class="string">&#x27;AliveSeven&#x27;</span> &#125;, &#123; age : <span class="number">22</span> , name : <span class="string">&#x27;Alive&#x27;</span> &#125;, &#123; age : <span class="number">23</span>, name : <span class="string">&#x27;Seven&#x27;</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> mapTypes = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> map : <span class="title class_">Map</span>&lt;mapTypes , mapTypes&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;1&#x27;</span> , <span class="string">&#x27;步君&#x27;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;七海&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set : <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = ( arg : <span class="built_in">any</span> ) : <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> it : <span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; = arg[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">    <span class="keyword">let</span> next : <span class="built_in">any</span>= &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">        next =  it.<span class="title function_">next</span>()</span><br><span class="line">        <span class="keyword">if</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(array)</span><br><span class="line"><span class="comment">// &#123; age: 21, name: &#x27;AliveSeven&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 22, name: &#x27;Alive&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 23, name: &#x27;Seven&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>以下为这些symbols的列表：</p><p><strong>Symbol.hasInstance</strong><br>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</p><p><strong>Symbol.isConcatSpreadable</strong><br>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</p><p><strong>Symbol.iterator</strong><br>方法，被for-of语句调用。返回对象的默认迭代器。</p><p><strong>Symbol.match</strong><br>方法，被String.prototype.match调用。正则表达式用来匹配<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>。</p><p><strong>Symbol.replace</strong><br>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</p><p><strong>Symbol.search</strong><br>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</p><p><strong>Symbol.species</strong><br>函数值，为一个构造函数。用来创建派生对象。</p><p><strong>Symbol.split</strong><br>方法，被String.prototype.split调用。正则表达式来用分割字符串。</p><p><strong>Symbol.toPrimitive</strong><br>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</p><p><strong>Symbol.toStringTag</strong><br>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</p><p><strong>Symbol.unscopables</strong><br>对象，它自己拥有的属性会被with作用域排除在外。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3><p>语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T。</p><p>当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数泛型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Alive</span>(<span class="params"> A : <span class="built_in">string</span> , B : <span class="built_in">number</span> </span>) : <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> [A , B]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型优化，动态泛型，X,Y为动态类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Fn</span>&lt;X,Y&gt;( a : X , b : Y ) : <span class="title class_">Array</span>&lt;X | Y&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> [a , b]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Alive</span>(<span class="string">&#x27;我是步君&#x27;</span>,<span class="number">7</span>)</span><br><span class="line"><span class="title class_">Fn</span>&lt;<span class="built_in">string</span> , <span class="built_in">number</span>&gt;(<span class="string">&#x27;七海&#x27;</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li>声明接口的时候 在名字后面加一个&lt;参数&gt;</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A&lt;T&gt;&#123;</span><br><span class="line">    (arg : T) : T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Fn</span>&lt;T&gt;(args : T) : T &#123;</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result : A&lt;<span class="built_in">string</span>&gt; = <span class="title class_">Fn</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>(<span class="string">&#x27;Aliving&#x27;</span>))  <span class="comment">// Aliving</span></span><br></pre></td></tr></table></figure><h3 id="对象字面量泛型"><a href="#对象字面量泛型" class="headerlink" title="对象字面量泛型"></a>对象字面量泛型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A : &#123; &lt;T&gt;(arg : T) : T &#125;</span><br><span class="line"></span><br><span class="line">A = <span class="keyword">function</span> &lt;T&gt;(arg : T)  : T&#123;</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">A</span>(<span class="string">&#x27;天选国V&#x27;</span>)) <span class="comment">// 天选国V</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>我们期望在一个泛型的变量上面，获取其<code>length</code>参数，但是，有的数据类型是没有<code>length</code>属性的</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msg6op10j30fn06275f.jpg"></p><p>于是，我们就得对使用的泛型进行约束，我们约束其为具有<code>length</code>属性的类型，这里我们会用到<code>interface</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Len</span> &#123;</span><br><span class="line">    length : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getLegnth&lt;T <span class="keyword">extends</span> <span class="title class_">Len</span>&gt;(<span class="attr">arg</span>:T) &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLegnth&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;七海小姐姐&#x27;</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="使用keyof-约束对象"><a href="#使用keyof-约束对象" class="headerlink" title="使用keyof 约束对象"></a>使用keyof 约束对象</h3><ol><li>首先定义了T类型并使用extends关键字继承object类型的子类型，</li><li>然后使用keyof操作符获取T类型的所有键，它的返回类型是联合类型</li><li>最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> prop&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> <span class="title class_">All</span> = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">prop</span>(<span class="title class_">All</span>, <span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"><span class="title function_">prop</span>(<span class="title class_">All</span>, <span class="string">&#x27;d&#x27;</span>) <span class="comment">//此时就会报错发现找不到，</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msghsn54j30ks0600uz.jpg"></p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>声明方法跟函数类似名称后面定义&lt;类型&gt;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Alive</span>&lt;T&gt;&#123;</span><br><span class="line">    a : T[] = [];</span><br><span class="line">    <span class="title function_">add</span>(a : T) : T[] &#123;</span><br><span class="line">        <span class="keyword">return</span> [a]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Alive</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">x.<span class="property">a</span> = [<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;Alive&#x27;</span>,<span class="string">&#x27;Seven&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">add</span>(<span class="string">&#x27;ABC&#x27;</span>)) <span class="comment">// [&#x27;ABC&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="keyword">new</span> <span class="title class_">Alive</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">y.<span class="property">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">add</span>(<span class="number">123</span>)) <span class="comment">// [ 123 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;TS是JS的超集，所以JS基础的类型都包含在内&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;首先安装 npm install type</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Electron使用Naive UI在渲染进程上传文件</title>
    <link href="https://aliveseven.github.io/posts/98111281/"/>
    <id>https://aliveseven.github.io/posts/98111281/</id>
    <published>2023-08-15T14:52:25.834Z</published>
    <updated>2023-08-15T16:35:37.369Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：由于electron的特性，将代码分为主进程和渲染进程，由于安全原因，渲染进程不能直接访问操作系统资源，如文件系统、网络等，需要通过主线程提供的API来进行操作。同时，为了保证性能和稳定性，应该避免在渲染进程中执行耗时的操作，例如大量的计算、数据处理等。</p></blockquote><h2 id="Naive-UI的上传组件在electron中使用"><a href="#Naive-UI的上传组件在electron中使用" class="headerlink" title="Naive UI的上传组件在electron中使用"></a>Naive UI的上传组件在electron中使用</h2><ul><li>简单的上传可以直接用其封装好的钩子函数即可，但是如果要自定义上传后的操作，需要写一个函数进一步解决相关的需求</li></ul><h3 id="自定义上传函数"><a href="#自定义上传函数" class="headerlink" title="自定义上传函数"></a>自定义上传函数</h3><ol><li>一开始的时候是用自定义上传的钩子函数custom-request来对上传后的文件流进行编辑</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传文件的函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadFileRequest</span>(<span class="params">file: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;file&#x27;</span>, file)</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">FormDatas</span> = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    <span class="comment">// 上传文件的需要formdata类型;所以要转</span></span><br><span class="line">    <span class="title class_">FormDatas</span>.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, file.<span class="property">file</span>.<span class="property">file</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title class_">Api</span>.<span class="property">File</span>.<span class="title function_">uploadFile</span>(<span class="title class_">FormDatas</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="string">&#x27;200&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">handleUploadSuccess</span>()</span><br><span class="line">            <span class="title function_">emit</span>(<span class="string">&#x27;UploadVideoSuc&#x27;</span>, res?.<span class="property">data</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">code</span> == <span class="string">&#x27;701&#x27;</span> || res.<span class="property">code</span> == <span class="string">&#x27;702&#x27;</span>) &#123;</span><br><span class="line">            <span class="title function_">handleUploadError</span>(res.<span class="property">msg</span>)</span><br><span class="line">            <span class="title function_">emit</span>(<span class="string">&#x27;UploadVideoSuc&#x27;</span>, res?.<span class="property">data</span>.<span class="property">url</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">handleUploadError</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><strong>这种方法在Web浏览器上是可以实现的，但是到了electron上面的渲染进程就不可以了。</strong></li><li>解决方法也很简单，不用该自定义的钩子函数来实现上传即可。</li></ol><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><ul><li>Naive UI有自己封装好的上传成功和失败的函数，主要用到on-finish这个钩子函数 </li><li>我这里主要是获取上传成功后的url信息，所以用到了JSON.parse(options.event.target.response).data.url</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传成功函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleUploadSuccess</span>(<span class="params">options?: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&#x27;上传成功&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> response = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(options.<span class="property">event</span>.<span class="property">target</span>.<span class="property">response</span>);</span><br><span class="line">    <span class="keyword">if</span>(response.<span class="property">code</span> == <span class="string">&#x27;200&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">emit</span>(<span class="string">&#x27;UploadCoverSuc&#x27;</span>, response.<span class="property">data</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">emit</span>(<span class="string">&#x27;UploadCoverSuc&#x27;</span>, response.<span class="property">data</span>.<span class="property">url</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>其中options.event.target.response就是上传成功后返回的相关信息，相当于请求了接口后返回的res吧</li><li>JSON.parse(options.event.target.response).data.url其实就是相对应res.data.url</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：由于electron的特性，将代码分为主进程和渲染进程，由于安全原因，渲染进程不能直接访问操作系统资源，如文件系统、网络等，需要通过主线程提供的API来进行操作。同时，为了保证性能和稳定性，应该避免在渲染进程中执行耗时的操作，例如大量的计算、</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    <category term="Electron" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Electron/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="Electron" scheme="https://aliveseven.github.io/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Flex弹性布局详解</title>
    <link href="https://aliveseven.github.io/posts/8a0f1987/"/>
    <id>https://aliveseven.github.io/posts/8a0f1987/</id>
    <published>2023-08-15T14:52:25.834Z</published>
    <updated>2023-08-17T11:50:13.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>flex就是flexible box的缩写，意为弹性布局，任何一个容器都可以指定为flex布局</p><p><strong>Webkit</strong>内核的浏览器，必须加上-webkit前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p></blockquote><p>🌀<em><strong>Flex布局与传统布局对比：</strong></em></p><p><strong>传统布局：</strong></p><ul><li>兼容性好</li><li>布局繁琐</li><li>局限（不能在移动端很好的布局）</li></ul><p><strong>FLex布局：</strong></p><ul><li>操作方便，布局简单，移动端广泛应用</li><li>PC端浏览器支持较差</li><li>IE11或更低版本不支持或部分支持</li></ul><p>🌀<em><strong>Flex布局原理：</strong></em></p><p>–通过给父元素添加flex属性来控制子元素的位置和排列方式</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>容器默认存在两根轴：水平的<strong>主轴</strong>（main axis）和垂直的<strong>交叉轴</strong>（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code></p><p>项目默认沿主轴排列，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code></p><p><img src="https://pic.imgdb.cn/item/649192a11ddac507cc46b1f7.jpg"></p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><ol><li><strong>flex-direction：设置主轴方向，一般默认为x轴</strong></li><li><strong>justify-content：设置主轴上的子元素排列方式，一般默认为y轴</strong></li><li><strong>flex-wrap：设置子元素是否换行</strong></li><li><strong>align-items：设置侧轴上子元素排列方式（单行）</strong></li><li><strong>align-content：设置侧轴上子元素排列方式（多行）</strong></li><li><strong>align-self：控制子元素本身在交叉轴上的对齐方式</strong></li><li><strong>flex-flow：复合属性，同时设置了flex-direction和flex-wrap</strong></li></ol><h3 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h3><ul><li><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>row</code>：默认值，主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第一个盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span>第二个盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span>&gt;</span>第三个盒子3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box4&quot;</span>&gt;</span>第四个盒子4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box5&quot;</span>&gt;</span>第五个盒子5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.flex</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-direction</span>: row-reverse;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: lime;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">220</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: chartreuse;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box3</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box4</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: cadetblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box5</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: darkturquoise;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/64919ddf1ddac507cc589c83.jpg"></p><h3 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h3><ul><li><p><code>justify-content</code> 是用于控制项目在主轴上的对齐方式。</p></li><li><p>常用属性有以下六个</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>flex-start</code><strong>：默认值，子盒子在主轴方向上排列，一般是在x轴水平方向，从左到右。</strong></li><li><code>flex-end</code><strong>：子盒子在主轴方向上反向排列，一般是在x轴水平方向，从右到左边。</strong></li><li><code>center</code><strong>：子盒子在主轴方向上居中。</strong></li><li><code>space-between</code><strong>：子盒子在主轴方向上，两端对齐，然后项目中间间隔是相等的。</strong></li><li><code>space-around</code><strong>：在主轴方向上，在左右两侧会留下边距。</strong></li><li><code>space-evenly</code><strong>：均匀排列每个元素，每个元素之间的间隔相等</strong></li></ul><p><img src="https://image-static.segmentfault.com/250/241/2502411604-75463c5584aa3aff"></p><h4 id="space-around、space-evenly和space-between的区别"><a href="#space-around、space-evenly和space-between的区别" class="headerlink" title="space-around、space-evenly和space-between的区别"></a>space-around、space-evenly和space-between的区别</h4><p><img src="https://pic.imgdb.cn/item/64919e151ddac507cc58ee1b.jpg"></p><h3 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h3><ul><li><strong>flex-wrap：</strong> 控制项目(子元素)是否换行</li></ul><p>它可能取三个值：</p><ul><li>nowrap：（默认值）不换行；</li><li>wrap：换行，第一行在上方；</li><li>wrap-reverse：换行，第一行在下方。</li></ul><blockquote><p><strong>注意：默认情况下是不换行的，如果父元素装不下会缩小所有子元素的宽度，使子元素挤在一起。</strong></p><p>如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第一个盒子1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box2&quot;</span>&gt;</span>第二个盒子2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box3&quot;</span>&gt;</span>第三个盒子3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box4&quot;</span>&gt;</span>第四个盒子4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box box5&quot;</span>&gt;</span>第五个盒子5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.flex</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: lime;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">199</span>, <span class="number">220</span>, <span class="number">220</span>);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里我父盒子长度设为300px，每个子盒子长度设为100px，此时不设置flex-wrap：wrap，会发生什么情况呢？</li><li>没错，不会换行，子盒子的宽度100px<strong>失效了</strong>，<strong>会自适应父盒子的宽度，主要是根据原本的宽度大小来进行等比缩放</strong></li><li>如图</li></ul><p><img src="https://pic.imgdb.cn/item/64919f461ddac507cc5a9f13.jpg"></p><ul><li>那么如果设置了flex-wrap：wrap，超出的部分就会进行分行</li><li>如图</li></ul><p><img src="https://pic.imgdb.cn/item/64919f8d1ddac507cc5b0728.jpg"></p><h3 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h3><ul><li><code>align-items</code> 是控制项目在交叉轴上的对齐方式，一般是垂直方向y轴上面的。</li><li>有常用的五个属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch | flex-start | flex-end | center | baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>stretch</code>：默认值，如果项目没有设置固定高度，则会被拉伸填充满交叉轴方向剩余的空间。</li><li><code>flex-start</code>：项目在沿交叉轴起始线位置对齐。</li><li><code>flex-end</code>：项目沿交叉轴终点线位置对齐。</li><li><code>center</code>：项目在交叉轴方向居中对齐。</li><li><code>baseline</code>：项目在交叉轴方向沿项目中第一行文字的基线对齐。</li></ul><p><img src="https://image-static.segmentfault.com/352/840/3528400318-699131d320f31e62"></p><blockquote><ol><li>stretch 是“拉伸，拉长”的意思，所以项目会被拉伸</li><li>start、end、center 分别的“起始”、“终点”、“中间”的意思，所以项目分别是起始位置、终端位置、居中对齐。</li><li>baseline 是“基线、底线”的意思，这里是沿文字的基线对齐的意思。</li></ol></blockquote><h3 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h3><ul><li><code>align-content</code> 控制多行项目（多根主轴线）对齐方式。类似 <code>justify-content</code> ，只不过，<code>align-content</code> 是控制行与行之间的空间分配，<code>justify-content</code> 是控制子盒子与子盒子之间的空间分配。</li><li>有七个常用的属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch | flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除了<strong>stretch属性</strong>外，其他的属性功能和性质基本和<strong>justify-content</strong>那里的属性一样</li><li><code>stretch</code><strong>：默认值，交叉轴方向剩余的空间平均分配到每一行，并且行的高度会拉伸，填满整行的空间</strong></li></ul><p><img src="https://image-static.segmentfault.com/719/027/719027543-420f34821a508347"></p><h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><ul><li><code>align-self</code> 控制子盒子本身在交叉轴上的对齐方式。优先级高于 <code>align-items</code>。<code>align-items</code> 是容器统一控制容器里的每个子盒子的对齐方式，<code>align-self</code> 则是子盒子控制子盒子本身的对齐方式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>align-self: auto;</code> ，继承容器设置的 <code>align-items</code> 的值。也就是默认是由容器设置 <code>align-items</code> 统一控制项目在交叉轴上的对齐方式。</li><li>除了比 <code>align-items</code> 多一个 <code>auto</code> 选项外，其他选项与 <code>align-items</code> 一致。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  dispaly: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; // 容器控制所有项目顶部对齐排列</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-class">.four</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end; // 第四个项目控制底部对齐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/110/315/1103156958-4717e400ec943764"></p><h3 id="flow-grow属性"><a href="#flow-grow属性" class="headerlink" title="flow-grow属性"></a>flow-grow属性</h3><ul><li><code>flex-grow</code> 用于控制子盒子在主轴方向上拉伸放大占剩余空间（如果有的话）的比例。</li><li>grow 的意思是“扩大，使生长”，所以就是让项目放大的意思。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>0</code>，不放大。</li></ul><p><img src="https://image-static.segmentfault.com/114/795/1147952730-93479b1ca8af8f91"></p><blockquote><p>例子中，容器宽设为 300px，项目宽设为 50px。项目总宽 150px，剩余空间宽 150px</p><p>flex-grow 都设置为 1 的时候，项目拉伸成 100px，剩余空间被按 1:1:1 分配，每个项目各占了 1/3。</p><p>flex-grow 分别设为 33、66、66 的时候，项目分别被拉伸成 87.5px、125px、87.5px，剩余空间被按 1:2:1 分配，项目分别占了剩余空间的 1/4、1/2、1/4。</p><p><strong>可以看到，放大的比例跟数值的大小无关，跟数值的比例有关。</strong></p></blockquote><h3 id="flow-shrink属性"><a href="#flow-shrink属性" class="headerlink" title="flow-shrink属性"></a>flow-shrink属性</h3><ul><li><code>flex-shrink</code> 用于控制项目在主轴方向上缩小的程度。数值越大，收缩越多</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认是 <code>flex-shrink: 1</code> ，同等比例收缩。</li></ul><p><img src="https://image-static.segmentfault.com/153/086/1530865475-13fb240e2cab993d"></p><blockquote><p>例子中，容器宽为 400px，项目宽为100px。因为项目超过了容器空间，所以自动被缩小了。默认 flex-shrink 是 1，所有项目同等比例缩小成 80px。</p><p>右上，设置 flex-shrink，全部设置为 0，项目保存原来设置的宽度 100px，不缩小，所以溢出容器空间。</p><p>右中，设置 flex-shrink 分别为 6、6、6、默认、默认，项目宽变成 70px、70px、70px、95px、95px，超出的 100px 分成 20 份，按比例缩小。</p><p>右上，设置 flex-shrink 分别为 999、默认、默认、默认、默认，项目宽变成 16px、96px、96px、96px、96px，可以看到这里就不按比例缩小的了。</p></blockquote><h3 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h3><ul><li><code>flex-basis</code> 用于初始化每个项目占据主轴空间的尺寸（main size）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex-basis: auto</code> , 自动检测尺寸，如果项目有设置尺寸，则取项目设置的值，否则根据项目内容计算出尺寸。</li></ul><h3 id="flex-项目的属性：flex"><a href="#flex-项目的属性：flex" class="headerlink" title="flex 项目的属性：flex"></a>flex 项目的属性：flex</h3><ul><li><code>flex</code> 是上面三个合并的简写。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: &lt;flex-grow&gt; [&lt;flex-shrink&gt;] [&lt;flex-basis&gt;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex: 0 1 auto;</code> 后两个参数为可选参数。</li></ul><ul><li><code>flex: auto</code>：等同于 <code>flex: 1 1 auto</code>。可以拉伸，可以缩小，自动计算项目尺寸，一般情况下会自动拉伸填充满整个容器。</li><li><code>flex: none</code>： 等同于 <code>flex: 0 0 auto</code>。不能拉伸，不能缩小，直接使用获取到项目的 <code>flex-basis</code> 尺寸。</li><li><code>flex: &lt;positive-number&gt;</code>：等同于 <code>flex: &lt;positive-number&gt; 1 0</code> 。positive-number 为正数，例如 <strong><code>flex: 1</code> 等同于 <code>flex: 1 1 0</code>。</strong></li></ul><h3 id="flex-项目的属性：order"><a href="#flex-项目的属性：order" class="headerlink" title="flex 项目的属性：order"></a>flex 项目的属性：order</h3><ul><li><code>order</code> 用于控制项目在主轴上的排列顺序。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值： <code>order: 0;</code> ，参数值正负数都可以，全部项目按主轴方向依次排列。设置后，按数值大小，从小到大排列。</li></ul><p><img src="https://image-static.segmentfault.com/144/234/1442340051-b6045f89bffe1540"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h2&gt;&lt;p&gt;flex就是flexible box的缩写，意为弹性布局，任何一个容器都可以指定为flex布局&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Web</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>用Vue + SpringBoot写一个Bilibili【Bilibili Pro】</title>
    <link href="https://aliveseven.github.io/posts/49f04d1f/"/>
    <id>https://aliveseven.github.io/posts/49f04d1f/</id>
    <published>2023-08-14T08:41:00.186Z</published>
    <updated>2023-08-17T11:50:40.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目：Bilibili-Pro"><a href="#项目：Bilibili-Pro" class="headerlink" title="项目：Bilibili Pro"></a>项目：Bilibili Pro</h2><ul><li>从0到1写一个仿B站写的一个项目，采用前后端分离，人不分离的方式来开发</li><li>Web端分为客户端和后台管理，项目也写了PC端，采用Electron 23开发，均由当前最新版Vite搭建</li><li>预览地址： <a href="https://www.bilibili.com/video/BV1nF411y7Pc/">https://www.bilibili.com/video/BV1nF411y7Pc/</a></li></ul><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><strong>前端（Web端）</strong><ul><li>Vue3 + TypeScript + Vue-Router + Pinia（Vuex） + Naive UI + Tailwindcss + Scss + Echarts等</li></ul></li><li><strong>后端（服务端）</strong><ul><li>SpringBoot + Myabtis-Plus + WebSocket + JWT等</li></ul></li><li><strong>数据库</strong><ul><li>MySql + Redis</li></ul></li><li><strong>开发环境</strong><ul><li>NodeJs: 16.15.0 + JDK: 1.8.2</li></ul></li></ul><h2 id="项目预览"><a href="#项目预览" class="headerlink" title="项目预览"></a>项目预览</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=274753962&bvid=BV1nF411y7Pc&cid=1235309462&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><h2 id="项目功能"><a href="#项目功能" class="headerlink" title="项目功能"></a>项目功能</h2><h4 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h4><ul><li>首页视频推荐、 Banner、 推荐类型</li><li>滚动分页、 骨架屏优化加载</li><li>搜索框获取热搜、 搜索历史、 热搜统计</li><li>视频动态、 综合动态展示</li><li>消息标记、 彩色图标</li><li>收藏夹、 收藏视频展示</li><li>历史观看视频展示</li><li>用户登陆、 注册</li></ul><h4 id="视频页"><a href="#视频页" class="headerlink" title="视频页"></a>视频页</h4><ul><li>视频播放、 预览、 点赞、 收藏</li><li>视频评论、 二级评论</li><li>视频倍速播放、 比例调整、 网页全屏、 全屏、 画中画播放（摸鱼模式）</li><li>视频音量控制、 进度条控制、 清晰度调整（1080P、 720P）、 视频快捷键</li><li>视频描述、 标签</li><li>视频弹幕发射、 彩色弹幕、 弹幕开关、 透明度、 显示范围等</li><li>弹幕列表（虚拟列表）</li></ul><h4 id="搜索（推荐）页"><a href="#搜索（推荐）页" class="headerlink" title="搜索（推荐）页"></a>搜索（推荐）页</h4><ul><li>视频模糊搜索、 分页</li><li>视频排序（最多播放、 最多收藏、 最新发布）</li></ul><h4 id="历史记录页"><a href="#历史记录页" class="headerlink" title="历史记录页"></a>历史记录页</h4><ul><li>查看视频观看历史记录</li><li>记录模糊搜索、 记录清楚</li></ul><h4 id="动态页"><a href="#动态页" class="headerlink" title="动态页"></a>动态页</h4><ul><li>动态发布</li><li>视频动态、 文本动态、 话题动态</li><li>动态评论、 动态点赞</li></ul><h4 id="消息中心页"><a href="#消息中心页" class="headerlink" title="消息中心页"></a>消息中心页</h4><ul><li><strong>回复我的：</strong> 同步所有相关回复（视频回复、 动态回复、 二级评论回复）</li><li><strong>收到的赞：</strong> 同步所有相关点赞（视频点赞、 动态点赞）</li><li>系统通知</li><li><strong>我的消息：</strong> 实时通信私聊</li><li>消息通知、 提醒</li><li>消息已读、 未读</li><li>消息标记</li><li>历史消息查看</li></ul><h4 id="个人中心页（TA人中心页）"><a href="#个人中心页（TA人中心页）" class="headerlink" title="个人中心页（TA人中心页）"></a>个人中心页（TA人中心页）</h4><ul><li>我的视频、 我的收藏夹</li><li>我的动态、 个人资料</li><li>我的投稿、 投稿视频排序</li><li>查看、 编辑、 删除、 新增收藏夹</li><li>收藏夹视频查询、 搜索、 排序</li><li>关注、 粉丝、 动态数</li><li>查看关注用户、 特别关注、 悄悄关注</li><li>查看粉丝用户</li></ul><h4 id="视频投稿（创造中心）"><a href="#视频投稿（创造中心）" class="headerlink" title="视频投稿（创造中心）"></a>视频投稿（创造中心）</h4><ul><li>视频上传、 封面上传</li><li>视频类型选择、 视频描述、 投稿上架时间</li></ul><h4 id="后台"><a href="#后台" class="headerlink" title="后台"></a>后台</h4><ul><li>展示用户项目进度、 动态、 代办事项（todolist）</li><li>主控台，数据可视化（Echarts）</li><li>视频审核、 增删改查</li><li>基于RBAC的权限模型（可分配角色和菜单权限）</li><li>文件上传、 导入、 导出</li><li>单表增上改查、 分页模糊查询</li></ul><h4 id="额外功能"><a href="#额外功能" class="headerlink" title="额外功能"></a>额外功能</h4><ul><li>多页面/单页面架构框架</li><li>JWT身份验证拦截</li><li>Axios二次封装请求、 Naive UI组件二次封装</li><li>CSS原子化、 使用Tailwind复用样式</li><li>集成Redis缓存、 代码生成器、 模板化</li><li>500、 403、 404页面</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;项目：Bilibili-Pro&quot;&gt;&lt;a href=&quot;#项目：Bilibili-Pro&quot; class=&quot;headerlink&quot; title=&quot;项目：Bilibili Pro&quot;&gt;&lt;/a&gt;项目：Bilibili Pro&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;从0到1写一个仿B站写的</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    <category term="SpringBoot" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/SpringBoot/"/>
    
    
    <category term="前端,Vue" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF-Vue/"/>
    
    <category term="后端,SpringBoot" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF-SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Rem布局和flexible.js详解</title>
    <link href="https://aliveseven.github.io/posts/9b5b7cda/"/>
    <id>https://aliveseven.github.io/posts/9b5b7cda/</id>
    <published>2023-06-14T14:06:27.249Z</published>
    <updated>2023-06-22T14:25:45.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：rem是目前移动端常用的布局之一，此外还有何其相似的em，em一般代表父元素的字体大小，而rem是相对于根元素字体大小的值。</p><p>flexible.js是手机淘宝团队出的简洁高效移动端适配库，其GitHub地址在 <a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Famfe%2Flib-flexible">https://github.com/amfe/lib-flexible</a></p></blockquote><h2 id="rem的原理"><a href="#rem的原理" class="headerlink" title="rem的原理"></a>rem的原理</h2><ul><li>rem布局的<strong>本质是等比缩放</strong>，一般是基于屏幕宽度</li><li>具体来说，<strong>rem 是指相对于文档根节点（即 HTML 标签）字号大小的单位</strong>。例如，如果文档根节点的字号大小为 16px，那么 1rem 就等于 16px。2rem就是32px</li></ul><h2 id="rem的使用"><a href="#rem的使用" class="headerlink" title="rem的使用"></a>rem的使用</h2><ul><li>可以使用 CSS 的 @media 和 JavaScript 等方式，根据设备<strong>屏幕宽度、像素密度</strong>等因素来动态设置字号大小，适合用于响应式设计，以适配不同设备的需求</li></ul><h2 id="rem的局限性和兼容性"><a href="#rem的局限性和兼容性" class="headerlink" title="rem的局限性和兼容性"></a>rem的局限性和兼容性</h2><ul><li>低版本浏览器支持问题：IE8 及以下的浏览器不支持使用 rem 单位，需要通过 polyfill 或者其他方式进行降级处理。</li><li>超大分辨率问题：在极端情况下，可能出现因为可以配置的最大 rem 值受到了限制导致的布局问题。</li></ul><h2 id="rem的实际应用场景和方法"><a href="#rem的实际应用场景和方法" class="headerlink" title="rem的实际应用场景和方法"></a>rem的实际应用场景和方法</h2><h3 id="通过像素密度来控制rem"><a href="#通过像素密度来控制rem" class="headerlink" title="通过像素密度来控制rem"></a>通过像素密度来控制rem</h3><ol><li>通过像素密度（Pixel Density）来控制 rem 布局，需要先了解设备像素比（Device Pixel Ratio，简称 DPR）的概念。</li><li>设备像素比指物理像素和逻辑像素之间的比例关系，通常用于描述高分辨率屏幕上的像素显示细节。</li></ol><h4 id="CSS实现"><a href="#CSS实现" class="headerlink" title="CSS实现"></a>CSS实现</h4><ul><li><p>在 CSS 中，可以使用 @media 查询来根据不同的设备像素比设置不同的文档根节点字号大小。</p></li><li><p>例如，假设文档根节点字号大小为 16px，当设备像素比为 1 时，将其字号大小设置为 16px；</p></li><li><p>当设备像素比为 2 时，将其字号大小设置为 32px；</p></li><li><p>当设备像素比为 3 时，将其字号大小设置为 48px，</p><blockquote><p>以此类推。具体代码如下：</p></blockquote></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">1.5</span>),</span><br><span class="line">       <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min--moz-device-pixel-ratio</span>: <span class="number">1.5</span>),</span><br><span class="line">       <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">-o-min-device-pixel-ratio</span>: <span class="number">3</span>/<span class="number">2</span>),</span><br><span class="line">       <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">1.5</span>) &#123;</span><br><span class="line">    <span class="comment">/* 设置文档根节点字号大小为 32px */</span></span><br><span class="line">    <span class="selector-tag">html</span> &#123; <span class="attribute">font-size</span>: <span class="number">32px</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JavaScript实现"><a href="#JavaScript实现" class="headerlink" title="JavaScript实现"></a>JavaScript实现</h4><ul><li>在 JavaScript 中，可以通过获取 window.devicePixelRatio 属性的值来动态设置文档根节点的字号大小。</li><li>例如，假设文档根节点字号大小为 16px，当设备像素比为 1 时，将其字号大小设置为 16px；</li><li>当设备像素比为 2 时，将其字号大小设置为 32px；当设备像素比为 3 时，将其字号大小设置为 48px</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line">    docEl.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="number">16</span> * dpr + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><blockquote><p>通过以上方式，我们可以根据设备像素比来控制 rem 布局，从而实现适配不同分辨率的设备屏幕，并提高页面的可用性和用户体验。</p></blockquote><h3 id="通过媒体查询屏幕宽度和等分来控制"><a href="#通过媒体查询屏幕宽度和等分来控制" class="headerlink" title="通过媒体查询屏幕宽度和等分来控制"></a>通过媒体查询屏幕宽度和等分来控制</h3><ul><li>假设设计稿是750px</li><li>我们把整个屏幕划分为10等分（也可以是15、20等分）</li><li>那么在320px设备的时候，字体大小为320/20 就是16px</li><li>以此类推能实现不同屏幕下，页面元素盒子等比例缩放的效果</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">// 设置常见的屏幕尺寸， 修改里面的<span class="selector-tag">html</span>文字大小</span><br><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 定义划分是<span class="number">20</span>等份</span><br><span class="line"><span class="keyword">@no</span>: <span class="number">20</span>;</span><br><span class="line">// <span class="number">320</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">320px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">360</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">360px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">360px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// <span class="number">375</span> iphone <span class="number">678</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">384px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">384px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">400px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">400px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">414px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">424px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">424px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">480px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">480px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">540px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">540px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">720px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">720px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">750px</span>)&#123;</span><br><span class="line">  <span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">750px</span> / @no;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更加简单暴力的方法——通过vw来控制"><a href="#更加简单暴力的方法——通过vw来控制" class="headerlink" title="更加简单暴力的方法——通过vw来控制"></a>更加简单暴力的方法——通过vw来控制</h3><ul><li>在 CSS 中，可以将视口宽度作为参照值，然后使用 rem 单位来设置元素的尺寸和间距。</li><li>例如，假设希望某个元素的宽度为视口宽度的 50%，可以将其设置为 50vw；</li><li>如果希望某个元素的上下间距为视口宽度的 1/10，可以将其设置为 0.1rem。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">1rem</span> auto;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2rem</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在以上代码中，容器元素的宽度被设置为视口宽度的 80%，上下间距被设置为文档根节点字号大小的 1rem（即视口宽度的十分之一），左右间距被设置为 2rem（即文档根节点字号大小的二分之一）。</li></ul><h2 id="flexible-js"><a href="#flexible-js" class="headerlink" title="flexible.js"></a>flexible.js</h2><ul><li>源码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">flexible</span> (<span class="variable language_">window</span>, <span class="variable language_">document</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span></span><br><span class="line">  <span class="keyword">var</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// adjust body font size</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setBodyFontSize</span> () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">body</span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">style</span>.<span class="property">fontSize</span> = (<span class="number">12</span> * dpr) + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, setBodyFontSize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">setBodyFontSize</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setRemUnit</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> rem = docEl.<span class="property">clientWidth</span> / <span class="number">10</span></span><br><span class="line">    docEl.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&#x27;px&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setRemUnit</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// reset rem unit on page resize</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, setRemUnit)</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;pageshow&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e.<span class="property">persisted</span>) &#123;</span><br><span class="line">      <span class="title function_">setRemUnit</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// detect 0.5px supports</span></span><br><span class="line">  <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fakeBody = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> testElement = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">    testElement.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;.5px solid transparent&#x27;</span></span><br><span class="line">    fakeBody.<span class="title function_">appendChild</span>(testElement)</span><br><span class="line">    docEl.<span class="title function_">appendChild</span>(fakeBody)</span><br><span class="line">    <span class="keyword">if</span> (testElement.<span class="property">offsetHeight</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      docEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;hairlines&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    docEl.<span class="title function_">removeChild</span>(fakeBody)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="variable language_">window</span>, <span class="variable language_">document</span>))</span><br></pre></td></tr></table></figure><h3 id="刨析"><a href="#刨析" class="headerlink" title="刨析"></a>刨析</h3><ul><li>这段代码是一个移动端适配方案的实现，主要功能是根据设备的屏幕宽度来设置文本的字号大小和页面中元素的尺寸（以 rem 为单位），从而实现在不同分辨率的设备上显示一致的效果。</li></ul><p>该代码的具体实现思路如下：</p><ol><li>获取文档根节点（即 HTML 标签）和设备像素比（devicePixelRatio），并将其赋值给变量 docEl 和 dpr。</li><li>定义函数 setBodyFontSize()，用来设置 body 元素的字号大小。如果 body 元素已经存在，则直接设置其字号大小；否则，等待文档加载完成（DOMContentLoaded）后再设置字号大小。</li><li>调用 setBodyFontSize() 函数，设置 body 元素的字号大小。</li><li>定义函数 setRemUnit()，用来设置文档根节点的字号大小，即将 1rem 设置为视口宽度（docEl.clientWidth）的十分之一。</li><li>调用 setRemUnit() 函数，设置文档根节点的字号大小。</li><li>监听窗口 resize 和 pageshow 事件，当页面发生重绘或重新加载时，重新设置文档根节点的字号大小。</li><li>检测设备是否支持 0.5px 的线条，如果支持，则在文档根节点上添加一个类名 hairlines。</li></ol><blockquote><p>总之，该代码通过设置 body 元素的字号大小和文档根节点的字号大小，以及检测设备是否支持 0.5px 的线条，来实现移动端页面在不同分辨率设备上的适配。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：rem是目前移动端常用的布局之一，此外还有何其相似的em，em一般代表父元素的字体大小，而rem是相对于根元素字体大小的值。&lt;/p&gt;
&lt;p&gt;flexible.js是手机淘宝团队出的简洁高效移动端适配库，其GitHub地址在 &lt;a href=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue实现两张图片叠加的进度条效果</title>
    <link href="https://aliveseven.github.io/posts/61d1ae5c/"/>
    <id>https://aliveseven.github.io/posts/61d1ae5c/</id>
    <published>2023-06-12T14:22:05.840Z</published>
    <updated>2023-06-21T15:31:02.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：开发的时候遇到一个进度条实现的问题，和普通的进度条不一样，不是那种常规的进度条。形状有点不规范。如下</p></blockquote><p><img src="https://pic.imgdb.cn/item/648725721ddac507cc68ddb9.jpg" alt=""></p><ul><li>常规的进度条可以直接用组件库来实现，而像这种进度条，最好的方法就是让UI把进度条满格的整条切出来，并且把底图全部切出来，利用一个变量来控制要显示的进度的width。</li></ul><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ul><li>先看html相关的代码，css用到了tailwind的写法。</li><li>主要有三个盒子，最外层的div是底图，为第一层</li><li>然后是其第二层，控制进度主要通过控制第二层的width的百分比+overflow-x-hidden来实现</li><li>然后是第三层，也就是最底层，是固定width和height的进度条，也就是上图中的黄色那条</li></ul><h3 id="架构简图"><a href="#架构简图" class="headerlink" title="架构简图"></a>架构简图</h3><p><img src="https://pic.imgdb.cn/item/6487277a1ddac507cc6fbee0.jpg" alt=""></p><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里是进度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;w-619 h-29 mt-8 progress relative&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里才是要变化的长度， --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;max-w-605 h-full relative overflow-hidden w-605&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">style</span>=<span class="string">&quot;width: 78%&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里才是进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;w-605 h-13 pro absolute top-8 bottom-7 left-8 right-6&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：第二层必须为relative布局，最底层必须为absolute</p></blockquote><ul><li>然后是css部分</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.progress</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../../assets/img/progress.png</span>) <span class="number">0</span> <span class="number">0</span> no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.pro</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">../../assets/img/pro.png</span>) <span class="number">0</span> <span class="number">0</span> no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://pic.imgdb.cn/item/648729c11ddac507cc76421b.gif" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：开发的时候遇到一个进度条实现的问题，和普通的进度条不一样，不是那种常规的进度条。形状有点不规范。如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://pic.imgdb.cn/item/648725721ddac</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Eement-UI的时间日期范围组件，后台获取数据赋值后无法改变，@change事件也无法触发</title>
    <link href="https://aliveseven.github.io/posts/f179c918/"/>
    <id>https://aliveseven.github.io/posts/f179c918/</id>
    <published>2023-06-10T14:55:18.235Z</published>
    <updated>2023-06-21T15:29:30.504Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：Element-UI 使用了时间组件，进入组件前，从后台获取时间数据，想把这个时间赋值给时间组件绑定的变量上面去，发现赋值之后没有反应，并且</p></blockquote><h2 id="产生原因"><a href="#产生原因" class="headerlink" title="产生原因"></a>产生原因</h2><ul><li>主要原因应该是Vue2无法检测到数组和对象的某些变动，例如直接通过索引设置一个元素或者改变对象的属性。</li><li>并且Element时间组件绑定的变量也是数组，所以，当我们想要在组件内部修改父组件传递过来的数据时，需要使用 <code>Vue.set()</code> 或者 <code>this.$set()</code> 方法来触发响应式更新。</li><li>而@change时间无法触发的原因，可能是由于使用了双向绑定或者直接改变了父组件传递给时间日期范围组件的值，导致组件内部的数据已经和外部的值不同步了。</li></ul><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h4 id="Vue-set-或者this-set"><a href="#Vue-set-或者this-set" class="headerlink" title="Vue.set()或者this.$set()"></a>Vue.set()或者this.$set()</h4><ul><li>Vue实例代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-date-picker</span><br><span class="line">      :value=&quot;dateRange&quot;</span><br><span class="line">      type=&quot;daterange&quot;</span><br><span class="line">      @change=&quot;handleChange&quot;</span><br><span class="line">    &gt;&lt;/el-date-picker&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>解决方法Js代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">dateRange</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 向后台获取数据并赋值给dateRange</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dateRange</span> = [<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2023-06-01&quot;</span>), <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2023-06-03&quot;</span>)];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="comment">// 修改 dateRange 数组中的元素，并触发响应式更新</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">dateRange</span>, <span class="number">0</span>, value[<span class="number">0</span>]);</span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">set</span>(<span class="variable language_">this</span>.<span class="property">dateRange</span>, <span class="number">1</span>, value[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用中间变量和Watch方法来解决"><a href="#使用中间变量和Watch方法来解决" class="headerlink" title="使用中间变量和Watch方法来解决"></a>使用中间变量和Watch方法来解决</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">tempDateRange</span>: [],</span><br><span class="line">      <span class="attr">dateRange</span>: []</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 向后台获取数据并赋值给tempDateRange</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tempDateRange</span> = [<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2023-06-01&quot;</span>), <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2023-06-03&quot;</span>)];</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">handleChange</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tempDateRange</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="title function_">tempDateRange</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dateRange</span> = newVal;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：Element-UI 使用了时间组件，进入组件前，从后台获取时间数据，想把这个时间赋值给时间组件绑定的变量上面去，发现赋值之后没有反应，并且&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;产生原因&quot;&gt;&lt;a href=&quot;#产生原因&quot; cl</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue实现随着手机的晃动，里面的图片也跟着一起晃动，类似伪3D的效果</title>
    <link href="https://aliveseven.github.io/posts/f6c16164/"/>
    <id>https://aliveseven.github.io/posts/f6c16164/</id>
    <published>2023-06-04T14:02:57.327Z</published>
    <updated>2023-06-24T17:24:35.729Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：移动端H5开发的时候有时需要H5里面的图片或者说是盒子（div）实现，随着用户的手机晃动，里面的盒子也跟着一起晃动</p></blockquote><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><h2 id="通过deviceorientation-的浏览器API处理方法"><a href="#通过deviceorientation-的浏览器API处理方法" class="headerlink" title="通过deviceorientation 的浏览器API处理方法"></a>通过<code>deviceorientation</code> 的浏览器API处理方法</h2><p>具体来说，可以先在组件的 setup 函数中监听 <code>deviceorientation</code> 事件，并在回调函数中获取设备的 <strong>beta 和 gamma</strong> 值，它们分别表示手机前后倾斜和左右倾斜的角度。然后根据这两个值计算出需要移动的距离，通过修改图片或盒子的 <code>transform</code> 属性来实现平移的效果。</p><h2 id="deviceorientation的浏览器兼容性"><a href="#deviceorientation的浏览器兼容性" class="headerlink" title="deviceorientation的浏览器兼容性"></a>deviceorientation的浏览器兼容性</h2><p><img src="https://pic.imgdb.cn/item/647c97ab1ddac507cc490303.jpg" alt=""></p><ul><li>可以看出来这个API的在各个浏览器兼容性还是相当可以的。</li></ul><h2 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h2><ul><li>可以尝试使用以下代码来检查设备是否支持<code>deviceorientation</code>事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">DeviceOrientationEvent</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Device orientation is supported&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Device orientation is not supported&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果设备支持<code>deviceorientation</code>事件，则应该会输出“Device orientation is supported”。如果它不支持，则应该会输出“Device orientation is not supported”。</li><li>另外，您还需要确保将<code>handleOrientation</code>函数正确定义，并且它能够正确地处理<code>deviceorientation</code>事件。</li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul><li>首先是html代码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 岛屿 --&gt;</span><br><span class="line">&lt;div id=&quot;isle&quot; ref=&quot;isle&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;left w-176 h-202 absolute top-441&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;div class=&quot;center w-637 h-736 absolute top-156 left-48 right-65&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 右边的岛屿 --&gt;</span><br><span class="line">  &lt;div class=&quot;left w-160 h-110 absolute right-0 top-515&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#isle</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">0.2s</span> ease-out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vue3的代码实现案例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">import &#123; onMounted, onUnmounted, ref &#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const isle = ref(null); // 获取岛屿（图片）元素</span><br><span class="line">    let startX = null;</span><br><span class="line">    let startY = null;</span><br><span class="line"></span><br><span class="line">    // 监听 deviceorientation 事件</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">      window.addEventListener(&#x27;deviceorientation&#x27;, handleOrientation);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    // 移除事件监听</span><br><span class="line">    onUnmounted(() =&gt; &#123;</span><br><span class="line">      window.removeEventListener(&#x27;deviceorientation&#x27;, handleOrientation);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    function handleOrientation(event) &#123;</span><br><span class="line">      const beta = event.beta || 0; // 前后倾斜的角度</span><br><span class="line">      const gamma = event.gamma || 0; // 左右倾斜的角度</span><br><span class="line"></span><br><span class="line">      if (startX === null &amp;&amp; startY === null) &#123;</span><br><span class="line">        startX = gamma;</span><br><span class="line">        startY = beta;</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      const deltaX = gamma - startX; // 计算需要平移的距离</span><br><span class="line">      const deltaY = beta - startY;</span><br><span class="line"></span><br><span class="line">      isle.value.style.transform = `translate3d($&#123;deltaX&#125;px, $&#123;-deltaY&#125;px, 0)`;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>在组件的模板中，需要给岛屿元素添加一个 ref 属性，然后在 setup 函数中使用 <code>ref</code> 函数获取该元素的引用。同时，在 element 中增加 <code>transition: transform 0.2s ease-out;</code> 的样式，以实现平滑过渡的效果。</li></ul><h2 id="效果调试——浏览器怎么模拟设备晃动"><a href="#效果调试——浏览器怎么模拟设备晃动" class="headerlink" title="效果调试——浏览器怎么模拟设备晃动"></a>效果调试——浏览器怎么模拟设备晃动</h2><blockquote><p>在浏览器中模拟设备晃动，您可以使用 Chrome 开发者工具。以下是一些步骤：</p></blockquote><ol><li>打开 Chrome 浏览器并访问您要调试的网站。</li><li>打开 Chrome 开发者工具 (F12)。</li><li>点击 Toggle Device Toolbar (Ctrl+Shift+M)，以便在开发者工具中打开设备模式工具栏。</li><li>选择一个设备，例如 iPhone 或 Android 设备。</li><li>在设备模式工具栏上，单击三个点图标，然后选择 Senssors 选项卡。</li><li>在 Sensors 选项卡中，您可以模拟设备的晃动和其他运动。</li></ol><blockquote><p>注：这个功能可能不适用于所有版本的 Chrome 浏览器。如果您的 Chrome 浏览器不支持此功能，您可以尝试使用其他浏览器或安装 Chrome 插件来模拟设备晃动。</p></blockquote><p><img src="https://pic.imgdb.cn/item/647c99531ddac507cc4b5b72.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：移动端H5开发的时候有时需要H5里面的图片或者说是盒子（div）实现，随着用户的手机晃动，里面的盒子也跟着一起晃动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;实现方法&quot;&gt;&lt;a href=&quot;#实现方法&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象类型判断方法，以及通过value取key、key取value</title>
    <link href="https://aliveseven.github.io/posts/350cf89c/"/>
    <id>https://aliveseven.github.io/posts/350cf89c/</id>
    <published>2023-04-17T19:52:20.198Z</published>
    <updated>2023-05-24T15:39:30.978Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript对象类型判断方法，以及通过value取key、key取value"><a href="#JavaScript对象类型判断方法，以及通过value取key、key取value" class="headerlink" title="JavaScript对象类型判断方法，以及通过value取key、key取value"></a>JavaScript对象类型判断方法，以及通过value取key、key取value</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>前端开发的时候经常需要判断某个值的类型是不是对象，不能通过typeof来判断，要用别的方法。</li><li>JS对象的操作类似于Java中的Map和HashMap，很多时候我们需要找到对象在某个特定key对应的value，或者说是找到某个value对应的key。</li><li>当然，一般一个key只能对应一个value，但是一个value可以对应多个key。这里重点讲一下通过value来找到特定key的方法</li></ul><h2 id="对象类型判断"><a href="#对象类型判断" class="headerlink" title="对象类型判断"></a>对象类型判断</h2><h3 id="Object-prototype-toString-call-方法"><a href="#Object-prototype-toString-call-方法" class="headerlink" title="Object.prototype.toString.call()方法"></a><strong>Object.prototype.toString.call()方法</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res); <span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><ul><li>这个方法还能判断其他类型，如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">var</span> b= <span class="string">&#x27;222&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="title class_">Symbol</span>(); </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;bb&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;cc&#x27;</span> &#125;; </span><br><span class="line"><span class="keyword">var</span> res = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res);  <span class="comment">//[object Array] </span></span><br><span class="line"><span class="keyword">var</span> res2 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2); <span class="comment">//[object Object] </span></span><br><span class="line"><span class="keyword">var</span> res3 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a);</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res3); <span class="comment">//[object Number] </span></span><br><span class="line"> <span class="keyword">var</span> res4 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res4); <span class="comment">//[object String] </span></span><br><span class="line"> <span class="keyword">var</span> res4 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(c); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res4); <span class="comment">//[object Null] </span></span><br><span class="line"> <span class="keyword">var</span> res5 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(d); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res5); <span class="comment">//[object Boolean] </span></span><br><span class="line"> <span class="keyword">var</span> res6 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(e); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res6); <span class="comment">//[object Undefined] </span></span><br><span class="line"> <span class="keyword">var</span> res7 = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(f); </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(res7); <span class="comment">//[object Symbol]</span></span><br></pre></td></tr></table></figure><h3 id="constructor方法"><a href="#constructor方法" class="headerlink" title="constructor方法"></a><strong>constructor</strong>方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;aa&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;bb&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;cc&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><strong>instanceof</strong></h3><blockquote><p>注意：数组也是对象的一种，因此用 arr instanceof Object 也为true。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;aa&#x27;</span>,<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;cc&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="string">&#x27;aa&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;bb&#x27;</span>, <span class="attr">c</span>: <span class="string">&#x27;cc&#x27;</span> &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// true</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true 数组也是对象的一种</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>); <span class="comment">// false</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><strong>typeof</strong></h3><blockquote><p>使用typeof判断对象其实也不太准确</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">typeof</span> obj === <span class="title class_">Object</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 表达式                           返回值</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>      <span class="comment">//         &#x27;undefined&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>           <span class="comment">//         &#x27;object&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span>           <span class="comment">//         &#x27;boolean&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="number">123</span>            <span class="comment">//         &#x27;number&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&quot;abc&quot;</span>          <span class="comment">//         &#x27;string&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;  <span class="comment">//         &#x27;function&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;             <span class="comment">//         &#x27;object&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">typeof</span> []             <span class="comment">//         &#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="JS对象通过value找到key"><a href="#JS对象通过value找到key" class="headerlink" title="JS对象通过value找到key"></a>JS对象通过value找到key</h2><ul><li>首先最简单暴力的方法当然是通过循环来查找</li><li>很简单暴力，就几行代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="keyword">if</span>(obj[key] === value)&#123;</span><br><span class="line"><span class="keyword">return</span> key</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后是比较好用的方法，通过 <code>Object.entries()</code>将对象转换成键值对数组，然后使用<code>Array.prototype.find()</code> 方法查找匹配的键值对（key，value），并返回key。</li><li>或者是通过数组遍历的方法，比如map、filter、find来找到想要的key</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findKeyByValue</span>(<span class="params">obj, value</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj).<span class="title function_">find</span>(<span class="function">(<span class="params">[key, val]</span>) =&gt;</span> val === value);</span><br><span class="line">  <span class="keyword">return</span> result ? result[<span class="number">0</span>] : <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JS对象通过key取value"><a href="#JS对象通过key取value" class="headerlink" title="JS对象通过key取value"></a>JS对象通过key取value</h2><ul><li>这个比上面哪个简单，因为key一般是唯一的，而像value取key的话，由于value是不唯一的，有可能有多个key对应的value值是一样的，所以操作起来比较麻烦。</li><li>可以直接通过Obj.key或者Obj[key]来获取</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript对象类型判断方法，以及通过value取key、key取value&quot;&gt;&lt;a href=&quot;#JavaScript对象类型判断方法，以及通过value取key、key取value&quot; class=&quot;headerlink&quot; title=&quot;JavaScri</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Java返回时间带T，LocalDateTime时间格式化方案</title>
    <link href="https://aliveseven.github.io/posts/dae630a7/"/>
    <id>https://aliveseven.github.io/posts/dae630a7/</id>
    <published>2023-04-09T16:27:49.290Z</published>
    <updated>2023-04-09T16:58:19.557Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java返回时间带T，LocalDateTime时间格式化方案"><a href="#Java返回时间带T，LocalDateTime时间格式化方案" class="headerlink" title="Java返回时间带T，LocalDateTime时间格式化方案"></a>Java返回时间带T，LocalDateTime时间格式化方案</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>除了标题的问题，Redis在存储LocalDateTime的时候也会有相关的问题，解决方案其实也很简单，在相对应的实体类，对LocalDateTime类型加几条注解即可</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过LocalDateTime的源码可以发现，问题出现的原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> date.toString() + <span class="string">&#x27;T&#x27;</span> + time.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个问题可以前端处理，也可以后端处理，前端处理就是可以通过格式化的方式去掉T</p><p>而后端处理的方式，最简单就是加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime time;</span><br></pre></td></tr></table></figure><ul><li>如果这个时候，后台返回还有T的话，可能是引用了fastJson的api，需要加多一条注解，@JSONField</li><li>同样适用于Redis保存</li><li>所以最好用下面的这个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span></span><br><span class="line"><span class="meta">@JSONField(format = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java返回时间带T，LocalDateTime时间格式化方案&quot;&gt;&lt;a href=&quot;#Java返回时间带T，LocalDateTime时间格式化方案&quot; class=&quot;headerlink&quot; title=&quot;Java返回时间带T，LocalDateTime时间格式化方</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题</title>
    <link href="https://aliveseven.github.io/posts/ac03ca9a/"/>
    <id>https://aliveseven.github.io/posts/ac03ca9a/</id>
    <published>2023-04-09T16:00:02.337Z</published>
    <updated>2023-04-09T16:06:32.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题"><a href="#Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题" class="headerlink" title="Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题"></a>Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前Java开发用到的JSON操作工具有很多，大多都有一点点小问题，我在开发毕设的时候有用过Hutool的JSONUtil、阿里的FastJSON、还有谷歌的GSON。</p><p>看过了很多CSDN和各个论坛的文章，感觉对这个JSON顺序问题的解决方案还是比较少相关文章，自己还是做一个记录吧</p><h2 id="各个问题"><a href="#各个问题" class="headerlink" title="各个问题"></a>各个问题</h2><h3 id="JSONUtil"><a href="#JSONUtil" class="headerlink" title="JSONUtil"></a>JSONUtil</h3><ul><li>Hutool的JSONUtil在进行JSON转字符串的时候（JSONUtil.toJsonStr()），会有个问题，就是会自动把时间类型<code>LocalDateTime</code>的值转成时间戳，然后存在Redis中，取出来就有问题了，和数据库拿出来的不一样，造成数据不一致</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>序列化配置</li><li>用下面的方法（不知道生效不，听说可以）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String mes= JSON.toJSONString(requestMap);</span><br><span class="line">改为</span><br><span class="line">String mes= JSON.toJSONStringWithDateFormat(requestMap,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h3><ul><li>阿里的FastJSON更坑，其转换方法会自动给你把JSON数据按key从a—z的顺序排成有序，然后再存入Redis中，再次请求数据顺序就会变了</li><li>而且字符串转成JSON的时候也会进行一个key的排序</li><li>如果有需要拿到<strong>有序的</strong>JSON，可以用FastJson这个工具，这个除了顺序变了其他还是挺好的</li></ul><blockquote><p>因为JsonObject 默认空参构造方法是用 HashMap 来存储的，所以输出是按 key 的排序来的</p></blockquote><h4 id="常规解决方案"><a href="#常规解决方案" class="headerlink" title="常规解决方案"></a>常规解决方案</h4><ul><li>字符串转JSON的时候，也就是使用<code>JSON.parseObject</code>的时候，要注意赋第二个参数<code>Feature.OrderedField</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseObject(res , Feature.OrderedField);</span><br></pre></td></tr></table></figure><ul><li>JSON转字符串的时候，可以用<code>LinkedHashMap</code>来定义要转换的JSONObject</li><li>但是我要处理的JSON数据不是自己定义，而是通过Mybatis-Plus内置的分页方法返回的。所以其实也没什么用，上面这个。</li><li>具体方案👇</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">JsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(<span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;());</span><br><span class="line"><span class="comment">// 转换</span></span><br><span class="line"><span class="type">String</span> <span class="variable">JsonString</span> <span class="operator">=</span> JsonObject.toJSONString();</span><br><span class="line"><span class="comment">// 字符串转JSON，取</span></span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSON.parseObject(JsonString , Feature.OrderedField);</span><br></pre></td></tr></table></figure><h3 id="GSON"><a href="#GSON" class="headerlink" title="GSON"></a>GSON</h3><ul><li>相比前面两个，我感觉这个JSON转换工具更好用，没有顺序问题，生态也挺好，就是无法设置null替换，还有时间类型<code>LocalDateTime</code>的转换问题。</li><li>默认转换的时候，会把值为null的key给去掉，还有时间类型LocalDateTime也不会做格式化</li><li>这里定义一个函数，通过这个函数来进行JSON转换即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aliveseven.adminmanage.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.gson.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LocalDateAdapter</span> <span class="keyword">implements</span> <span class="title class_">JsonSerializer</span>&lt;LocalDateTime&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> JsonElement <span class="title function_">serialize</span><span class="params">(LocalDateTime localDateTime, Type type, JsonSerializationContext jsonSerializationContext)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JsonPrimitive</span>(localDateTime.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getJson</span><span class="params">(Object scr)</span> &#123;</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GsonBuilder</span>()</span><br><span class="line">                .setPrettyPrinting()</span><br><span class="line">                .serializeNulls()</span><br><span class="line">                .registerTypeAdapter(LocalDateTime.class,<span class="keyword">new</span> <span class="title class_">LocalDateAdapter</span>()).create();</span><br><span class="line">        <span class="keyword">return</span> gson.toJson(scr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题&quot;&gt;&lt;a href=&quot;#Redis保存Json数据，有序和乱序（SpringBoot），Json和字符串相互转换顺序问题&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue父子组件通过v-model双向绑定传值</title>
    <link href="https://aliveseven.github.io/posts/11d10164/"/>
    <id>https://aliveseven.github.io/posts/11d10164/</id>
    <published>2023-04-09T15:07:39.415Z</published>
    <updated>2023-04-09T15:20:36.444Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue父子组件通过v-model双向绑定传值"><a href="#Vue父子组件通过v-model双向绑定传值" class="headerlink" title="Vue父子组件通过v-model双向绑定传值"></a>Vue父子组件通过v-model双向绑定传值</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做毕设的时候，需要二次封装Naive UI的Input组件，达到多次复用的效果，然后遇到了需要v-model来二次传值的需求，实现方法本身不难，这里把Vue3的做法叙述一下，Vue2应该也差不多。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ul><li>所谓的<code>v-model</code>其实就是<code>v-bind</code>搭配<code>v-on</code>和<code>emit</code>的组合语法糖，可以通过这三个东西来定义需要双向绑定的变量名</li><li>直接上代码</li></ul><h3 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model:value</span>=<span class="string">&quot;val&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h3><ul><li>子组件需要的做的事情其实不多，通过<code>props</code>定义一个叫<code>value</code>的变量，然后绑定到<code>input</code>属性的<code>:value</code>上面</li><li>props中的value你可以给他定义类型，也可以不定义，看你喜欢</li><li>然后需要定义一个<code>update:value</code>的emit事件，<strong>一定要叫这个名字</strong>，<strong>一定要叫这个名字</strong>——<code>update:value</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">value</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:value&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li>如果你的props中定义的不是value，比如是title，那么你的父组件应该是这样的👇</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">v-model:title</span>=<span class="string">&quot;val&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件则是</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;props.title&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">title</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:title&quot;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>emit的事件名一定是<code>update:</code> + <code>你要用v-model双向绑定传值的变量名</code>，也就是上面props中的<code>value</code>或者是<code>title</code></p></blockquote><h2 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = el.<span class="property">target</span> ? el.<span class="property">target</span>.<span class="property">value</span> : el</span><br><span class="line">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>v-on:input绑定的方法，我不知道是Naive UI中的<code>@input</code>方法是不是和原生的不太一样</li><li>原生的似乎在输入的时候返回了$event事件，<strong>但是Naive UI中的input组件第一次是返回$event事件，第二次后面开始返回输入的值</strong></li><li>所以这里我做了一个判断，如果el是$event事件，那么它会有个target，然后取<code>$event.target.value</code>即可</li><li>如果没有则直接取它的值，不然会有<strong>[object InputEvent]</strong>的BUG</li></ul><h2 id="object-InputEvent-的BUG"><a href="#object-InputEvent-的BUG" class="headerlink" title="[object InputEvent]的BUG"></a>[object InputEvent]的BUG</h2><p><img src="https://pic.imgdb.cn/item/6432d0c30d2dde5777bad699.jpg" alt=""></p><p><img src="https://pic.imgdb.cn/item/6432d0f80d2dde5777bb24d0.jpg" alt=""></p><p>解决方案就是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value = el.target ? el.target.value : el</span><br></pre></td></tr></table></figure><p>如果是和我一样用了Navie UI中的Input进行一个v-model的二次封装的话，可以用 <code>:on-update:value</code>来进行emit方法的绑定</p><ul><li>代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">n-input</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><ul><li><p>除了上面说的这种通过原生的input事件搭配v-on的方法实现父子组件的v-model传值的方法外，还有其他可以用的方法</p></li><li><p>比如可以通过<code>watch</code>方法进行监听<code>props.value</code>，当value发生变化的时候，通过emit给父组件传改变后的值</p></li><li><p>也可以通过计算属性<code>computed</code>来拦截父组件传过来的value，进行修改。</p></li><li><p>另外，这个v-model的父子传值还能绑定多个，<strong>也就是说可以搞多个v-model的绑定</strong>，进行父子传值间的双向绑定。</p></li></ul><h2 id="最后附上自己的Naive-UI的Input组件二次封装"><a href="#最后附上自己的Naive-UI的Input组件二次封装" class="headerlink" title="最后附上自己的Naive UI的Input组件二次封装"></a>最后附上自己的Naive UI的Input组件二次封装</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center inputString&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!selfSelect &amp;&amp; (typeof (props.value) !== &#x27;number&#x27;)&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-input</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;props.value || &#x27;&#x27;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;w-50 m-2&quot;</span> <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:disabled</span>=<span class="string">&quot;props.disabled&quot;</span> <span class="attr">:maxlength</span>=<span class="string">&quot;selfMaxLength&quot;</span> <span class="attr">:allow-input</span>=<span class="string">&quot;selfAllow&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;inputInstRef&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prefix</span> <span class="attr">v-if</span>=<span class="string">&quot;props.Icon&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">:component</span>=<span class="string">&quot;Icon&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文字输入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center inputNumber&quot;</span> <span class="attr">v-else-if</span>=<span class="string">&quot;!selfSelect &amp;&amp; typeof (props.value) === &#x27;number&#x27;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">n-input-number</span> <span class="attr">:placeholder</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;props.value&quot;</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center popInput w-full&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:on-update:value</span>=<span class="string">&quot;Inputing&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;props.disabled&quot;</span> <span class="attr">:show-button</span>=<span class="string">&quot;false&quot;</span> <span class="attr">:min</span>=<span class="string">&quot;1&quot;</span> <span class="attr">:validator</span>=<span class="string">&quot;validator&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">ref</span>=<span class="string">&quot;inputInstRef&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> #<span class="attr">prefix</span> <span class="attr">v-if</span>=<span class="string">&quot;props.Icon&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">n-icon</span> <span class="attr">:component</span>=<span class="string">&quot;Icon&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">n-input-number</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 选项 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">n-space</span> <span class="attr">vertical</span> <span class="attr">v-else-if</span>=<span class="string">&quot;selfSelect&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex items-center&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">n-select</span> <span class="attr">:value</span>=<span class="string">&quot;props.value || &#x27;&#x27;&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;Options&quot;</span> @<span class="attr">update:value</span>=<span class="string">&quot;Inputing&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">n-space</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> vail <span class="keyword">from</span> <span class="string">&#x27;@/utils/validator&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref, toRefs, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Icon</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">value</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>, <span class="title class_">Boolean</span>, <span class="title class_">Array</span>, <span class="title class_">Object</span>],</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">title</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">placeholder</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">String</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">disabled</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">default</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&quot;update:value&quot;</span>])</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">Inputing</span>(<span class="params">el: any</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(&#x27;Inputing&#x27;, el)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// const value = el.target ? el.target.value : el</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">emit</span>(<span class="string">&#x27;update:value&#x27;</span>, el)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vailRule = <span class="title function_">vail</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> index = <span class="title class_">Object</span>.<span class="title function_">keys</span>(vailRule).<span class="title function_">indexOf</span>(props.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfRequired = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfMaxLength = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfMessage = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfAllow = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfPattern = <span class="title function_">ref</span>()</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> selfSelect = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span> (index !== -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> &#123; required, maxlength, message, allowInput, pattern, select &#125; = vailRule[props.<span class="property">title</span>]</span></span><br><span class="line"><span class="language-javascript">    selfRequired.<span class="property">value</span> = required</span></span><br><span class="line"><span class="language-javascript">    selfMaxLength.<span class="property">value</span> = maxlength</span></span><br><span class="line"><span class="language-javascript">    selfMessage.<span class="property">value</span> = message</span></span><br><span class="line"><span class="language-javascript">    selfAllow.<span class="property">value</span> = allowInput</span></span><br><span class="line"><span class="language-javascript">    selfPattern.<span class="property">value</span> = pattern</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (select) &#123;</span></span><br><span class="line"><span class="language-javascript">        selfSelect.<span class="property">value</span> = select</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">validator</span> = (<span class="params">x: number</span>) =&gt; x &gt;= <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 角色选项</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; <span class="title class_">Options</span> &#125; = <span class="title function_">toRefs</span>(<span class="title function_">useState</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: fit-content;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">    -webkit-line-clamp: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 显示的行数，这里限制为两行 */</span></span></span><br><span class="line"><span class="language-css">    -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 超出盒子部分隐藏 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 文字超出两行的部分为省略号 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue父子组件通过v-model双向绑定传值&quot;&gt;&lt;a href=&quot;#Vue父子组件通过v-model双向绑定传值&quot; class=&quot;headerlink&quot; title=&quot;Vue父子组件通过v-model双向绑定传值&quot;&gt;&lt;/a&gt;Vue父子组件通过v-model双向绑定</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>CSS实现左边固定宽度，右边自适应的两栏布局</title>
    <link href="https://aliveseven.github.io/posts/3713c53c/"/>
    <id>https://aliveseven.github.io/posts/3713c53c/</id>
    <published>2023-03-27T17:14:36.934Z</published>
    <updated>2023-03-27T17:27:44.154Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS实现左边固定宽度，右边自适应的两栏布局"><a href="#CSS实现左边固定宽度，右边自适应的两栏布局" class="headerlink" title="CSS实现左边固定宽度，右边自适应的两栏布局"></a>CSS实现左边固定宽度，右边自适应的两栏布局</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ul><li>左边设置宽度，右边设为flex即可</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex</span>: <span class="number">1</span>; // 填满空间</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ul><li>左侧固定宽度左浮动，右侧设margin-left等于左侧宽度，右侧宽度通过calc来计算，或者直接设为auto</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    // <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">100px</span>);</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h2><ul><li><strong>利用浮动+BFC</strong></li><li>左边设为浮动，右边触发BFC，BFC区域不会与浮动元素重叠</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h2><ul><li><strong>利用绝对定位</strong></li><li>父元素设为相对定位</li><li>子元素设为left为0，设置宽度，右边元素left设为左边元素的宽度，right设为0即可</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: blueviolet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSS实现左边固定宽度，右边自适应的两栏布局&quot;&gt;&lt;a href=&quot;#CSS实现左边固定宽度，右边自适应的两栏布局&quot; class=&quot;headerlink&quot; title=&quot;CSS实现左边固定宽度，右边自适应的两栏布局&quot;&gt;&lt;/a&gt;CSS实现左边固定宽度，右边自适应的两栏</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>移动端开发Vant，Popover点击外面无法关闭？</title>
    <link href="https://aliveseven.github.io/posts/5ef1779d/"/>
    <id>https://aliveseven.github.io/posts/5ef1779d/</id>
    <published>2023-03-19T11:10:38.282Z</published>
    <updated>2023-03-19T11:23:53.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="移动端开发Vant，Popover点击外面无法关闭？"><a href="#移动端开发Vant，Popover点击外面无法关闭？" class="headerlink" title="移动端开发Vant，Popover点击外面无法关闭？"></a>移动端开发Vant，Popover点击外面无法关闭？</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行HyBridge开发的时候，遇到这样的问题，在移动端端使用Vant中的Popover组件，点击组件外的任意地方能实现组件的关闭，但是<strong>到了PC端这个效果就没了</strong>。</p><p>因为Vant中的组件默认适配移动端，在PC端中没法监听到mouse事件。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>引入@vant/touch-emulator即可，这个库会在桌面端自动将 mouse 事件转换成对应的 touch 事件，使得组件能够在桌面端使用。</p><p>安装模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i &#x27;@vant/touch-emulator&#x27; -S</span><br></pre></td></tr></table></figure><p>引入模块</p><p>在main.js中引入即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;@vant/touch-emulator&#x27;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;移动端开发Vant，Popover点击外面无法关闭？&quot;&gt;&lt;a href=&quot;#移动端开发Vant，Popover点击外面无法关闭？&quot; class=&quot;headerlink&quot; title=&quot;移动端开发Vant，Popover点击外面无法关闭？&quot;&gt;&lt;/a&gt;移动端开发Van</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue虚拟列表</title>
    <link href="https://aliveseven.github.io/posts/4d7fcd88/"/>
    <id>https://aliveseven.github.io/posts/4d7fcd88/</id>
    <published>2023-03-04T17:29:21.626Z</published>
    <updated>2023-04-03T08:42:13.233Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue虚拟列表"><a href="#Vue虚拟列表" class="headerlink" title="Vue虚拟列表"></a>Vue虚拟列表</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>最近在开发一个通用组件排行榜的时候，需要展示多条数据，数据量虽然不大，但是开发的组件需要嵌入到PC、安卓、IOS多端适配。</li><li>适配的时候需要处理一下这些数据量，不然会产生性能问题</li><li>然后在浏览谷歌的时候就发现虚拟列表这个东西</li></ul><h2 id="虚拟列表"><a href="#虚拟列表" class="headerlink" title="虚拟列表"></a>虚拟列表</h2><ul><li>虚拟列表是指对列表的 <code>可视区域</code> 进行渲染，对 <code>非可见区域</code> 不渲染或部分渲染，从而极大提高渲染性能的一种技术。</li></ul><h2 id="相关库"><a href="#相关库" class="headerlink" title="相关库"></a>相关库</h2><ul><li>目前我觉得比较好用的库是<strong><a href="https://github.com/Akryum/vue-virtual-scroller">vue-virtual-scroller</a></strong></li><li>此外还有vue<em>-</em>virtual-scroll-list、react-virtualized等</li></ul><h2 id="Vue-Virtual-Scroller的使用"><a href="#Vue-Virtual-Scroller的使用" class="headerlink" title="Vue-Virtual-Scroller的使用"></a>Vue-Virtual-Scroller的使用</h2><ul><li>官方教程：<a href="https://github.com/Akryum/vue-virtual-scroller/blob/master/packages/vue-virtual-scroller/README.md">https://github.com/Akryum/vue-virtual-scroller/blob/master/packages/vue-virtual-scroller/README.md</a></li><li>官方的较为详细哦</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller@next</span><br><span class="line"></span><br><span class="line">yarn add vue-virtual-scroller@next</span><br><span class="line"></span><br><span class="line">npm install --save vue-virtual-scroller@next --legacy-peer-deps</span><br></pre></td></tr></table></figure><h2 id="在main-js中全局使用"><a href="#在main-js中全局使用" class="headerlink" title="在main.js中全局使用"></a>在main.js中全局使用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &#x27;vue&#x27;;</span><br><span class="line">import VueVirtualScroller from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import App from &#x27;./App.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const app = createApp(App)</span><br><span class="line">app.use(VueVirtualScroller)</span><br><span class="line">app.mount(&#x27;#app&#x27;)</span><br></pre></td></tr></table></figure><h3 id="RecycleScroller组件"><a href="#RecycleScroller组件" class="headerlink" title="RecycleScroller组件"></a>RecycleScroller组件</h3><ul><li>使用该组件的时候，需要给定每个item的高度</li><li>而DynamicScroller组件，则是不需要知道item的高度，自动计算其值</li><li>首先在需要使用的组件中引入 ↓</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import &#123; DynamicScroller &#125; from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import &#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;;</span><br></pre></td></tr></table></figure><ul><li>然后直接使用即可，有几个props需要在使用的时候传入</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;reyclerList&quot;&gt;</span><br><span class="line">    &lt;RecycleScroller</span><br><span class="line">      style=&quot;height: 100%;&quot;</span><br><span class="line">      v-if=&quot;list.length &gt; 0&quot;</span><br><span class="line">      :items=&quot;list&quot;</span><br><span class="line">      :item-size=&quot;50&quot;</span><br><span class="line">      key-field=&quot;id&quot;</span><br><span class="line">      :minItemSize=&quot;0&quot;</span><br><span class="line">      :buffer=&quot;200&quot;</span><br><span class="line">      v-slot=&quot;&#123; item , index &#125;&quot;</span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123; index &#125;&#125; :&#123;&#123; item.nums &#125;&#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;/RecycleScroller&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; RecycleScroller &#125; from &#x27;vue-virtual-scroller&#x27;;</span><br><span class="line">import &#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    RecycleScroller</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const list = []</span><br><span class="line">    for(let i = 0; i &lt; 10000; i++) &#123;</span><br><span class="line">      list.push(&#123;</span><br><span class="line">        id: i,</span><br><span class="line">        nums: `list-nums $&#123;i&#125;`</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.reyclerList&#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 600px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="https://pic.imgdb.cn/item/642a8911a682492fcc2e522f.gif" alt=""></p><ul><li>可以看到，使用了RecycleScroller加载1万条数据，只会渲染部分dom，而不会全部加载出来，通过这种方式可以减少dom的加载，极大优化性能</li></ul><h2 id="DynamicScroller组件"><a href="#DynamicScroller组件" class="headerlink" title="DynamicScroller组件"></a>DynamicScroller组件</h2><ul><li>DynamicScroller和RecycleScroller差不多，但是它可以不</li></ul><h2 id="相关props传参"><a href="#相关props传参" class="headerlink" title="相关props传参"></a>相关props传参</h2><ul><li><code>items</code>: 要在滚动条中显示的总列表。</li><li><code>direction</code> (default: <code>&#39;vertical&#39;</code>): 滚动的方向，列表的方向，有垂直和水平，默认是垂直方向， <code>&#39;vertical&#39;</code> or <code>&#39;horizontal&#39;</code>.</li><li><code>itemSize</code>: 子列表的高度，默认为null，在RecycleScroller中必须要设置这个</li><li><code>minItemSize</code>: 如果子列表的高度（或水平模式下的宽度）未知，则使用最小尺寸。</li><li><code>keyField</code>: 默认是是<code>id</code>，列表循环的key值，一般这个也是必传的</li><li><code>buffer</code>: 默认是<code>200</code>，到滚动可见区域的边缘以开始渲染更远的项目的像素量。默认是上下200px处的都会进行缓存渲染</li><li><code>emitUpdate</code>: 默认是<code>false</code>，表示是否要开启更新模式，官方描述：触发一个 <code>&#39;update&#39;</code> 时间，一般会配合钩子函数<code>update</code>一起使用</li></ul><h2 id="相关Events，钩子函数"><a href="#相关Events，钩子函数" class="headerlink" title="相关Events，钩子函数"></a>相关Events，钩子函数</h2><ul><li><code>update (startIndex, endIndex, visibleStartIndex, visibleEndIndex)</code>: 每次滚动的时候，当可使区域发生变化，触发该钩子函数的方法，仅当props——<code>emitUpdate</code> 为true的时候生效</li><li><code>scroll-start</code>: 当第一个item渲染完的时候触发</li><li><code>scroll-end</code>: 当最后的一个item渲染完的时候触发</li></ul><h2 id="插槽slot"><a href="#插槽slot" class="headerlink" title="插槽slot"></a>插槽slot</h2><ul><li><code>item</code>: 可视区域的item</li><li><code>index</code>: item的下标</li><li><code>active</code>: 可视活动状态下的item</li></ul><h2 id="虚拟列表的原理"><a href="#虚拟列表的原理" class="headerlink" title="虚拟列表的原理"></a>虚拟列表的原理</h2><ul><li>这里参考了掘金大佬的图，可以很好的解释了虚拟列表的原理</li></ul><p><img src="https://pic.imgdb.cn/item/642a8e9aa682492fcc371e6d.jpg" alt=""></p><ul><li>简单来说就是在滚动的时候，让上面和下面的item通过transform向上平移，这样做就可以只渲染少量的dom，减少不必要真实dom的渲染。</li><li>监听滚动</li><li>需要知道item的高度，每次滚动对每个item进行transform计算</li><li>根据滚动的距离和item的高度，计算出<code>startIndex</code></li><li>再根据<code>startIndex</code>和可视区高度计算出<code>endIndex</code></li><li>滚动时候，计算出可视区列表的偏移距离 <code>startOffset</code>，再重新计算<code>startIndex</code>和<code>endIndex</code></li></ul><h2 id="手写虚拟列表"><a href="#手写虚拟列表" class="headerlink" title="手写虚拟列表"></a>手写虚拟列表</h2><p>…待更</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue虚拟列表&quot;&gt;&lt;a href=&quot;#Vue虚拟列表&quot; class=&quot;headerlink&quot; title=&quot;Vue虚拟列表&quot;&gt;&lt;/a&gt;Vue虚拟列表&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组对象常用操作</title>
    <link href="https://aliveseven.github.io/posts/10fb917/"/>
    <id>https://aliveseven.github.io/posts/10fb917/</id>
    <published>2023-02-26T07:48:18.923Z</published>
    <updated>2023-02-26T07:54:32.285Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript数组对象常用操作"><a href="#JavaScript数组对象常用操作" class="headerlink" title="JavaScript数组对象常用操作"></a>JavaScript数组对象常用操作</h1><h2 id="获取数组对象中，对象中的某个值（key）为指定值"><a href="#获取数组对象中，对象中的某个值（key）为指定值" class="headerlink" title="获取数组对象中，对象中的某个值（key）为指定值"></a>获取数组对象中，对象中的某个值（key）为指定值</h2><p>比如现在有个数组对象a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我想获取，age为100的对象</p><p><strong>通过filter方法来实现，可以获取满足条件的数组对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span> == <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63fafe40f144a01007d70379.jpg" alt=""></p><h2 id="获取数组对象中，某个key的数组"><a href="#获取数组对象中，某个key的数组" class="headerlink" title="获取数组对象中，某个key的数组"></a>获取数组对象中，某个key的数组</h2><p><strong>比如我要获取a的age的数组，可以通过map来实现</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = [</span><br><span class="line">    &#123; age: 22, name: &quot;AA&quot; &#125;,</span><br><span class="line">    &#123; age: 23, name: &quot;BB&quot; &#125;,</span><br><span class="line">    &#123; age: 24, name: &quot;CC&quot; &#125;,</span><br><span class="line">    &#123; age: 25, name: &quot;DD&quot; &#125;,</span><br><span class="line">    &#123; age: 100, name: &quot;EE&quot; &#125;,</span><br><span class="line">    &#123; age: 100, name: &#x27;FF&#x27; &#125;,</span><br><span class="line">    &#123; age: 200, name: &#x27;RR&#x27; &#125;</span><br><span class="line">]</span><br><span class="line">console.log(a.map(item =&gt; item.age))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63faff36f144a01007d92037.jpg" alt=""></p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>另外map方法也可以对特定item中的某个的值进行判断，返回一个数组，如下，满足条件的对象的<strong>所处下标</strong>，在数组中是true</p><p><img src="https://pic.imgdb.cn/item/63faff97f144a01007d9a6fb.jpg" alt=""></p><h2 id="获取数组对象中某个属性的最大值或最小值"><a href="#获取数组对象中某个属性的最大值或最小值" class="headerlink" title="获取数组对象中某个属性的最大值或最小值"></a>获取数组对象中某个属性的最大值或最小值</h2><p>比如我想获取a中age最大的那个item</p><ul><li>首先用map吧age的数组输出到数组b</li><li>然后用Math方法找到最大的age，用c保存起来</li><li>然后找到该最大的age——c在数组b中的位置</li><li>然后把这个index记下来</li><li>然后输出原数组中该index位置下的对象即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxObject</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = nums.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span>);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, b);</span><br><span class="line">    index = b.<span class="title function_">indexOf</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMinObject</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = nums.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span>);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, b);</span><br><span class="line">    index = b.<span class="title function_">indexOf</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMaxObject</span>(a));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMinObject</span>(a));</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63fb0e4bf144a01007f0efbd.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript数组对象常用操作&quot;&gt;&lt;a href=&quot;#JavaScript数组对象常用操作&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数组对象常用操作&quot;&gt;&lt;/a&gt;JavaScript数组对象常用操作&lt;/h1&gt;&lt;h2 id=&quot;获</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue内置组件transition的灵活运用</title>
    <link href="https://aliveseven.github.io/posts/56251ecc/"/>
    <id>https://aliveseven.github.io/posts/56251ecc/</id>
    <published>2023-02-21T16:54:46.408Z</published>
    <updated>2023-02-21T16:59:27.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue内置组件transition的灵活运用"><a href="#Vue内置组件transition的灵活运用" class="headerlink" title="Vue内置组件transition的灵活运用"></a>Vue内置组件transition的灵活运用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做语音APP的H5开发的时候，遇到很多动效还原的场景，而且对用户体验感有较强的要求。某些场景经常会有用到transition这个属性。</p><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><ul><li><p><strong>Props</strong>：</p><ul><li><code>name</code> - string，用于自动生成 CSS 过渡类名。例如：<code>name: &#39;fade&#39;</code> 将自动拓展为 <code>.fade-enter</code>，<code>.fade-enter-active</code> 等。默认类名为 <code>&quot;v&quot;</code></li><li><code>appear</code> - boolean，是否在初始渲染时使用过渡。默认为 <code>false</code>。</li><li><code>css</code> - boolean，是否使用 CSS 过渡类。默认为 <code>true</code>。如果设置为 <code>false</code>，将只通过组件事件触发注册的 JavaScript 钩子。</li><li><code>type</code> - string，指定过渡事件类型，侦听过渡何时结束。有效值为 <code>&quot;transition&quot;</code> 和 <code>&quot;animation&quot;</code>。默认 Vue.js 将自动检测出持续时间长的为过渡事件类型。</li><li><code>mode</code> - string，控制离开/进入过渡的时间序列。有效的模式有 <code>&quot;out-in&quot;</code> 和 <code>&quot;in-out&quot;</code>；默认同时进行。</li><li><code>duration</code> - number | { <code>enter</code>: number, <code>leave</code>: number } 指定过渡的持续时间。默认情况下，Vue 会等待过渡所在根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。</li><li><code>enter-class</code> - string</li><li><code>leave-class</code> - string</li><li><code>appear-class</code> - string</li><li><code>enter-to-class</code> - string</li><li><code>leave-to-class</code> - string</li><li><code>appear-to-class</code> - string</li><li><code>enter-active-class</code> - string</li><li><code>leave-active-class</code> - string</li><li><code>appear-active-class</code> - string</li></ul></li><li><p><strong>事件</strong>：</p><ul><li><code>before-enter</code></li><li><code>before-leave</code></li><li><code>before-appear</code></li><li><code>enter</code></li><li><code>leave</code></li><li><code>appear</code></li><li><code>after-enter</code></li><li><code>after-leave</code></li><li><code>after-appear</code></li><li><code>enter-cancelled</code></li><li><code>leave-cancelled</code> (<code>v-show</code> only)</li><li><code>appear-cancelled</code></li></ul></li></ul><h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><ul><li>可以通过css来自定义transition达到的效果</li><li>如果想在transition的过渡效果完成之后，触发某个函数，可以用<code>after-leave</code>来实现，在进入过渡之后完成后触发的话就用<code>after-enter</code>。</li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li><code>in-out</code>：新元素先进行过渡，完成之后 当前元素过渡离开。</li><li><code>out-in</code>：当前元素先进行过渡，完成之后 新元素过渡进入。</li></ul><ul><li>示例:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件钩子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件EnterComplete在过渡进入完成之后触发,LeaveComplete在过渡离开完成之后触发 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">after-enter</span>=<span class="string">&quot;EnterComplete&quot;</span> @<span class="attr">after-leave</span>=<span class="string">&quot;LeaveComplete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">EnterComplete</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;过渡进入完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LeaveComplete</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;过渡离开完成&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue内置组件transition的灵活运用&quot;&gt;&lt;a href=&quot;#Vue内置组件transition的灵活运用&quot; class=&quot;headerlink&quot; title=&quot;Vue内置组件transition的灵活运用&quot;&gt;&lt;/a&gt;Vue内置组件transition的灵活</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Element Table里的input设置只能输入英文和数字</title>
    <link href="https://aliveseven.github.io/posts/7fd0755f/"/>
    <id>https://aliveseven.github.io/posts/7fd0755f/</id>
    <published>2023-02-16T15:33:05.967Z</published>
    <updated>2023-02-16T15:37:45.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Element-Table里的input设置只能输入英文和数字"><a href="#Element-Table里的input设置只能输入英文和数字" class="headerlink" title="Element Table里的input设置只能输入英文和数字"></a>Element Table里的input设置只能输入英文和数字</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做开发的时候经常会有这样的需求，让输入框中只能输入某种类型的东西</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只能允许输入英文和数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;value=value.replace(/[^\w_]/g,&#x27;&#x27;)&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>主要是在input里面，通过onkeyput或oninput加入字段，对输入的内容进行校验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">输入大小写字母、数字、下划线：</span><br><span class="line">oninput=&quot;value=value.replace(/[^\w_]/g,&#x27;&#x27;);&quot;</span><br><span class="line"> </span><br><span class="line">输入小写字母、数字、下划线：</span><br><span class="line">oninput=&quot;value=value.replace(/[^a-z0-9_]/g,&#x27;&#x27;);&quot;</span><br><span class="line"> </span><br><span class="line">输入数字和点</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d.]/g,&#x27;&#x27;)&quot;</span><br><span class="line"></span><br><span class="line">输入中文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^\u4e00-\u9fa5]/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入数字:   </span><br><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入英文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^a-zA-Z]/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入中文、数字、英文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^\w\u4E00-\u9FA5]/g, &#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入数字和字母：</span><br><span class="line">oninput=&quot;value=value.replace(/[\W]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">除了英文的标点符号以外，其他的都可以中文，英文字母，数字，中文标点</span><br><span class="line">oninput=&quot;value=value.replace(/^[^!@#$%^&amp;*()-=+]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入数字代码(小数点也不能输入)</span><br><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot; </span><br><span class="line"> </span><br><span class="line">数字和小数点</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d.]/g, &#x27;&#x27;).replace(/\.&#123;2,&#125;/g, &#x27;.&#x27;).replace(&#x27;.&#x27;, &#x27;$#$&#x27;).replace(/\./g, &#x27;&#x27;).replace(&#x27;$#$&#x27;, &#x27;.&#x27;).replace(/^\./g, &#x27;&#x27;).replace(/^(\-)*(\d+)\.(\d\d).*$/, &#x27;$1$2.$3&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入字母和汉字</span><br><span class="line">oninput=&quot;value=value.replace(/[\d]/g,&#x27;&#x27;) </span><br><span class="line"> </span><br><span class="line">只能输入英文字母和数字,不能输入中文</span><br><span class="line">oninput=&quot;value=value.replace(/[^\w\.\/]/ig,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入数字和英文</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d|chun]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Element-Table里的input设置只能输入英文和数字&quot;&gt;&lt;a href=&quot;#Element-Table里的input设置只能输入英文和数字&quot; class=&quot;headerlink&quot; title=&quot;Element Table里的input设置只能输入英文和数</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>v-model实现原理</title>
    <link href="https://aliveseven.github.io/posts/f3f5decd/"/>
    <id>https://aliveseven.github.io/posts/f3f5decd/</id>
    <published>2023-02-09T13:49:13.269Z</published>
    <updated>2023-02-09T13:50:33.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v-model实现原理"><a href="#v-model实现原理" class="headerlink" title="v-model实现原理"></a>v-model实现原理</h1><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><ul><li><code>v-model</code> 本质上是<code>v-bind</code>的语法糖</li><li><code>v-model</code>一般只作用于表单，或是扩展于其它组件中，一般用于输入框<code>input</code>、<code>textarea</code>、<code>select</code>，它可以监听输入的数据，当数据发生改变之后触发相关事件</li><li>主要是通过<code>v-bind</code>绑定响应式数据</li><li>然后通过<code>v-on</code>触发监听事件</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>等于</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">自html5开始,input每次输入都会触发oninput事件，</span></span><br><span class="line"><span class="comment">所以输入时input的内容会绑定到searchText中，于是searchText的值就被改变;</span></span><br><span class="line"><span class="comment">$event 指代当前触发的事件对象;</span></span><br><span class="line"><span class="comment">$event.target 指代当前触发的事件对象的dom;</span></span><br><span class="line"><span class="comment">$event.target.value 就是当前dom的value值;</span></span><br><span class="line"><span class="comment">在@input方法中，value =&gt; searchText;</span></span><br><span class="line"><span class="comment">在:value中,searchText =&gt; value;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;v-model实现原理&quot;&gt;&lt;a href=&quot;#v-model实现原理&quot; class=&quot;headerlink&quot; title=&quot;v-model实现原理&quot;&gt;&lt;/a&gt;v-model实现原理&lt;/h1&gt;&lt;h2 id=&quot;原理解释&quot;&gt;&lt;a href=&quot;#原理解释&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
