<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2023-02-26T07:53:12.736Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript数组对象常用操作</title>
    <link href="https://aliveseven.github.io/posts/10fb917/"/>
    <id>https://aliveseven.github.io/posts/10fb917/</id>
    <published>2023-02-26T07:48:18.923Z</published>
    <updated>2023-02-26T07:53:12.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript数组对象常用操作"><a href="#JavaScript数组对象常用操作" class="headerlink" title="JavaScript数组对象常用操作"></a>JavaScript数组对象常用操作</h1><h2 id="获取数组对象中，对象中的某个值（key）为指定值"><a href="#获取数组对象中，对象中的某个值（key）为指定值" class="headerlink" title="获取数组对象中，对象中的某个值（key）为指定值"></a>获取数组对象中，对象中的某个值（key）为指定值</h2><p>比如现在有个数组对象a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我想获取，age为100的对象</p><p><strong>通过filter方法来实现，可以获取满足条件的数组对象</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span> == <span class="number">100</span>))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63fafe40f144a01007d70379.jpg" alt=""></p><h2 id="获取数组对象中，某个key的数组"><a href="#获取数组对象中，某个key的数组" class="headerlink" title="获取数组对象中，某个key的数组"></a>获取数组对象中，某个key的数组</h2><p><strong>比如我要获取a的age的数组，可以通过map来实现</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = [</span><br><span class="line">    &#123; age: 22, name: &quot;AA&quot; &#125;,</span><br><span class="line">    &#123; age: 23, name: &quot;BB&quot; &#125;,</span><br><span class="line">    &#123; age: 24, name: &quot;CC&quot; &#125;,</span><br><span class="line">    &#123; age: 25, name: &quot;DD&quot; &#125;,</span><br><span class="line">    &#123; age: 100, name: &quot;EE&quot; &#125;,</span><br><span class="line">    &#123; age: 100, name: &#x27;FF&#x27; &#125;,</span><br><span class="line">    &#123; age: 200, name: &#x27;RR&#x27; &#125;</span><br><span class="line">]</span><br><span class="line">console.log(a.map(item =&gt; item.age))</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63faff36f144a01007d92037.jpg" alt=""></p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>另外map方法也可以对特定item中的某个的值进行判断，返回一个数组，如下，满足条件的对象的<strong>所处下标</strong>，在数组中是true</p><p><img src="https://pic.imgdb.cn/item/63faff97f144a01007d9a6fb.jpg" alt=""></p><h2 id="获取数组对象中某个属性的最大值或最小值"><a href="#获取数组对象中某个属性的最大值或最小值" class="headerlink" title="获取数组对象中某个属性的最大值或最小值"></a>获取数组对象中某个属性的最大值或最小值</h2><p>比如我想获取a中age最大的那个item</p><ul><li>首先用map吧age的数组输出到数组b</li><li>然后用Math方法找到最大的age，用c保存起来</li><li>然后找到该最大的age——c在数组b中的位置</li><li>然后把这个index记下来</li><li>然后输出原数组中该index位置下的对象即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getMaxObject</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = nums.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span>);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, b);</span><br><span class="line">    index = b.<span class="title function_">indexOf</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMinObject</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b = nums.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">age</span>);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, b);</span><br><span class="line">    index = b.<span class="title function_">indexOf</span>(c);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nums[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = [</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">name</span>: <span class="string">&quot;AA&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">name</span>: <span class="string">&quot;BB&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">24</span>, <span class="attr">name</span>: <span class="string">&quot;CC&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">25</span>, <span class="attr">name</span>: <span class="string">&quot;DD&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;EE&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&#x27;FF&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">age</span>: <span class="number">200</span>, <span class="attr">name</span>: <span class="string">&#x27;RR&#x27;</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMaxObject</span>(a));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getMinObject</span>(a));</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63fb0e4bf144a01007f0efbd.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript数组对象常用操作&quot;&gt;&lt;a href=&quot;#JavaScript数组对象常用操作&quot; class=&quot;headerlink&quot; title=&quot;JavaScript数组对象常用操作&quot;&gt;&lt;/a&gt;JavaScript数组对象常用操作&lt;/h1&gt;&lt;h2 id=&quot;获</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue内置组件transition的灵活运用</title>
    <link href="https://aliveseven.github.io/posts/56251ecc/"/>
    <id>https://aliveseven.github.io/posts/56251ecc/</id>
    <published>2023-02-21T16:54:46.408Z</published>
    <updated>2023-02-21T16:59:27.219Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue内置组件transition的灵活运用"><a href="#Vue内置组件transition的灵活运用" class="headerlink" title="Vue内置组件transition的灵活运用"></a>Vue内置组件transition的灵活运用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做语音APP的H5开发的时候，遇到很多动效还原的场景，而且对用户体验感有较强的要求。某些场景经常会有用到transition这个属性。</p><h2 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h2><ul><li><p><strong>Props</strong>：</p><ul><li><code>name</code> - string，用于自动生成 CSS 过渡类名。例如：<code>name: &#39;fade&#39;</code> 将自动拓展为 <code>.fade-enter</code>，<code>.fade-enter-active</code> 等。默认类名为 <code>&quot;v&quot;</code></li><li><code>appear</code> - boolean，是否在初始渲染时使用过渡。默认为 <code>false</code>。</li><li><code>css</code> - boolean，是否使用 CSS 过渡类。默认为 <code>true</code>。如果设置为 <code>false</code>，将只通过组件事件触发注册的 JavaScript 钩子。</li><li><code>type</code> - string，指定过渡事件类型，侦听过渡何时结束。有效值为 <code>&quot;transition&quot;</code> 和 <code>&quot;animation&quot;</code>。默认 Vue.js 将自动检测出持续时间长的为过渡事件类型。</li><li><code>mode</code> - string，控制离开/进入过渡的时间序列。有效的模式有 <code>&quot;out-in&quot;</code> 和 <code>&quot;in-out&quot;</code>；默认同时进行。</li><li><code>duration</code> - number | { <code>enter</code>: number, <code>leave</code>: number } 指定过渡的持续时间。默认情况下，Vue 会等待过渡所在根元素的第一个 <code>transitionend</code> 或 <code>animationend</code> 事件。</li><li><code>enter-class</code> - string</li><li><code>leave-class</code> - string</li><li><code>appear-class</code> - string</li><li><code>enter-to-class</code> - string</li><li><code>leave-to-class</code> - string</li><li><code>appear-to-class</code> - string</li><li><code>enter-active-class</code> - string</li><li><code>leave-active-class</code> - string</li><li><code>appear-active-class</code> - string</li></ul></li><li><p><strong>事件</strong>：</p><ul><li><code>before-enter</code></li><li><code>before-leave</code></li><li><code>before-appear</code></li><li><code>enter</code></li><li><code>leave</code></li><li><code>appear</code></li><li><code>after-enter</code></li><li><code>after-leave</code></li><li><code>after-appear</code></li><li><code>enter-cancelled</code></li><li><code>leave-cancelled</code> (<code>v-show</code> only)</li><li><code>appear-cancelled</code></li></ul></li></ul><h2 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h2><ul><li>可以通过css来自定义transition达到的效果</li><li>如果想在transition的过渡效果完成之后，触发某个函数，可以用<code>after-leave</code>来实现，在进入过渡之后完成后触发的话就用<code>after-enter</code>。</li></ul><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><ul><li><code>in-out</code>：新元素先进行过渡，完成之后 当前元素过渡离开。</li><li><code>out-in</code>：当前元素先进行过渡，完成之后 新元素过渡进入。</li></ul><ul><li>示例:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事件钩子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">name</span>=<span class="string">&quot;fade&quot;</span> <span class="attr">mode</span>=<span class="string">&quot;out-in&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 事件EnterComplete在过渡进入完成之后触发,LeaveComplete在过渡离开完成之后触发 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> @<span class="attr">after-enter</span>=<span class="string">&quot;EnterComplete&quot;</span> @<span class="attr">after-leave</span>=<span class="string">&quot;LeaveComplete&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>toggled content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">EnterComplete</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;过渡进入完成&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">LeaveComplete</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;过渡离开完成&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue内置组件transition的灵活运用&quot;&gt;&lt;a href=&quot;#Vue内置组件transition的灵活运用&quot; class=&quot;headerlink&quot; title=&quot;Vue内置组件transition的灵活运用&quot;&gt;&lt;/a&gt;Vue内置组件transition的灵活</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Element Table里的input设置只能输入英文和数字</title>
    <link href="https://aliveseven.github.io/posts/7fd0755f/"/>
    <id>https://aliveseven.github.io/posts/7fd0755f/</id>
    <published>2023-02-16T15:33:05.967Z</published>
    <updated>2023-02-16T15:37:45.992Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Element-Table里的input设置只能输入英文和数字"><a href="#Element-Table里的input设置只能输入英文和数字" class="headerlink" title="Element Table里的input设置只能输入英文和数字"></a>Element Table里的input设置只能输入英文和数字</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在做开发的时候经常会有这样的需求，让输入框中只能输入某种类型的东西</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只能允许输入英文和数字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> <span class="attr">oninput</span>=<span class="string">&quot;value=value.replace(/[^\w_]/g,&#x27;&#x27;)&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>主要是在input里面，通过onkeyput或oninput加入字段，对输入的内容进行校验。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot;</span><br></pre></td></tr></table></figure><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">输入大小写字母、数字、下划线：</span><br><span class="line">oninput=&quot;value=value.replace(/[^\w_]/g,&#x27;&#x27;);&quot;</span><br><span class="line"> </span><br><span class="line">输入小写字母、数字、下划线：</span><br><span class="line">oninput=&quot;value=value.replace(/[^a-z0-9_]/g,&#x27;&#x27;);&quot;</span><br><span class="line"> </span><br><span class="line">输入数字和点</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d.]/g,&#x27;&#x27;)&quot;</span><br><span class="line"></span><br><span class="line">输入中文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^\u4e00-\u9fa5]/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入数字:   </span><br><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入英文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^a-zA-Z]/g,&#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入中文、数字、英文:   </span><br><span class="line">oninput=&quot;value=value.replace(/[^\w\u4E00-\u9FA5]/g, &#x27;&#x27;)&quot;</span><br><span class="line">  </span><br><span class="line">输入数字和字母：</span><br><span class="line">oninput=&quot;value=value.replace(/[\W]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">除了英文的标点符号以外，其他的都可以中文，英文字母，数字，中文标点</span><br><span class="line">oninput=&quot;value=value.replace(/^[^!@#$%^&amp;*()-=+]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入数字代码(小数点也不能输入)</span><br><span class="line">oninput=&quot;value=value.replace(/\D/g,&#x27;&#x27;)&quot; </span><br><span class="line"> </span><br><span class="line">数字和小数点</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d.]/g, &#x27;&#x27;).replace(/\.&#123;2,&#125;/g, &#x27;.&#x27;).replace(&#x27;.&#x27;, &#x27;$#$&#x27;).replace(/\./g, &#x27;&#x27;).replace(&#x27;$#$&#x27;, &#x27;.&#x27;).replace(/^\./g, &#x27;&#x27;).replace(/^(\-)*(\d+)\.(\d\d).*$/, &#x27;$1$2.$3&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入字母和汉字</span><br><span class="line">oninput=&quot;value=value.replace(/[\d]/g,&#x27;&#x27;) </span><br><span class="line"> </span><br><span class="line">只能输入英文字母和数字,不能输入中文</span><br><span class="line">oninput=&quot;value=value.replace(/[^\w\.\/]/ig,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br><span class="line">只能输入数字和英文</span><br><span class="line">oninput=&quot;value=value.replace(/[^\d|chun]/g,&#x27;&#x27;)&quot;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Element-Table里的input设置只能输入英文和数字&quot;&gt;&lt;a href=&quot;#Element-Table里的input设置只能输入英文和数字&quot; class=&quot;headerlink&quot; title=&quot;Element Table里的input设置只能输入英文和数</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>v-model实现原理</title>
    <link href="https://aliveseven.github.io/posts/f3f5decd/"/>
    <id>https://aliveseven.github.io/posts/f3f5decd/</id>
    <published>2023-02-09T13:49:13.269Z</published>
    <updated>2023-02-09T13:50:33.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v-model实现原理"><a href="#v-model实现原理" class="headerlink" title="v-model实现原理"></a>v-model实现原理</h1><h2 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h2><ul><li><code>v-model</code> 本质上是<code>v-bind</code>的语法糖</li><li><code>v-model</code>一般只作用于表单，或是扩展于其它组件中，一般用于输入框<code>input</code>、<code>textarea</code>、<code>select</code>，它可以监听输入的数据，当数据发生改变之后触发相关事件</li><li>主要是通过<code>v-bind</code>绑定响应式数据</li><li>然后通过<code>v-on</code>触发监听事件</li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;searchText&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>等于</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:value</span>=<span class="string">&quot;searchText&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:input</span>=<span class="string">&quot;searchText = $event.target.value&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">自html5开始,input每次输入都会触发oninput事件，</span></span><br><span class="line"><span class="comment">所以输入时input的内容会绑定到searchText中，于是searchText的值就被改变;</span></span><br><span class="line"><span class="comment">$event 指代当前触发的事件对象;</span></span><br><span class="line"><span class="comment">$event.target 指代当前触发的事件对象的dom;</span></span><br><span class="line"><span class="comment">$event.target.value 就是当前dom的value值;</span></span><br><span class="line"><span class="comment">在@input方法中，value =&gt; searchText;</span></span><br><span class="line"><span class="comment">在:value中,searchText =&gt; value;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;v-model实现原理&quot;&gt;&lt;a href=&quot;#v-model实现原理&quot; class=&quot;headerlink&quot; title=&quot;v-model实现原理&quot;&gt;&lt;/a&gt;v-model实现原理&lt;/h1&gt;&lt;h2 id=&quot;原理解释&quot;&gt;&lt;a href=&quot;#原理解释&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现特定时间触发函数</title>
    <link href="https://aliveseven.github.io/posts/862f3e23/"/>
    <id>https://aliveseven.github.io/posts/862f3e23/</id>
    <published>2023-02-05T14:56:23.223Z</published>
    <updated>2023-02-05T15:08:37.654Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript实现特定时间触发函数"><a href="#JavaScript实现特定时间触发函数" class="headerlink" title="JavaScript实现特定时间触发函数"></a>JavaScript实现特定时间触发函数</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>做开发的时候，有些业务需要多次重复触发一个函数，并以时间为判断标准，或是单次触发函数，在特定的时间点的时候。</li><li>多次触发就用setInverval来实现</li><li>单次触发可以通过setTimeout，或者直接调用</li></ul><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一秒内多次触发</span></span><br><span class="line">  <span class="keyword">const</span> timeMask = <span class="title function_">setInverval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="string">&quot;2023-02-05 23:59:59&quot;</span>;  <span class="comment">// 要触发函数的特定时间</span></span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">new</span> <span class="title class_">Date</span>(); </span><br><span class="line">    <span class="keyword">let</span> now = data.<span class="title function_">valueOf</span>();  <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="keyword">let</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>(value).<span class="title function_">valueOf</span>(); <span class="comment">// 特定时间转化</span></span><br><span class="line">    <span class="comment">// console.log(&quot;now:&quot; , now)</span></span><br><span class="line">    <span class="comment">// console.log(&quot;value&quot; , time)</span></span><br><span class="line">    <span class="comment">// 如果当前时间大于特定时间</span></span><br><span class="line">    <span class="keyword">if</span>(now &gt; time)&#123;</span><br><span class="line">      <span class="comment">// 取消多次触发循环的定时操作</span></span><br><span class="line">      <span class="built_in">clearInterval</span>(timeMask)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;超过了特定时间了，触发相关方法&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;还没超过特定时间&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 触发</span></span><br><span class="line">  timeMask</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ul><li>单次触发可以把<code>setInverval</code>改为<code>setTimeout</code>，并且把<code>clearInterval(timeMask)</code>注释掉</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript实现特定时间触发函数&quot;&gt;&lt;a href=&quot;#JavaScript实现特定时间触发函数&quot; class=&quot;headerlink&quot; title=&quot;JavaScript实现特定时间触发函数&quot;&gt;&lt;/a&gt;JavaScript实现特定时间触发函数&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端Vue常用的性能优化</title>
    <link href="https://aliveseven.github.io/posts/20578f0d/"/>
    <id>https://aliveseven.github.io/posts/20578f0d/</id>
    <published>2023-02-01T15:17:33.469Z</published>
    <updated>2023-02-01T15:22:53.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端Vue常用的性能优化"><a href="#前端Vue常用的性能优化" class="headerlink" title="前端Vue常用的性能优化"></a>前端Vue常用的性能优化</h1><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>尽量减少http请求，减少页面的重排重绘</li><li>开启gzip压缩，压缩css和js文件</li><li>加入CDN静态资源加速</li><li>加入节流防抖</li><li>加入图片、路由懒加载，预加载</li><li>灵活使用缓存，减少请求负担</li><li>减少页面的dom操作，尽量用v-show代替v-if</li><li>组件拆分</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端Vue常用的性能优化&quot;&gt;&lt;a href=&quot;#前端Vue常用的性能优化&quot; class=&quot;headerlink&quot; title=&quot;前端Vue常用的性能优化&quot;&gt;&lt;/a&gt;前端Vue常用的性能优化&lt;/h1&gt;&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Springboot中通过模糊搜索Redis中的key进行批量删除数据</title>
    <link href="https://aliveseven.github.io/posts/3b8f5bd1/"/>
    <id>https://aliveseven.github.io/posts/3b8f5bd1/</id>
    <published>2023-01-30T14:52:15.114Z</published>
    <updated>2023-01-31T17:32:15.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Springboot中通过模糊搜索Redis中的key进行批量删除数据"><a href="#Springboot中通过模糊搜索Redis中的key进行批量删除数据" class="headerlink" title="Springboot中通过模糊搜索Redis中的key进行批量删除数据"></a>Springboot中通过模糊搜索Redis中的key进行批量删除数据</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发后台的时候，通过Redis对分页查询的数据进行了缓存，但是数据在做新增、删除、更新的时候，为了保持Redis中缓存的数据与数据库中的数据保持一致性，<strong>需要对缓存也进行更新处理</strong>。</p><p>这里我用的更新方法也是非常简单暴力，就在查询的时候，会对Redis进行一次查询，根据分页的页码和相对应的表。<strong>如果查到的缓存为空，那么就会去数据库查询，然后再设置缓存。</strong></p><p>而在增删改的接口上，我是<strong>直接将缓存删除</strong>，等到调用分页查询数据的接口的时候再去重新设置一次缓存，以此保持数据的一致性。</p><p>具体可以看看下面的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用/page接口，参数有PageNum、pageSize，还有其他非必须参数进行模糊查询</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">page</span><span class="params">(<span class="meta">@RequestParam(&quot;pageNum&quot;)</span> Integer pageNum ,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;pageSize&quot;)</span> Integer pageSize,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;username&quot;, required = false)</span> String username,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;email&quot;, required = false)</span> String email,</span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;phone&quot;, required = false)</span> String phone)</span>&#123;</span><br><span class="line">        IPage&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(pageNum , pageSize);</span><br><span class="line">        QueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(username),<span class="string">&quot;username&quot;</span> , username);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(email),<span class="string">&quot;email&quot;</span> , email);</span><br><span class="line">        queryWrapper.like(!Strings.isEmpty(phone),<span class="string">&quot;phone&quot;</span>, phone);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(username == <span class="string">&quot;&quot;</span> &amp;&amp; email == <span class="string">&quot;&quot;</span> &amp;&amp; phone == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">                <span class="comment">// 查询缓存</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userKey</span> <span class="operator">=</span> Constants.USER_PAGE_KEY + <span class="string">&quot;_&quot;</span> + String.valueOf(pageNum);</span><br><span class="line">                <span class="type">String</span> <span class="variable">res</span> <span class="operator">=</span> iRedisService.getString(userKey);</span><br><span class="line">                <span class="comment">// 如果缓存存在，不为空，拿出来</span></span><br><span class="line">                <span class="keyword">if</span>(!StrUtil.isBlank(res))&#123;</span><br><span class="line">                        <span class="comment">// 把String类型转成JSON类型再返回</span></span><br><span class="line">                        <span class="type">JSONObject</span> <span class="variable">data</span> <span class="operator">=</span> JSONUtil.parseObj(res);</span><br><span class="line">                        <span class="type">Integer</span> <span class="variable">nowSize</span> <span class="operator">=</span> (Integer) data.get(<span class="string">&quot;size&quot;</span>);</span><br><span class="line">                        <span class="keyword">if</span>(nowSize != pageSize)&#123;</span><br><span class="line">                                <span class="comment">// 页码发生变化的时候，清除缓存重新设置</span></span><br><span class="line">                                iRedisService.flushRedis(userKey);</span><br><span class="line">                                <span class="comment">// 重新查询数据库</span></span><br><span class="line">                                IPage&lt;User&gt; userIPage = userService.page(page, queryWrapper);</span><br><span class="line">                                <span class="comment">// 设置缓存</span></span><br><span class="line">                                iRedisService.setString(userKey , JSONUtil.toJsonStr(userIPage));</span><br><span class="line">                                <span class="keyword">return</span> Result.success(userIPage);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> Result.success(data);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 如果缓存不存在，查询数据库</span></span><br><span class="line">                        IPage&lt;User&gt; userIPage = userService.page(page, queryWrapper);</span><br><span class="line">                        <span class="comment">// 设置缓存</span></span><br><span class="line">                        iRedisService.setString(userKey , JSONUtil.toJsonStr(userIPage));</span><br><span class="line">                        <span class="keyword">return</span> Result.success(userIPage);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(userService.page(page, queryWrapper));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><ol><li>加入Redis序列化配置类，再Config里面设置相对于的序列化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis序列化配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> AliveSeven 2023/01/30 18:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * springboot 默认帮我们创建的RedisTemplate的key和value的序列化方式是jdk默认的方式,</span></span><br><span class="line"><span class="comment">     * 我们有时候手动向redis中添加的数据可能无法被查询解析出来,所以我们需要修改序列化方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(LettuceConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        redisTemplate.setKeySerializer(stringRedisSerializer); <span class="comment">//设置key的序列化方式</span></span><br><span class="line">        redisTemplate.setHashKeySerializer(stringRedisSerializer);<span class="comment">//设置hash类型的数据的key的序列化方式</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);<span class="comment">//非final类型的数据才会被序列化</span></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);<span class="comment">//设置value的序列化方式为json</span></span><br><span class="line">        redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Redis的工具类里面加入下面的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据模糊查询的key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> keys</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getKeysByPre</span><span class="params">(String prefix)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stringRedisTemplate.keys(prefix + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据模糊查询的key进行批量删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteByPre</span><span class="params">(String prefix)</span>&#123;</span><br><span class="line">    Set&lt;String&gt; keys = stringRedisTemplate.keys(prefix + <span class="string">&quot;*&quot;</span>);</span><br><span class="line">    stringRedisTemplate.delete(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>然后传入要模糊搜索的key关键字，查询到的keys会放在一个列表里面，调用delete方法会删除对应的数据</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Springboot中通过模糊搜索Redis中的key进行批量删除数据&quot;&gt;&lt;a href=&quot;#Springboot中通过模糊搜索Redis中的key进行批量删除数据&quot; class=&quot;headerlink&quot; title=&quot;Springboot中通过模糊搜索Redis</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>解决原生安卓出现 WiFi 网络连接受限问题</title>
    <link href="https://aliveseven.github.io/posts/702abf9d/"/>
    <id>https://aliveseven.github.io/posts/702abf9d/</id>
    <published>2023-01-20T16:44:14.407Z</published>
    <updated>2023-01-21T07:25:06.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解决原生安卓出现-WiFi-网络连接受限问题"><a href="#解决原生安卓出现-WiFi-网络连接受限问题" class="headerlink" title="解决原生安卓出现 WiFi 网络连接受限问题"></a>解决原生安卓出现 WiFi 网络连接受限问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主在香港之前买了一部POCO X3 PRO，本来想着想试试小米的国外产品，整体来说在境外的体验还不错，但是回到大陆的时候，连接国内的WIFI出了个问题，网络连接受限，而且网速被限制了，这样就让我很难受，而且手机是小米的，也不好Root，为了解决这个问题，我也是费尽心思，去下载了一个叫ADB的工具包，然后对其进行修复。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><strong>这里主要讲述一下手机没有ROOT的情况下的解决方案，有ROOT的暂时不做讨论</strong></p><p>先到网上下载ADB工具包，然后解压到C盘或者随便某个盘的位置。</p><p><strong>这里我直接放链接吧！</strong></p><p>链接: <a href="https://pan.baidu.com/s/1mfrgDH5q_tedQnfGYbV91A">https://pan.baidu.com/s/1mfrgDH5q_tedQnfGYbV91A</a> 提取码: tha6 复制这段内容后打开百度网盘手机App，操作更方便哦</p><p>然后解压之后，需要打开电脑环境配置一些adb命令，比如我这里放在C盘的adb文件夹下面</p><p><img src="https://pic.imgdb.cn/item/63cac220be43e0d30e636603.jpg" alt=""></p><p>那么我就要把这个adb.exe的所在路径<strong>C:\adb</strong>，配到系统环境变量里面去，类似于配JAVA的JDK，Vue的Node环境一样差不多而已。</p><p><img src="https://pic.imgdb.cn/item/63cac2cfbe43e0d30e646d64.jpg" alt=""></p><p>配置好之后，手机打开开发者模式，具体操作就是点击我的手机→全部参数→多次点击<strong>MIUI版本</strong>的那个框框，然后就进入开发者模式了，然后手机开启USB调试模式，<strong>打开USB调试（安全设置）</strong>，这个部分很重要，如果没有打开USB调试安全设置，会报JAVA错，然后打开接着运行 CMD 输入下面的命令即可。</p><p><strong>删除默认的地址</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_https_url</span><br><span class="line">adb shell settings delete global captive_portal_http_url</span><br></pre></td></tr></table></figure><p><strong>修改新的地址</strong></p><p>由于我的手机是MIUI系统，所以用了MIUI的服务器地址，其他同学可以去找自己手机型号的地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception occurred while executing &#x27;delete&#x27;:</span><br><span class="line"></span><br><span class="line">java.lang.SecurityException: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Exception occurred while executing &#x27;put&#x27;:</span><br><span class="line"></span><br><span class="line">java.lang.SecurityException: Permission denial: writing to settings requires:android.permission.WRITE_SECURE_SETTINGS</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63cac42fbe43e0d30e6684bf.jpg" alt=""></p><p>这两个问题都是没有打开<strong>USB调试（安全设置）</strong>导致的，打开之后重新输入即可。或者在开发者选项中开启 <strong>禁止权限监控</strong>（OPPO、Realme手机），再次执行就没问题。</p><p>完成效果</p><p><img src="https://pic.imgdb.cn/item/63cac4a5be43e0d30e672d80.jpg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;解决原生安卓出现-WiFi-网络连接受限问题&quot;&gt;&lt;a href=&quot;#解决原生安卓出现-WiFi-网络连接受限问题&quot; class=&quot;headerlink&quot; title=&quot;解决原生安卓出现 WiFi 网络连接受限问题&quot;&gt;&lt;/a&gt;解决原生安卓出现 WiFi 网络连接受限</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="安卓" scheme="https://aliveseven.github.io/tags/%E5%AE%89%E5%8D%93/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vue3将页面中的div（Dom元素）转换成可下载的图片</title>
    <link href="https://aliveseven.github.io/posts/4af13564/"/>
    <id>https://aliveseven.github.io/posts/4af13564/</id>
    <published>2023-01-18T13:42:34.558Z</published>
    <updated>2023-01-18T13:53:56.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3将页面中的div（Dom元素）转换成可下载的图片"><a href="#Vue3将页面中的div（Dom元素）转换成可下载的图片" class="headerlink" title="Vue3将页面中的div（Dom元素）转换成可下载的图片"></a>Vue3将页面中的div（Dom元素）转换成可下载的图片</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行H5开发的时候，遇到过这样的一个业务，用户登录，然后获取到用户的<strong>服务器名称、角色名称、邀请码</strong>，将它们弄在页面的一个卡片图片上，弄上去后生成一张可以长按保存的图片。</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>用到了一个叫html2canvas的插件，<strong>利用插件将dom元素转成图片</strong>。</p><p>页面代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">van-popup</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-model:show</span>=<span class="string">&quot;state.cardShow&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;pop&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">closed</span>=<span class="string">&quot;close&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">opened</span>=<span class="string">&quot;toImg&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-wrap&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card-title&quot;</span>&gt;</span>長按保存圖片<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span> <span class="attr">id</span>=<span class="string">&quot;mycard&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mycard&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;htmlUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sever-name&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!hastoImg&quot;</span>&gt;</span>&#123;&#123; server &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;role-name&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!hastoImg&quot;</span>&gt;</span>&#123;&#123; roleName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;share-code&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;!hastoImg&quot;</span>&gt;</span>&#123;&#123; code &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">van-popup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>JavaScript实现方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; ref, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">import userCounterStore from &#x27;@/stores/user&#x27;;</span><br><span class="line">import activityCounterStore from &#x27;@/stores/activity&#x27;;</span><br><span class="line">import html2canvas from &quot;html2canvas&quot;</span><br><span class="line">const &#123; serverId,  roleId,  roleInfo, serverName, roleName &#125; = toRefs(userCounterStore());</span><br><span class="line">const &#123; code &#125; = toRefs(activityCounterStore());</span><br><span class="line"></span><br><span class="line">// 关闭触发</span><br><span class="line">const close = () =&gt;&#123;</span><br><span class="line">    htmlUrl.value = &quot;./card2.png&quot;</span><br><span class="line">    hastoImg.value = false</span><br><span class="line">    state.setCardShow(false)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// dom转图片方法</span><br><span class="line">const htmlUrl = ref(&quot;./card2.png&quot;)</span><br><span class="line">const hastoImg = ref(false)</span><br><span class="line">const toImg = () =&gt;&#123;</span><br><span class="line">    // 先获取你要转换为img的dom节点</span><br><span class="line">    let card = document.getElementById(&#x27;mycard&#x27;);//传入的id名称</span><br><span class="line">    let scale = 3; //放大倍数 这个相当于清晰度 调大一点更清晰一点</span><br><span class="line">    html2canvas(card, &#123;</span><br><span class="line">                backgroundColor: null,</span><br><span class="line">                useCORS: true, // 解决文件跨域问题</span><br><span class="line">                scale: scale,</span><br><span class="line">                dpi: window.devicePixelRatio * 4, //按屏幕像素比增加像素</span><br><span class="line">                scrollY: -10,</span><br><span class="line">    &#125;).then((canvas) =&gt; &#123;</span><br><span class="line">        let url = canvas.toDataURL(&#x27;image/png&#x27;);</span><br><span class="line">        htmlUrl.value = url;</span><br><span class="line">        console.log(&quot;htmlUrl&quot;,htmlUrl)</span><br><span class="line">        hastoImg.value = true</span><br><span class="line">    &#125;).catch((e) =&gt; &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3将页面中的div（Dom元素）转换成可下载的图片&quot;&gt;&lt;a href=&quot;#Vue3将页面中的div（Dom元素）转换成可下载的图片&quot; class=&quot;headerlink&quot; title=&quot;Vue3将页面中的div（Dom元素）转换成可下载的图片&quot;&gt;&lt;/a&gt;Vu</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot文件上传大小限制问题</title>
    <link href="https://aliveseven.github.io/posts/6c4f14c4/"/>
    <id>https://aliveseven.github.io/posts/6c4f14c4/</id>
    <published>2023-01-13T14:11:38.063Z</published>
    <updated>2023-01-13T14:31:20.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot文件上传大小限制问题"><a href="#SpringBoot文件上传大小限制问题" class="headerlink" title="SpringBoot文件上传大小限制问题"></a>SpringBoot文件上传大小限制问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在用SpringBoot开发后台系统的时候，需要开发文件上传业务，但是上传大文件控制台会报错：<code>The field files exceeds its maximum permitted size</code>。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>一般SpringBoot的文件上传大小限制在1M以下，单个请求中最多可容纳10M大小的文件流数据，这个大小对于我们实际开发来说实在太小了。</p><p>解决办法也很简单，在配置文件application.properties里面加入相关配置即可</p><p><img src="https://pic.imgdb.cn/item/63c16624be43e0d30e83ac82.jpg" alt=""></p><h3 id="Spring-Boot-1-3-x或之前版本，配置如下："><a href="#Spring-Boot-1-3-x或之前版本，配置如下：" class="headerlink" title="Spring Boot 1.3.x或之前版本，配置如下："></a>Spring Boot 1.3.x或之前版本，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">multipart.maxFileSize=100Mb</span><br><span class="line">multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-1-4-x版本及以上，配置如下："><a href="#Spring-Boot-1-4-x版本及以上，配置如下：" class="headerlink" title="Spring Boot 1.4.x版本及以上，配置如下："></a>Spring Boot 1.4.x版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.http.multipart.maxFileSize=100Mb</span><br><span class="line">spring.http.multipart.maxRequestSize=1000Mb</span><br></pre></td></tr></table></figure><h3 id="Spring-Boot-2-0版本及以上，配置如下："><a href="#Spring-Boot-2-0版本及以上，配置如下：" class="headerlink" title="Spring Boot 2.0版本及以上，配置如下："></a>Spring Boot 2.0版本及以上，配置如下：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.servlet.multipart.max-file-size = 100MB</span><br><span class="line">spring.servlet.multipart.max-request-size = 1000MB</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;a href=&quot;#SpringBoot文件上传大小限制问题&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot文件上传大小限制问题&quot;&gt;&lt;/a&gt;SpringBoot文件上传大小限制问题&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue3父组件调用子组件的方法</title>
    <link href="https://aliveseven.github.io/posts/2d7c1534/"/>
    <id>https://aliveseven.github.io/posts/2d7c1534/</id>
    <published>2023-01-12T15:19:44.736Z</published>
    <updated>2023-01-12T15:30:30.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3父组件调用子组件的方法"><a href="#Vue3父组件调用子组件的方法" class="headerlink" title="Vue3父组件调用子组件的方法"></a>Vue3父组件调用子组件的方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在开发落地页项目的时候，有这样的一个业务：</p><ol><li>角色在登录之后，需要知道这个用户是否之前有绑定过角色，</li><li>因为一个账号有多个角色，但是能够领取奖励的只能有一个角色</li><li>所以需要知道这个用户是否有绑定过角色，如果有，那么直接跳过绑定角色这一步，如果没有，转到绑定角色的弹窗去。</li><li>但是现在就有个问题，我弹窗是自己做的一个用来装其他，比如登录框、绑定框、选择账号框的一个<strong>父组件</strong>，这里用到的<strong>绑定角色框</strong>是其中的一个<strong>子组件</strong>。</li><li>但是绑定角色里面的逻辑业务是需要在这个子组件里面调用的，不能放在像pinia、vuex里面这种公共区域调用，也不能放在别的组件中调用，所以现在有这样一个需求，<strong>vue3中父组件调用子组件的方法</strong></li></ol><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>在网上看到很多都是说用ref给子组件绑定一个值，然后在子组件中通过defineExpose将要调用的方法暴露出去。</p><p>但是弄了很多次，子组件ref绑定的值一直是undefined，不知道是不是我操作姿势不知道还是什么。</p><h2 id="vue3-eventbus"><a href="#vue3-eventbus" class="headerlink" title="vue3-eventbus"></a>vue3-eventbus</h2><p>这是一个很好用的插件，类似于vue2中的事件总线，特别好用，只需要在要被调用的子组件中用bus.on()，设置要监听的方法名和，触发的函数。</p><h3 id="在全局注册"><a href="#在全局注册" class="headerlink" title="在全局注册"></a>在全局注册</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eventBus <span class="keyword">from</span> <span class="string">&#x27;vue3-eventbus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(eventBus)</span><br></pre></td></tr></table></figure><h3 id="在子组件中"><a href="#在子组件中" class="headerlink" title="在子组件中"></a>在子组件中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> bus <span class="keyword">from</span> <span class="string">&#x27;vue3-eventbus&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  bus.<span class="title function_">on</span>(<span class="string">&#x27;bindrole&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 绑定角色的方法</span></span><br><span class="line">    <span class="title class_">BindRole</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;绑定角色&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="在父组件中"><a href="#在父组件中" class="headerlink" title="在父组件中"></a>在父组件中</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bindOnlyRole</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// event-bus yyds</span></span><br><span class="line">  <span class="comment">// 触发绑定角色事件</span></span><br><span class="line">  bus.<span class="title function_">emit</span>(<span class="string">&#x27;bindrole&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，这个也能用于子组件与子组件、子组件与父组件间等等的传值、方法调用，很好用。</p><p>使用方法基本都差不多，要调用方法的组件中，用bus.on()来监听要触发的方法，在其他组件中用bus.emit()来触发相关方法，用方法名来做依据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3父组件调用子组件的方法&quot;&gt;&lt;a href=&quot;#Vue3父组件调用子组件的方法&quot; class=&quot;headerlink&quot; title=&quot;Vue3父组件调用子组件的方法&quot;&gt;&lt;/a&gt;Vue3父组件调用子组件的方法&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue2/Vue3实现路由过渡动画效果</title>
    <link href="https://aliveseven.github.io/posts/fc56fa96/"/>
    <id>https://aliveseven.github.io/posts/fc56fa96/</id>
    <published>2023-01-10T16:04:43.780Z</published>
    <updated>2023-01-13T16:53:36.344Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue2-Vue3实现路由过渡动画效果"><a href="#Vue2-Vue3实现路由过渡动画效果" class="headerlink" title="Vue2/Vue3实现路由过渡动画效果"></a>Vue2/Vue3实现路由过渡动画效果</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在后台开发的过程中，页面经常有路由的转换，但是由于转换过程太过于死板，所以想给它加入一点点动画效果，或者是淡入/淡出效果，提高体验</p><h2 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h2><p>在Vue2中，可以在路由router-view上加上transition和效果即可</p><p> <router-view>是基本的动态组件，所以我们可以用<transition>组件给它添加一些过渡效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Vue3</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">RouterView</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">&quot;slide-fade&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">component</span> <span class="attr">class</span>=<span class="string">&quot;child-view&quot;</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;is_show&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RouterView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该过渡效果的CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 离开 */</span></span><br><span class="line"><span class="selector-class">.slide-fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 进入 */</span></span><br><span class="line"><span class="selector-class">.slide-fade-enter-from</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="selector-class">.fade-enter</span> &#123;  </span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">50px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* transition: all 1s; */</span></span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">6s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">55</span>, <span class="number">0</span>, .<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Vue3中enter事件的css可能会失效，需要重写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-from</span> &#123;  </span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-to</span> &#123; </span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-leave-to</span>&#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">100px</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.fade-enter-active</span>,</span><br><span class="line"><span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="comment">/* transition: all 1s; */</span></span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">6s</span> <span class="built_in">cubic-bezier</span>(.<span class="number">55</span>, <span class="number">0</span>, .<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>transiton的属性及其含义：</strong></p><ol><li>name为过渡效果名，后续的css样式需要与 name建立关系，以name替代上面的v</li><li>mode设置动画模式，原先进入和离开的元素都是在同时开始动画的，使用mode=”out-in”可以先执行完离开动画，然后再执行进入动画</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue2-Vue3实现路由过渡动画效果&quot;&gt;&lt;a href=&quot;#Vue2-Vue3实现路由过渡动画效果&quot; class=&quot;headerlink&quot; title=&quot;Vue2/Vue3实现路由过渡动画效果&quot;&gt;&lt;/a&gt;Vue2/Vue3实现路由过渡动画效果&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Element-UI上传文件用action上传跨域问题</title>
    <link href="https://aliveseven.github.io/posts/706eff6b/"/>
    <id>https://aliveseven.github.io/posts/706eff6b/</id>
    <published>2023-01-08T08:49:05.591Z</published>
    <updated>2023-01-08T08:58:03.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Element-UI上传文件用action上传跨域问题"><a href="#Element-UI上传文件用action上传跨域问题" class="headerlink" title="Element-UI上传文件用action上传跨域问题"></a>Element-UI上传文件用action上传跨域问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在实习过程，遇到了需要开发大文件上传的业务，由于公司之前的小文件上传是用action的方式来上传，但是这样做有比较大的限制，而且很容易遇到跨域的问题出现。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>需要使用 <strong>:http-request</strong> 的方式上传，通过这种方式上传，可以不给action赋值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;视频封面上传&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;upload-demo&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:http-request</span>=<span class="string">&quot;uploadImg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">list-type</span>=<span class="string">&quot;picture-card&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-preview</span>=<span class="string">&quot;handlePictureCardPreview&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-exceed</span>=<span class="string">&quot;handleExceed&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-change</span>=<span class="string">&quot;handleChangeImg&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-upload</span>=<span class="string">&quot;beforeImgUpload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">&quot;uploadData&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;image/png, image/jpeg&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span>&gt;</span>上传视频封面图片文件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里上传是采用自动上传的方式来执行，通过 <strong>:http-request</strong>的方式引入<strong>axios</strong>封装的<strong>request</strong>请求来调用接口方法，获取数据，一般可以解决跨域的问题。</p><p>此外，需要给request加入以下请求头，是用来<strong>上传文件流</strong>用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> headers = &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundarynl6gT1BKdPWIejNq&quot;</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;视频上传&quot;</span> <span class="attr">v-loading</span>=<span class="string">&quot;videoLoading&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">&quot;upload-demo&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">action</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:http-request</span>=<span class="string">&quot;uploadFile&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:header</span>=<span class="string">&quot;header&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-remove</span>=<span class="string">&quot;handleRemove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-remove</span>=<span class="string">&quot;beforeRemove&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-change</span>=<span class="string">&quot;handleChange&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:before-upload</span>=<span class="string">&quot;beforeFileUpload&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">drag</span></span></span><br><span class="line"><span class="tag">    <span class="attr">multiple</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:limit</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:on-exceed</span>=<span class="string">&quot;handleExceed&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">&quot;uploadData&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">accept</span>=<span class="string">&quot;video/mp4, video/flv, video/avi, video/rmvb&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>将文件拖到此处，或<span class="tag">&lt;<span class="name">em</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span>&gt;</span>上传视频文件，可以拖拽上传<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="上传的方法"><a href="#上传的方法" class="headerlink" title="上传的方法"></a>上传的方法</h3><p><strong>:http-request</strong> 指定自定义的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上传视频</span></span><br><span class="line"><span class="title function_">uploadFile</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;正在上传视频:&quot;</span>,params)</span><br><span class="line">    <span class="comment">// 开始等待</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">videoLoading</span> = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"> formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, params.<span class="property">file</span>)</span><br><span class="line">    <span class="title function_">upload</span>(formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;视频上传：&quot;</span>,res)</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">code</span> === <span class="string">&#x27;1&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">fileId</span> = res.<span class="property">data</span>.<span class="property">fileId</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">fileName</span> = res.<span class="property">data</span>.<span class="property">fileName</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">filePath</span> = res.<span class="property">data</span>.<span class="property">filePath</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">fileUrl</span> = res.<span class="property">data</span>.<span class="property">fileUrl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$message(&#123;</span><br><span class="line">              <span class="attr">message</span>: <span class="string">&quot;上传失败，请重试&quot;</span>,</span><br><span class="line">              <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 等待完成</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">videoLoading</span> = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上传视频封面</span></span><br><span class="line"><span class="title function_">uploadImg</span>(<span class="params">params</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line"> formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, params.<span class="property">file</span>)</span><br><span class="line">    <span class="title function_">upload</span>(formData).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;图片上传：&quot;</span>,res)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">detialForm</span>.<span class="property">popUrl</span> = res.<span class="property">data</span>.<span class="property">fileUrl</span>;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Element-UI上传文件用action上传跨域问题&quot;&gt;&lt;a href=&quot;#Element-UI上传文件用action上传跨域问题&quot; class=&quot;headerlink&quot; title=&quot;Element-UI上传文件用action上传跨域问题&quot;&gt;&lt;/a&gt;Eleme</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JWT令牌Token验证，过期验证</title>
    <link href="https://aliveseven.github.io/posts/1b9ff95e/"/>
    <id>https://aliveseven.github.io/posts/1b9ff95e/</id>
    <published>2023-01-01T07:59:17.552Z</published>
    <updated>2023-01-07T17:25:00.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT令牌Token验证，过期验证"><a href="#JWT令牌Token验证，过期验证" class="headerlink" title="JWT令牌Token验证，过期验证"></a>JWT令牌Token验证，过期验证</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行中后台开发的时候，发现一些小问题，就是在用户已经登录，本地浏览器存入token的情况下，用户如果之间跳转到登录/login的路由，这时候是需要判断当前用户的token状态是否过期，如果过期了就停留在登录页面（login路由），如果没有过期，就跳转到首页的路由</p><h2 id="实现的方法"><a href="#实现的方法" class="headerlink" title="实现的方法"></a>实现的方法</h2><p>前端我是设置了一个路由监听，如果当前的路由是Login，调用后端方法进行token的期限判断，如果没有过期就跳转到首页</p><h2 id="路由监听"><a href="#路由监听" class="headerlink" title="路由监听"></a>路由监听</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路由监听</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to , <span class="keyword">from</span> , next</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; setRouteName &#125; = <span class="title function_">useState</span>()</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;currentRouteName&#x27;</span>, to.<span class="property">name</span> <span class="keyword">as</span> <span class="built_in">string</span>)</span><br><span class="line">  <span class="comment">// 设置当前路由</span></span><br><span class="line">  <span class="title function_">setRouteName</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果当前路由是登录</span></span><br><span class="line">  <span class="keyword">if</span>(to.<span class="property">name</span> === <span class="string">&#x27;Login&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>) ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;user&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">token</span> : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">// 检查token是否过期</span></span><br><span class="line">    <span class="title function_">isExpiration</span>(token).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// 如果token没有过期，之间跳到主控台</span></span><br><span class="line">      <span class="keyword">if</span>(res.<span class="property">data</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&quot;/home/dashBoard&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 未找到路由的情况</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!to.<span class="property">matched</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> storeMenus = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;menus&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (storeMenus) &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/404&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 跳回登录页面</span></span><br><span class="line">      <span class="title function_">next</span>(<span class="string">&quot;/login&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 其他的情况都放行</span></span><br><span class="line">    <span class="title function_">next</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="后端token过期验证"><a href="#后端token过期验证" class="headerlink" title="后端token过期验证"></a>后端token过期验证</h2><p>auth0 JWT库具有用于分析和（可选）验证令牌的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验token是否过期</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token  密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否过期</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isExpiration</span><span class="params">(String token)</span>&#123;</span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> JWT.decode(token);</span><br><span class="line">    <span class="keyword">if</span>( jwt.getExpiresAt().before(<span class="keyword">new</span> <span class="title class_">Date</span>())) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;token is expired&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回false，说明过期了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 返回true，说明还没过期</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="验证token是否正确"><a href="#验证token是否正确" class="headerlink" title="验证token是否正确"></a>验证token是否正确</h2><p>这个可加也可不加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验token是否正确</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> token  密钥</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sign 用户的密码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 是否正确</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isToken</span><span class="params">(String token, String userId ,String sign)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//根据密码生成JWT效验器</span></span><br><span class="line">        <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.HMAC256(sign);</span><br><span class="line">        <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).withAudience(userId).build();</span><br><span class="line">        <span class="comment">//效验TOKEN</span></span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JWT令牌Token验证，过期验证&quot;&gt;&lt;a href=&quot;#JWT令牌Token验证，过期验证&quot; class=&quot;headerlink&quot; title=&quot;JWT令牌Token验证，过期验证&quot;&gt;&lt;/a&gt;JWT令牌Token验证，过期验证&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3中的toRef和toRefs</title>
    <link href="https://aliveseven.github.io/posts/4d78abc9/"/>
    <id>https://aliveseven.github.io/posts/4d78abc9/</id>
    <published>2022-12-27T14:09:37.744Z</published>
    <updated>2023-01-07T17:25:48.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3中的toRef和toRefs"><a href="#Vue3中的toRef和toRefs" class="headerlink" title="Vue3中的toRef和toRefs"></a>Vue3中的toRef和toRefs</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li><code>toRef</code>和<code>toRefs</code>是用于复制<code>reactive</code>里面的属性，然后转成<code>ref</code>。</li><li><code>reactive</code>原本是响应式对象，被解构后里面的属性丧失了响应特性。而<code>toRefs</code>可以将一个响应式对象变成普通对象，而将它的属性全部变成相应式属性</li><li>类似于浅拷贝的方式，它复制的其实就是引用 + 响应式 <code>ref</code></li><li>toRef: 复制 reactive 里的单个属性并转成 ref</li><li>toRefs: 复制 reactive 里的所有属性并转成 ref</li></ul><h2 id="toRef"><a href="#toRef" class="headerlink" title="toRef"></a>toRef</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> info = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Tony&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 复制 info 里的 name 属性</span></span><br><span class="line">    <span class="keyword">let</span> rName = <span class="title function_">toRef</span>(info, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="comment">// 更改 rName</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">onChangeName</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      rName.<span class="property">value</span> = <span class="string">&#x27;Stack!&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      info,</span><br><span class="line">      rName,</span><br><span class="line">      onChangeName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/63adb3b808b68301632a7285.gif" alt=""></p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;</span><br><span class="line">    reactive-info-name: &#123;&#123; info.name &#125;&#125; </span><br><span class="line">  &lt;/h2&gt;</span><br><span class="line">  &lt;h2&gt;</span><br><span class="line">    toRefs-rInfo: &#123;&#123; rInfo.name.value &#125;&#125;</span><br><span class="line">  &lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;onChangeInfo&quot;&gt;更新&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; reactive, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">setup() &#123;</span><br><span class="line">    let info = reactive(&#123;</span><br><span class="line">      name: &#x27;Tony&#x27;,</span><br><span class="line">      age: 30</span><br><span class="line">    &#125;)</span><br><span class="line">// 复制 info 里的 name 属性</span><br><span class="line">    let rInfo = toRefs(info)</span><br><span class="line">    // 更改 rInfo</span><br><span class="line">    const onChangeInfo = () =&gt; &#123;</span><br><span class="line">      rInfo.name.value = &#x27;Stack!&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    return &#123;</span><br><span class="line">      info,</span><br><span class="line">      rInfo,</span><br><span class="line">      onChangeInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3中的toRef和toRefs&quot;&gt;&lt;a href=&quot;#Vue3中的toRef和toRefs&quot; class=&quot;headerlink&quot; title=&quot;Vue3中的toRef和toRefs&quot;&gt;&lt;/a&gt;Vue3中的toRef和toRefs&lt;/h1&gt;&lt;h2 id=&quot;作</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>通过axios下载/导出文件</title>
    <link href="https://aliveseven.github.io/posts/9957f058/"/>
    <id>https://aliveseven.github.io/posts/9957f058/</id>
    <published>2022-12-26T13:45:37.903Z</published>
    <updated>2023-01-07T17:32:30.872Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过axios下载-导出文件"><a href="#通过axios下载-导出文件" class="headerlink" title="通过axios下载/导出文件"></a>通过axios下载/导出文件</h1><h2 id="TypeScript代码"><a href="#TypeScript代码" class="headerlink" title="TypeScript代码"></a>TypeScript代码</h2><h3 id="API接口代码"><a href="#API接口代码" class="headerlink" title="API接口代码"></a>API接口代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出用户信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">exportUser</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">        url : <span class="string">&#x27;/user/export&#x27;</span>,</span><br><span class="line">        method : <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">headers</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出信息文件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">exportUserInfo</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="title function_">exportUser</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res : <span class="built_in">any</span></span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> blob :<span class="built_in">any</span> = <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: <span class="string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;&quot;</span>&#125;);</span><br><span class="line">    <span class="keyword">let</span> url = <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob); <span class="comment">// 创建一个临时的url指向blob对象</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    a.<span class="property">href</span> = url;</span><br><span class="line">    a.<span class="property">download</span> = <span class="string">&#x27;用户信息&#x27;</span>;  <span class="comment">// 自定义下载文件名</span></span><br><span class="line">    a.<span class="title function_">click</span>();</span><br><span class="line">    <span class="comment">// 释放这个临时的对象url</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">revokeObjectURL</span>(url); </span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title class_">ElMessage</span>(&#123;</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;网络错误&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最近阳了，鸽了好多天没更博客了😣😣</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过axios下载-导出文件&quot;&gt;&lt;a href=&quot;#通过axios下载-导出文件&quot; class=&quot;headerlink&quot; title=&quot;通过axios下载/导出文件&quot;&gt;&lt;/a&gt;通过axios下载/导出文件&lt;/h1&gt;&lt;h2 id=&quot;TypeScript代码&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/TypeScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="TypeScript" scheme="https://aliveseven.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Options请求详解</title>
    <link href="https://aliveseven.github.io/posts/dd78f1f7/"/>
    <id>https://aliveseven.github.io/posts/dd78f1f7/</id>
    <published>2022-12-17T15:37:07.456Z</published>
    <updated>2023-01-07T17:43:12.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Options请求详解"><a href="#Options请求详解" class="headerlink" title="Options请求详解"></a>Options请求详解</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul><li>Option请求就是预处理请求，一般是发生在跨域请求的时候，浏览器为了安全起见，会执行CORS预检请求，也就是Options请求。</li><li>HTTP 的 OPTIONS 方法用于获取目的资源所支持的通信选项。</li><li>在跨域请求时，浏览器会向服务器发起Options请求，从而获知服务端是否允许该跨域请求。服务器确认允许之后，才发起实际的 HTTP 请求。</li></ul><blockquote><p>某些请求不会触发CORS预检请求，这样的请求一般称为 “简单请求” ，而会触发预检的请求则是 “复杂请求” 。</p></blockquote><h2 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h2><ul><li>一般通过GET、HEAD、POST请求时，都是简单请求</li><li>请求中的任意 XMLHttpRequestUpload对象均没有注册任何事件监听器；</li><li>请求中没有使用 ReadableStream对象。</li><li>Content-Type 的值仅限于下列三者之一,即application/x-www-form-urlencoded、multipart/form-data、text/plain；</li></ul><h2 id="复杂请求"><a href="#复杂请求" class="headerlink" title="复杂请求"></a>复杂请求</h2><ul><li>通过PUT/DELETE/CONNECT/OPTIONS/TRACE/PATCH请求</li><li>Content-Type 的值不属于下列之一，即application/x-www-form-urlencoded、multipart/form-data、text/plain。</li></ul><h2 id="Options请求优化策略"><a href="#Options请求优化策略" class="headerlink" title="Options请求优化策略"></a>Options请求优化策略</h2><p>当发起跨域请求时，简单请求只发起1次请求；复杂请求则需要2次，先发起options请求，确认目标资源是否支持跨域，浏览器会根据服务端响应的header自动处理剩余的请求，如果响应支持跨域，则继续发出正常请求；不支持的话，会在控制台显示错误。</p><p>所以，当触发预检时，跨域请求便会发送2次请求，增加请求次数，同时，也延迟了请求真正发起的时间，会严重地影响性能。</p><h3 id="优化方法一"><a href="#优化方法一" class="headerlink" title="优化方法一"></a>优化方法一</h3><ul><li>用其它的跨域方式做跨域请求，将复杂请求转为简单请求，比如JSONP等</li><li>对 options 请求进行缓存</li></ul><blockquote><p>文章参考：<a href="https://blog.csdn.net/kjssjj12/article/details/125298347">https://blog.csdn.net/kjssjj12/article/details/125298347</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Options请求详解&quot;&gt;&lt;a href=&quot;#Options请求详解&quot; class=&quot;headerlink&quot; title=&quot;Options请求详解&quot;&gt;&lt;/a&gt;Options请求详解&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;head</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue通过不同的值改变class</title>
    <link href="https://aliveseven.github.io/posts/6df76c49/"/>
    <id>https://aliveseven.github.io/posts/6df76c49/</id>
    <published>2022-12-14T15:10:33.302Z</published>
    <updated>2023-01-07T17:38:47.884Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue通过不同的值改变class"><a href="#Vue通过不同的值改变class" class="headerlink" title="Vue通过不同的值改变class"></a>Vue通过不同的值改变class</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>我们在进行组件化开发的时候，可能想让当前类有不同的样式，或者是多种样式。</li><li>亦或是我们想要通过<strong>props</strong>来进行父组件给子组件传值，然后子组件根据传过来的值进行判断，不同的值对应不同的样式（有点像组件库中的size）</li><li>这时候就引出上题了</li></ul><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>其实很简单，只需要给class加上<code>&#123; &#39;类名&#39; : &#39;条件&#39; &#125;</code>即可，比如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pop&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; popB : popAct == true&#125;&quot;</span> &gt;</span></span><br></pre></td></tr></table></figure><p>这里就给盒子加入pop 和 popB的类名了，popB是<strong>(popAct == true)</strong>这个条件为true的时候才触发，也就是popAct == false的时候，这个时候就没有popB这个类名了。</p><p>即：</p><ul><li>当popAct == true的时候，class = “pop popB”</li><li>当popAct == false的时候，不满足触发popB的条件，class = “pop”</li></ul><h2 id="多个条件的情况下"><a href="#多个条件的情况下" class="headerlink" title="多个条件的情况下"></a>多个条件的情况下</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#123; big : size == &#x27;da&#x27; &#125;,&#123; mid : size == &#x27;zhong&#x27;&#125;,&#123;small : size==&#x27;xiao&#x27;&#125;]&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码的意思：</p><ul><li>当size这个变量等于’da’的时候，即size == ‘da’ 为true的时候，class=”big”</li><li>当size这个变量等于’zhong’的时候，即size == ‘zhong’ 为true的时候，class=”mid”</li><li>当size这个变量等于’xiao’的时候，即size == ‘xiao’ 为true的时候，class=”small”</li></ul><p>这样看是不是很容易理解了。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue通过不同的值改变class&quot;&gt;&lt;a href=&quot;#Vue通过不同的值改变class&quot; class=&quot;headerlink&quot; title=&quot;Vue通过不同的值改变class&quot;&gt;&lt;/a&gt;Vue通过不同的值改变class&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>css中的 /deep/ 的作用</title>
    <link href="https://aliveseven.github.io/posts/d8bf5e98/"/>
    <id>https://aliveseven.github.io/posts/d8bf5e98/</id>
    <published>2022-12-09T16:49:07.089Z</published>
    <updated>2023-01-07T17:31:12.879Z</updated>
    
    <content type="html"><![CDATA[<h1 id="css中的-deep-的作用"><a href="#css中的-deep-的作用" class="headerlink" title="css中的 /deep/ 的作用"></a>css中的 /deep/ 的作用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在用Vue进行模块化、组件化开发的时候，可以通过给样式加上scoped，避免了父组件的样式影响了子组件的样式。而<code>/deep/</code> 的作用和scoped也有点类似。</p><h2 id="css中的scoped"><a href="#css中的scoped" class="headerlink" title="css中的scoped"></a>css中的scoped</h2><p>使用<code>&lt;style scoped&gt;</code>，这样父组件中如果有跟子组件相同的class名称或者使用选择器的时候，就不会影响到子组件的样式。</p><p>通过给style添加<code>scoped</code>，使它的<strong>css只作用于当前组件的元素。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">    <span class="selector-class">.box</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>:<span class="string">&#x27;#999&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="深度选择器-deep"><a href="#深度选择器-deep" class="headerlink" title="深度选择器 /deep/"></a>深度选择器 /deep/</h2><p>使用了外界的组件（比如像Element-UI、Ant Design、Vant等组件库中的组件）或者自己开发一个组件，修改一处就可能会影响到用这个组件的所有样式，所以就需要有一个方法或者方式，<strong>既不影响到别的地方</strong>，<strong>又能修改子组件在当前的样式</strong>。<code>/deep/</code>就能实现。</p><p>比如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> /deep/ <span class="selector-class">.el-tabs__item</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#303133</span> <span class="meta">!important</span>;  // !important 优先级</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v-deep"><a href="#v-deep" class="headerlink" title="::v-deep"></a>::v-deep</h2><p>在vue2中，我们舍弃了’&gt;&gt;&gt;’ 和 / deep /，改用<strong>::v-deep</strong>来进行深度选择</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::v-deep .el-col &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="v-deep-1"><a href="#v-deep-1" class="headerlink" title="v-deep"></a>v-deep</h2><p>而在vue3中，官方推荐使用<strong>v-deep(.className)</strong>来进行深度选择，当然::v-deep依旧也可以使用，不过可以采用缩写的方式来进行css编译—— <strong>:deep</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">::<span class="built_in">v-deep</span>(.el-col) &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 缩写</span><br><span class="line">:<span class="built_in">deep</span>(.el-col) &#123;</span><br><span class="line"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;css中的-deep-的作用&quot;&gt;&lt;a href=&quot;#css中的-deep-的作用&quot; class=&quot;headerlink&quot; title=&quot;css中的 /deep/ 的作用&quot;&gt;&lt;/a&gt;css中的 /deep/ 的作用&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Vue中$emit的用法</title>
    <link href="https://aliveseven.github.io/posts/3900e167/"/>
    <id>https://aliveseven.github.io/posts/3900e167/</id>
    <published>2022-12-07T15:38:31.955Z</published>
    <updated>2023-01-07T17:37:23.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue中-emit的用法"><a href="#Vue中-emit的用法" class="headerlink" title="Vue中$emit的用法"></a>Vue中$emit的用法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发的过程中，我们很多时候都需要用到组件之间的通信，父组件可以通过props把数据传给子组件，这是父→子的通信。同样，也有子→父的通信方式，$emit就是其中的一种。子组件可以通过$emit，让父组件监听到自定义事件。</p><h2 id="Vue2中"><a href="#Vue2中" class="headerlink" title="Vue2中"></a>Vue2中</h2><blockquote><p>使用：比如子组件使用$emit定义一个 自定义事件FuncHello</p></blockquote><ul><li>子组件在方法中设定一个sendByEmit方法，方法中使用$emit向父组件发出启动’FuncHello’的方法，传入的参数是data。</li><li>加入一个按钮，点击按钮触发sendByEmit函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;button @click=&quot;sendByEmit()&quot;&gt;按下发送$emit&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">    name :  &#x27;Children&#x27;,</span><br><span class="line">    props : &#123;</span><br><span class="line">        msg : String</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        sendByEmit()&#123;</span><br><span class="line">            let data = &#x27;hello&#x27;</span><br><span class="line">            this.$emit(&#x27;FuncHello&#x27;, data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>父组件中引入子组件，通过v-on或者是@引入自定义的方法FuncHello</p></blockquote><ul><li>加入一个h1标签，用v-for的方法将数据中的text数组遍历出来。</li><li>声明一个getEmitData方法，用于接受FuncHello方法传过来的数据，对数据进行操作，这里是把数据推到text数组里面</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 v-for=&quot;(item, index) in text&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">        &lt;Children @FuncHello=&quot;getEmitData&quot; &gt;&lt;/Children&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Children from &#x27;@/components/Children.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    name : &#x27;Father&#x27;,</span><br><span class="line">    components : &#123;</span><br><span class="line">        Children</span><br><span class="line">    &#125;, </span><br><span class="line">    data() &#123;</span><br><span class="line">        return&#123;</span><br><span class="line">            text : [&#x27;12345&#x27;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods : &#123;</span><br><span class="line">        getEmitData(data)&#123;</span><br><span class="line">            this.text.push(data)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h8voh8ucx5g30b40kv3zn.gif" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue中-emit的用法&quot;&gt;&lt;a href=&quot;#Vue中-emit的用法&quot; class=&quot;headerlink&quot; title=&quot;Vue中$emit的用法&quot;&gt;&lt;/a&gt;Vue中$emit的用法&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
