<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AliveSeven&#39;s Blog</title>
  
  
  <link href="https://aliveseven.github.io/atom.xml" rel="self"/>
  
  <link href="https://aliveseven.github.io/"/>
  <updated>2022-11-08T17:13:30.703Z</updated>
  <id>https://aliveseven.github.io/</id>
  
  <author>
    <name>AliveSeven</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Js实现防抖节流</title>
    <link href="https://aliveseven.github.io/posts/ffbd457d/"/>
    <id>https://aliveseven.github.io/posts/ffbd457d/</id>
    <published>2022-11-07T15:03:40.299Z</published>
    <updated>2022-11-08T17:13:30.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js实现防抖节流"><a href="#Js实现防抖节流" class="headerlink" title="Js实现防抖节流"></a>Js实现防抖节流</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>防抖节流是经常在开发中用到的一个东西，都是用来控制某个函数在一定时间内触发次数，两者都是为了<strong>减少触发频率</strong>，以便提高性能或者说避免资源浪费。</p><p><strong>防抖：</strong> n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p><p><strong>节流：</strong> n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</p><h2 id="手写防抖"><a href="#手写防抖" class="headerlink" title="手写防抖"></a>手写防抖</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;FangDou&quot;</span>&gt;</span>防抖<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#FangDou&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 手写防抖</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 防抖是函数在n秒内重复触发，则重新计时</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// func  要进行防抖的方法，delay是要防抖的时间</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 声明变量来保存计时，让其作为局部变量保存在内存中，且不被随意访问，借助闭包来实现</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 返回一个闭包，通过return的函数可以来间接访问timer，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 保存闭包被调用时的this</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// let that = this</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 如果时间期限还没到又触发了，则清除上一个定时器，重新计算时间</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">if</span>(timer)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 清除定时器，debounce执行时要先把之前的setTimeout先清除再重新计时。</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">clearTimeout</span>(timer)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 箭头函数的this永远指向外层作用域的this</span></span></span><br><span class="line"><span class="language-javascript">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 使用apply来改变this指向，apply函数会执行fn函数，并改变this指向</span></span></span><br><span class="line"><span class="language-javascript">        func.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 执行完毕之后，再把timer设为null</span></span></span><br><span class="line"><span class="language-javascript">                    timer = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">        &#125;, delay)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">play</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11111</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="property">onclick</span> = <span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">play</span> , <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="手写节流"><a href="#手写节流" class="headerlink" title="手写节流"></a>手写节流</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手写节流</span></span><br><span class="line"><span class="comment">// 节流是函数在n秒内重复触发，只触发一次</span></span><br><span class="line"><span class="comment">// func  要进行节流的方法，delay是要节流的时间</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func , delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 每次触发事件时，如果当前有等待执行的函数，则直接return</span></span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(<span class="variable language_">this</span> , <span class="variable language_">arguments</span>)</span><br><span class="line">            timer = <span class="literal">null</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js实现防抖节流&quot;&gt;&lt;a href=&quot;#Js实现防抖节流&quot; class=&quot;headerlink&quot; title=&quot;Js实现防抖节流&quot;&gt;&lt;/a&gt;Js实现防抖节流&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Js实现图片懒加载</title>
    <link href="https://aliveseven.github.io/posts/388bfa10/"/>
    <id>https://aliveseven.github.io/posts/388bfa10/</id>
    <published>2022-11-04T16:25:34.145Z</published>
    <updated>2022-11-05T17:09:03.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js实现图片懒加载"><a href="#Js实现图片懒加载" class="headerlink" title="Js实现图片懒加载"></a>Js实现图片懒加载</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>图片懒加载是一种对网页性能优化的方式，当访问一个页面的时候，优先加载可视区域的图片，而不是一次性把页面中的图片都请求加载出来。通过这种方式可以使页面加载速度变快，减轻服务器的压力，节省流量。</p><p>简单来说：就是不一次性加载那么多图片，而是慢慢来，按需加载。</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><ol><li>首先获取当前元素距离顶部的距离</li><li>再获取屏幕的高度</li></ol><p>主要方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>，<span class="title class_">DOMobj</span>.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span>   <span class="comment">//获取该元素到屏幕顶部的距离</span></span><br><span class="line"><span class="number">2</span>，<span class="variable language_">window</span>.<span class="property">innerHeight</span>    <span class="comment">//屏幕的高度</span></span><br></pre></td></tr></table></figure><h2 id="简易版懒加载"><a href="#简易版懒加载" class="headerlink" title="简易版懒加载"></a>简易版懒加载</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://tvax2.sinaimg.cn/large/ec43126fgy1gnucibfc39j216f1kwn9p.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy-load&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://pic1.imgdb.cn/item/63344ce316f2c2beb1649065.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;1&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://tva1.sinaimg.cn/large/ec43126fgy1gnl0376ljdj21e01utx6q.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy-load&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://pic1.imgdb.cn/item/63344ce316f2c2beb1649065.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;2&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://tva3.sinaimg.cn/large/ec43126fgy1gyzyd4fabqj21h629ue81.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy-load&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://pic1.imgdb.cn/item/63344ce316f2c2beb1649065.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;3&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://tva1.sinaimg.cn/large/ec43126fgy1gylpzp4ne6j213f1hl7wh.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy-load&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://pic1.imgdb.cn/item/63344ce316f2c2beb1649065.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;4&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://tvax2.sinaimg.cn/large/ec43126fgy1gx5p5fkacuj21kr2bcb2c.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy-load&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://pic1.imgdb.cn/item/63344ce316f2c2beb1649065.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;5&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://tva2.sinaimg.cn/large/ec43126fgy1h1y4bq4k6ej21xg19fqv5.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy-load&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://pic1.imgdb.cn/item/63344ce316f2c2beb1649065.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;6&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">data-src</span>=<span class="string">&quot;https://tvax2.sinaimg.cn/large/ec43126fgy1gza15dciynj21o02ooqv8.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;lazy-load&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">src</span>=<span class="string">&quot;https://pic1.imgdb.cn/item/63344ce316f2c2beb1649065.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;7&quot;</span> <span class="attr">srcset</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">imgLazyLoad</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 把类数组转换为真数组</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> imgs = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-load&#x27;</span>)]</span></span><br><span class="line"><span class="language-javascript">        imgs.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(img.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 图片一旦有src就会加载出来，所以图片的路径不会放在src中，而是一个自定义的属性data-src中</span></span></span><br><span class="line"><span class="language-javascript">                img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 页面第一次加载，触发事件，屏幕内的图片正常加载，屏幕外的用scr内的代替</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onload</span> = imgLazyLoad;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 监听滚轮事件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,imgLazyLoad)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7uoupkqd7g31ca0o8hdt.gif" alt=""></p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7uoubkh8ag31ca0o8npf.gif" alt=""></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>监听鼠标滚轮过于频繁，应该进行节流优化一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">imgLazyLoad</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 把类数组转换为真数组</span></span><br><span class="line">        <span class="keyword">var</span> imgs = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.lazy-load&#x27;</span>)]</span><br><span class="line">        imgs.<span class="title function_">forEach</span>(<span class="function"><span class="params">img</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(img.<span class="title function_">getBoundingClientRect</span>().<span class="property">top</span> &lt; <span class="variable language_">window</span>.<span class="property">innerHeight</span>)&#123;</span><br><span class="line">                <span class="comment">// 图片一旦有src就会加载出来，所以图片的路径不会放在src中，而是一个自定义的属性data-src中</span></span><br><span class="line">                img.<span class="property">src</span> = img.<span class="property">dataset</span>.<span class="property">src</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 页面第一次加载，触发事件，屏幕内的图片正常加载，屏幕外的用scr内的代替</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">onload</span> = imgLazyLoad;</span><br><span class="line">    <span class="comment">// 监听滚轮事件</span></span><br><span class="line">    <span class="keyword">var</span> listenScroll = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 设置节流让其300ms只执行一次这个函数</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>,<span class="function">() =&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//在设定的时间内，则不执行函数</span></span><br><span class="line">        <span class="keyword">if</span>(!listenScroll)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 定时器事件</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span>&#123;</span><br><span class="line">                <span class="title function_">imgLazyLoad</span>()</span><br><span class="line">                <span class="comment">// 事件执行完成之后，将监听事件的变量listenScroll变为true，即监听过了</span></span><br><span class="line">                listenScroll = <span class="literal">true</span></span><br><span class="line">            &#125;,<span class="number">300</span>);</span><br><span class="line">            <span class="comment">// 定时器执行完之后，再重新赋值监听事件的变量listenScroll</span></span><br><span class="line">            listenScroll = <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="再优化"><a href="#再优化" class="headerlink" title="再优化"></a>再优化</h2><p>上面这种方式虽然也实现了懒加载，但是还是有一点缺点，就是一当发生滚动事件时，就发生了大量的循环和判断操作判断图片是否可视区里。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js实现图片懒加载&quot;&gt;&lt;a href=&quot;#Js实现图片懒加载&quot; class=&quot;headerlink&quot; title=&quot;Js实现图片懒加载&quot;&gt;&lt;/a&gt;Js实现图片懒加载&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>尝试手写Ajax</title>
    <link href="https://aliveseven.github.io/posts/1d0f8d42/"/>
    <id>https://aliveseven.github.io/posts/1d0f8d42/</id>
    <published>2022-11-03T12:47:09.345Z</published>
    <updated>2022-11-03T13:48:07.882Z</updated>
    
    <content type="html"><![CDATA[<h1 id="尝试手写Ajax"><a href="#尝试手写Ajax" class="headerlink" title="尝试手写Ajax"></a>尝试手写Ajax</h1><h2 id="Ajax是什么"><a href="#Ajax是什么" class="headerlink" title="Ajax是什么"></a>Ajax是什么</h2><p><code>AJAX</code> 即 <code>Asynchronous Javascript And XML</code>（异步JavaScript和XML），是指一种创建交互式网页应用的网页开发技术。可以通过Ajax向服务端发起异步请求数据，最大的优势在于无需刷新即可获取到数据。</p><h2 id="Ajax的优缺点"><a href="#Ajax的优缺点" class="headerlink" title="Ajax的优缺点"></a>Ajax的优缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol><li>可以无需刷新页面而与服务器端进行通信</li><li>充分利用客户端闲置的处理能力，减轻服务器和网络传输的负担</li></ol><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol><li>Ajax干掉了Back和History功能，即对浏览器机制的破坏。</li><li>没有浏览历史，不能回退</li><li>存在跨域问题(同源)</li><li>SEO 不友好</li></ol><h2 id="发起请求的常见响应状态码"><a href="#发起请求的常见响应状态码" class="headerlink" title="发起请求的常见响应状态码"></a>发起请求的常见响应状态码</h2><ul><li>200 OK 请求成功。一般用于GET 与POST 请求</li><li>201 Created 已创建。成功请求并创建了新的资源</li><li>401 Unauthorized 未授权/请求要求用户的身份认证</li><li>404 Not Found 服务器无法根据客户端的请求找到资源</li><li>500 Internal Server Error 服务器内部错误，无法完成请求</li></ul><h2 id="常见请求类型"><a href="#常见请求类型" class="headerlink" title="常见请求类型"></a>常见请求类型</h2><ul><li>GET: 从服务器端读取数据（查）</li><li>POST: 向服务器端添加新数据 （增）</li><li>PUT: 更新服务器端已经数据 （改）</li><li>DELETE: 删除服务器端数据 （删）</li></ul><h2 id="Ajax实现过程"><a href="#Ajax实现过程" class="headerlink" title="Ajax实现过程"></a>Ajax实现过程</h2><ol><li>创建Ajax的核心对象XMLHttpRequest对象</li><li>创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息</li><li>在发起请求之前，通过setRequestHeader方法来为Ajax请求添加头信息</li><li>发送HTTP请求</li><li>获取异步调用返回的数据，XMLHttpRequest状态变化时会触发onreadystatechange事件，可以通过设置监听函数，来处理请求成功后的结果</li><li>使用JavaScript和DOM实现局部刷新</li></ol><h2 id="手写Ajax"><a href="#手写Ajax" class="headerlink" title="手写Ajax"></a>手写Ajax</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建对象 </span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2. 初始化 设置请求方法和url</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;https://www.baidu.com/&#x27;</span>,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 3.设置请求头</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,<span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="comment">// xhr.responseType = &quot;json&quot;;</span></span><br><span class="line"><span class="comment">// 4. 事件绑定 处理服务端返回的结果</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// readyState 是 xhr 对象中的属性, 表示状态 0 1 2 3 4</span></span><br><span class="line">    <span class="comment">// 判断 (服务端返回了所有的结果</span></span><br><span class="line">    <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断响应状态码 200 404 403 401 500</span></span><br><span class="line">        <span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>)&#123;</span><br><span class="line">        <span class="comment">// 处理结果 行 头 空行 体</span></span><br><span class="line">        <span class="comment">// 响应</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态码&#x27;</span>, xhr.<span class="property">status</span>); <span class="comment">// 状态码</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;状态字符串&#x27;</span>, xhr.<span class="property">statusText</span>); <span class="comment">// 状态字符串</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;所有响应头&#x27;</span>, xhr.<span class="title function_">getAllResponseHeaders</span>()); <span class="comment">// 所有响应头</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;响应体&#x27;</span>, xhr.<span class="property">response</span>); <span class="comment">// 响应体</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置 result 的文本</span></span><br><span class="line">        result.<span class="property">innerHTML</span>=xhr.<span class="property">response</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5. 发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br></pre></td></tr></table></figure><h2 id="加入Promise"><a href="#加入Promise" class="headerlink" title="加入Promise"></a>加入Promise</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ajax</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>,url,<span class="literal">true</span>)</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.<span class="property">readyState</span> === <span class="number">4</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(xhr.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">                    <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>))</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;error&#x27;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        xhr.<span class="title function_">send</span>(<span class="literal">null</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;xxxx.com&#x27;</span></span><br><span class="line"><span class="title function_">ajax</span>(url).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="API总结"><a href="#API总结" class="headerlink" title="API总结"></a>API总结</h2><ul><li><code>XMLHttpRequest()</code>：创建 XHR 对象的构造函数</li><li><code>status</code>：响应状态码值，如 200、404</li><li><code>statusText</code>：响应状态文本，如 ’ok‘、‘not found’</li><li><code>readyState</code>：标识请求状态的只读属性 0-1-2-3-4</li><li><code>onreadystatechange</code>：绑定 readyState 改变的监听</li><li><code>responseType</code>：指定响应数据类型，如果是 ‘json’，得到响应后自动解析响应</li><li><code>response</code>：响应体数据，类型取决于 responseType 的指定</li><li><code>timeout</code>：指定请求超时时间，默认为 0 代表没有限制</li><li><code>ontimeout</code>：绑定超时的监听</li><li><code>onerror</code>：绑定请求网络错误的监听</li><li><code>open()</code>：初始化一个请求，参数为：(method, url[, async])</li><li><code>send(data)</code>：发送请求</li><li><code>abort()</code>：中断请求 （发出到返回之间）</li><li><code>getResponseHeader(name)</code>：获取指定名称的响应头值</li><li><code>getAllResponseHeaders()</code>：获取所有响应头组成的字符串</li><li><code>setRequestHeader(name, value)</code>：设置请求头</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;尝试手写Ajax&quot;&gt;&lt;a href=&quot;#尝试手写Ajax&quot; class=&quot;headerlink&quot; title=&quot;尝试手写Ajax&quot;&gt;&lt;/a&gt;尝试手写Ajax&lt;/h1&gt;&lt;h2 id=&quot;Ajax是什么&quot;&gt;&lt;a href=&quot;#Ajax是什么&quot; class=&quot;header</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>前端面试2</title>
    <link href="https://aliveseven.github.io/posts/552aed2/"/>
    <id>https://aliveseven.github.io/posts/552aed2/</id>
    <published>2022-10-31T13:47:01.607Z</published>
    <updated>2022-11-02T02:12:51.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前端面试2"><a href="#前端面试2" class="headerlink" title="前端面试2"></a>前端面试2</h1><h2 id="说说http状态码，说明状态码表示的信息"><a href="#说说http状态码，说明状态码表示的信息" class="headerlink" title="说说http状态码，说明状态码表示的信息"></a>说说http状态码，说明状态码表示的信息</h2><h3 id="2开头-成功类"><a href="#2开头-成功类" class="headerlink" title="2开头-成功类"></a><strong>2开头-成功类</strong></h3><ul><li>200 请求已成功，返回想要的东西</li><li>201 请求成功，服务器正在创建请求的资源</li><li>202 服务器收到请求了，但是未处理</li><li>203 服务器成功处理，但是返回的信息是另一个来源</li><li>204、205 服务器成功处理，但是没有返回内容</li><li>206 成功处理了部分get请求 </li></ul><h3 id="3开头-重定向类（要完成请求，需要进一步操作）"><a href="#3开头-重定向类（要完成请求，需要进一步操作）" class="headerlink" title="3开头- 重定向类（要完成请求，需要进一步操作）"></a><strong>3开头- 重定向类（要完成请求，需要进一步操作）</strong></h3><ul><li>300 针对请求，服务器可执行多种操作</li><li>301 请求的网页已永久移动到新位置。</li><li>302 访问网页时，被<strong>暂时性</strong>重定向到另一个url上。</li></ul><h3 id="4开头-请求错误"><a href="#4开头-请求错误" class="headerlink" title="4开头-请求错误"></a><strong>4开头-请求错误</strong></h3><ul><li>400 请求参数有误，请求无法被服务器理解</li><li>401 请求需要请求者验证(无权限–token)</li><li>403 服务器拒绝该请求 (权限不够遭拒绝)</li><li>404 找不到请求网页</li></ul><h3 id="5开头：服务器错误"><a href="#5开头：服务器错误" class="headerlink" title="5开头：服务器错误"></a><strong>5开头：服务器错误</strong></h3><ul><li>500 （服务器内部错误）服务器遇到错误，无法完成请求</li><li>502 （<strong>错误网关</strong>）服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503 （<strong>服务不可用</strong>）服务器目前无法使用（由于超载或停机维护）</li><li>504 （<strong>网关超时</strong>）服务器作为网关或代理</li></ul><h2 id="vue2实现双向绑定的原理"><a href="#vue2实现双向绑定的原理" class="headerlink" title="vue2实现双向绑定的原理"></a>vue2实现双向绑定的原理</h2><p>通过数据劫持结合发布订阅模式的方式来实现，通过<code>Object.defineProperty()</code>来劫持各个属性的<code>setter</code>，<code>getter</code>，在数据变动时发布消息给订阅者，触发相应的监听回调来渲染视图。</p><p>Js简单实现一下双向绑定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个函数，用来把传入的数据变成响应式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defReactive</span>(<span class="params">data , keys , value</span>)&#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data , keys ,&#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了get方法&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(newValue === value) <span class="keyword">return</span> ;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;调用了set方法，执行更新操作&#x27;</span>)</span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">forEach</span>(<span class="function"><span class="params">element</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 把data中的每一项变成响应式数据</span></span><br><span class="line">    <span class="keyword">let</span> value = data[element]</span><br><span class="line">    <span class="title function_">defReactive</span>(data , element, value  )</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">msg</span>);</span><br><span class="line">data.<span class="property">message</span> = <span class="string">&#x27;nihao&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;更新后的数据&#x27;</span>,data)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7ou1n5i9ij30nv0cv788.jpg"></p><h2 id="vue2可以对数组动态监听变化吗"><a href="#vue2可以对数组动态监听变化吗" class="headerlink" title="vue2可以对数组动态监听变化吗"></a>vue2可以对数组动态监听变化吗</h2><ol><li><p>调用数组的pop、push、shift、unshift、splice、sort、reverse等方法时是可以监听到数组的变化的</p></li><li><p>不能监听的情况</p><p>（1） 直接通过下标赋值 arr[i] = value</p><p>（2） 直接修改数组长度 arr.length = newLen</p></li></ol><h3 id="有什么方法可以实现监听数组变化"><a href="#有什么方法可以实现监听数组变化" class="headerlink" title="有什么方法可以实现监听数组变化"></a>有什么方法可以实现监听数组变化</h3><ul><li>给data赋予新数组，就是将数组地址改变，或者$set</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">set</span>(arr, index, newvalue)</span><br><span class="line">vm.$set(arr, index, newvalue)</span><br><span class="line">arr.<span class="title function_">splice</span>(index, <span class="number">1</span>, newvalue)</span><br></pre></td></tr></table></figure><h2 id="vue父子组件挂载和卸载的生命周期如何执行"><a href="#vue父子组件挂载和卸载的生命周期如何执行" class="headerlink" title="vue父子组件挂载和卸载的生命周期如何执行"></a>vue父子组件挂载和卸载的生命周期如何执行</h2><p>在正常开发，挂载周期的执行顺序为：</p><p>父beforeCreate =&gt; 父created =&gt; 父beforeMount =&gt; 子beforeCreate =&gt; 子created =&gt; 子beforeMount =&gt; 子mounted =&gt; 父mounted</p><p>在数据更新阶段执行顺序为：</p><p>父beforeUpdate =&gt; 子beforeUpdate =&gt; 子updated =&gt; 父updated</p><p>在组件销毁阶段执行顺序为：</p><p>父beforeDestroy -&gt; 子beforeDestroy -&gt; 子destroyed -&gt; 父destroyed</p><p>由此可见，其实所有周期规律就是：<strong>只要子组件被引入触发，所处不管任何周期都是父组件先开始执行，然后等到子组件执行完，父组件收尾。</strong></p><h2 id="vue中v-for如何实现对数组，对象，数字的遍历"><a href="#vue中v-for如何实现对数组，对象，数字的遍历" class="headerlink" title="vue中v-for如何实现对数组，对象，数字的遍历"></a>vue中v-for如何实现对数组，对象，数字的遍历</h2><p>数组：v-for = “(item,index) in/of arr”<br>对象：v-for = “(value,key,index) in obj”<br>数字：v-for = “(item,index) in 数字”，index从1开始</p><h2 id="JS数组常用遍历方法用法及其各项区别"><a href="#JS数组常用遍历方法用法及其各项区别" class="headerlink" title="JS数组常用遍历方法用法及其各项区别"></a>JS数组常用遍历方法用法及其各项区别</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ol><li>for循环不到数组的私有属性</li><li>可以使用return|break|continue终止|结束循环</li><li>for属于编程式写法</li></ol><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>forEach循环不到数组的私有属性</li><li>return|break|continue不起作用</li><li>forEach属于声明式写法，不关心具体实现</li></ol><h3 id="for-in"><a href="#for-in" class="headerlink" title="for in"></a>for in</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>可以遍历到数组私有属性的值</li><li>key的类型是string型</li><li>可以使用return|break|continue终止|结束循环</li><li>循环顺序不一定按照数组索引值来循环</li></ol><h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><ol><li>不可以遍历数组的私有属性的值</li><li>val的值就是arr项的值</li><li>可以使用return|break|continue终止|结束循环</li></ol><h3 id="filter-map"><a href="#filter-map" class="headerlink" title="filter,map"></a><strong>filter,map</strong></h3><p><img src="https://pic3.zhimg.com/v2-76362e926268904c55408275bad13dd2_r.jpg"></p><p><strong>filter</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">4</span>].<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>; <span class="comment">// 返回数组中大于3的数</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// (3) [9, 7, 4]</span></span><br></pre></td></tr></table></figure><p><strong>map</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> li = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span></span><br><span class="line">   &#125;)</span><br><span class="line">   &lt;!--</span><br><span class="line">       <span class="number">1</span>、li的值为:[<span class="string">&#x27;&lt;li&gt;1&lt;/li&gt;&#x27;</span>,<span class="string">&#x27;&lt;li&gt;2&lt;/li&gt;&#x27;</span>,<span class="string">&#x27;&lt;li&gt;3&lt;/li&gt;&#x27;</span>]</span><br><span class="line">   --&gt;</span><br><span class="line">   <span class="keyword">var</span> liList = li.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);<span class="comment">//返回结果为：&#x27;&lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="transform、translate、transition、animation区别"><a href="#transform、translate、transition、animation区别" class="headerlink" title="transform、translate、transition、animation区别"></a>transform、translate、transition、animation区别</h2><ol><li>transform：描述了元素的静态样式，本身不会呈现动画效果，主要应用于元素的 2D 或者 3D转换，可以将元素 旋转、缩放、移动、倾斜等</li><li>translate：是2D转换的一种方法，<strong>是transform的一个属性值</strong>，主要控制目标元素的移动（2D、3D）</li><li>transition：CSS过渡属性，为一个元素在不同状态切换的时候定义不同的过渡效果。</li><li>animation：强调流程与控制，对元素的一个或多个属性的变化进行控制，可以有多个关键帧（animation 和@ keyframes结合使用）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前端面试2&quot;&gt;&lt;a href=&quot;#前端面试2&quot; class=&quot;headerlink&quot; title=&quot;前端面试2&quot;&gt;&lt;/a&gt;前端面试2&lt;/h1&gt;&lt;h2 id=&quot;说说http状态码，说明状态码表示的信息&quot;&gt;&lt;a href=&quot;#说说http状态码，说明状态码表示的信息&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
    <category term="CSS" scheme="https://aliveseven.github.io/tags/CSS/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SQL关联表查询，多表查询</title>
    <link href="https://aliveseven.github.io/posts/7128cd70/"/>
    <id>https://aliveseven.github.io/posts/7128cd70/</id>
    <published>2022-10-29T13:41:02.175Z</published>
    <updated>2022-10-29T13:58:50.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL关联表查询，多表查询"><a href="#SQL关联表查询，多表查询" class="headerlink" title="SQL关联表查询，多表查询"></a>SQL关联表查询，多表查询</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在进行设计和开发的时候，很多时候需要用到表查询，多个表关联查询能够很大简化我们获取数据的业务，这里主要讲一下SQL的左连接、右连接、内连接（left join , right join , inner join）    </p><p>案例表：</p><ol><li>sys_role_menu</li></ol><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mgzvrqiyj30hy0avtci.jpg"></p><ol start="2"><li>sys_role</li></ol><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mh09l6r3j30ik07ndk1.jpg"></p><h2 id="LEFT-JOIN"><a href="#LEFT-JOIN" class="headerlink" title="LEFT JOIN"></a>LEFT JOIN</h2><ol><li>左连接，不考虑where条件下，left join 会把左表所有数据查询出来，on及其后面的条件仅仅会影响右表的数据(符合就显示,不符合全部为null)</li><li>左连接关注的是左边的主表数据，不应该把on后面的从表中的条件加到where后，这样会影响原有主表中的数据</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><strong>select * from A left join B on A.aid = B.bid</strong></p><p>意思是：</p><p><strong>首先取出A表中所有数据，然后再加上与A，B匹配的的数据</strong></p><p><strong>表A：</strong></p><table><thead><tr><th>aid</th><th>ax</th></tr></thead><tbody><tr><td>1</td><td>A1</td></tr><tr><td>2</td><td>A2</td></tr><tr><td>3</td><td>A3</td></tr></tbody></table><p><strong>表B：</strong></p><table><thead><tr><th>bid</th><th>bx</th></tr></thead><tbody><tr><td>1</td><td>B1</td></tr><tr><td>2</td><td>B2</td></tr><tr><td>4</td><td>B4</td></tr></tbody></table><p><strong>那么LEFT JOIN指：</strong></p><table><thead><tr><th>aid</th><th>ax</th><th>bid</th><th>bx</th></tr></thead><tbody><tr><td>1</td><td>A1</td><td>1</td><td>B1</td></tr><tr><td>2</td><td>A2</td><td>2</td><td>B2</td></tr><tr><td>3</td><td>A3</td><td></td><td></td></tr></tbody></table><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mhnqmsehj30f80dz76x.jpg"></p><h3 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mgrl7464j30wd0kx7e8.jpg"></p><h2 id="RIGHT-JOIN"><a href="#RIGHT-JOIN" class="headerlink" title="RIGHT JOIN"></a>RIGHT JOIN</h2><p>和左连接差不多，右连接就是关注右边表的数据，先把右边表的数据查询出来，on及其后面的条件仅仅会影响左表的数据(符合就显示,不符合全部为null)</p><p><strong>select * from A right join B on A.aid = B.bid</strong></p><p>这里右边表是B，先把B表中的全部数据取出来，然后再加上与A，B匹配的数据。如果没有匹配的就是空</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mhzqgb3nj30hn0epacq.jpg"></p><h3 id="案例2-1"><a href="#案例2-1" class="headerlink" title="案例2"></a>案例2</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mi1w40jxj30oj0lcwmj.jpg"></p><h2 id="INNER-JOIN"><a href="#INNER-JOIN" class="headerlink" title="INNER JOIN"></a>INNER JOIN</h2><p>和左右连接不一样，INNER JOIN是取公共部分的，不匹配的部分就直接去掉，而不是空NULL了。</p><p>公共的部分就是ON后面的那个连接语句，比如案例中的aid和bid相同的那个部分就是公共的部分</p><p><strong>select * from A inner join B on A.aid = B.bid</strong></p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mi437tnij30bi0e1jtc.jpg" alt="image.png"></p><h3 id="案例2-2"><a href="#案例2-2" class="headerlink" title="案例2"></a>案例2</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7mi4naynmj30ko0i9ahd.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL关联表查询，多表查询&quot;&gt;&lt;a href=&quot;#SQL关联表查询，多表查询&quot; class=&quot;headerlink&quot; title=&quot;SQL关联表查询，多表查询&quot;&gt;&lt;/a&gt;SQL关联表查询，多表查询&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; cla</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="https://aliveseven.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Element-UI中获取表格当前行的操作</title>
    <link href="https://aliveseven.github.io/posts/872aa20/"/>
    <id>https://aliveseven.github.io/posts/872aa20/</id>
    <published>2022-10-26T15:07:40.045Z</published>
    <updated>2022-10-27T12:43:46.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Element-UI中获取表格当前行的操作"><a href="#Element-UI中获取表格当前行的操作" class="headerlink" title="Element-UI中获取表格当前行的操作"></a>Element-UI中获取表格当前行的操作</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>很多时候我们需要用Element-UI中的表格表单来展示我们的数据，而很多时候我们需要对这些数据做增删改查啥的，所以需要获取每一行的数据，当前行的数据，然后才能对当前行的数据进行操作。</p><p>比如，我现在有下面这样的一个需求，那么如何实现呢，第一步当然要获取当前行的数据嘛。这里我总结了两种方法来获取这些数据。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7j2t51xx6j31h10ertfo.jpg"></p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>Vue中有一个叫插槽的东西，可以在button按钮外层 使用<code>template</code> 标签包裹 然后使用<code>slot-scope=&quot;scope&quot;</code>，或者<code>#default=scope</code>进行设置 在需要获取数据的地方使用<code>scope.row</code>得到需要操作行的所有字段信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;el-table :data=&quot;tableData&quot; :border=&quot;true&quot; &gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;id&quot; label=&quot;角色ID&quot;/&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;name&quot; label=&quot;角色名称&quot;  /&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;description&quot; label=&quot;角色描述&quot;  /&gt;</span><br><span class="line">    &lt;el-table-column prop=&quot;flag&quot; label=&quot;唯一标识&quot;  /&gt;</span><br><span class="line">    &lt;el-table-column label=&quot;操作&quot; width=&quot;250&quot;&gt;</span><br><span class="line">        &lt;template #default=&quot;scope&quot;&gt;</span><br><span class="line">        &lt;!-- 通过插槽scope获取当前行的数据，scope.row.id表示获取当前行的角色id --&gt;</span><br><span class="line">            &lt;el-button size=&quot;small&quot; @click=&quot;getRoleMenuInfo(scope.row.id)&quot; type=&quot;info&quot; :icon=&quot;Menu&quot; plain&gt;菜单管理&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button size=&quot;small&quot; @click=&quot;&quot; type=&quot;warning&quot; plain&gt;编辑&lt;/el-button&gt;</span><br><span class="line">            &lt;el-button size=&quot;small&quot; type=&quot;danger&quot; @click=&quot;&quot;&gt;删除&lt;/el-button&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/el-table-column&gt;</span><br><span class="line">&lt;/el-table&gt;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7j30g6ylaj30u00fkq8b.jpg"></p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>Element Table控件里面提供了一个@current-change方法，这个方法的意思是，你鼠标经过的行数变了，就会触发这个函数，也就是当前行改变了就会自动调用这个函数。</p><p>这个函数有两个参数，第一个是currentRow是指当前行，oldCurrentRow指变化前的那行</p><blockquote><p>注意：这个函数对上面的那种情况不太适用。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7j320ac2qj312h0ca78z.jpg"></p><p>可以先声明一个响应式对象用来保存当前行的数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前行数据对象</span></span><br><span class="line"><span class="keyword">const</span> currentRow = <span class="title function_">ref</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>然后定义一个函数，当前行发生变化的时候自动触发</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">TableCurrentChange</span>(<span class="params">val : any</span>)&#123;</span><br><span class="line">  currentRow.<span class="property">value</span> = val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- @current-change=&quot;&quot;后面紧跟着当前行改变后要触发的函数 --&gt;</span><br><span class="line"> &lt;el-table :data=&quot;tableData&quot; @current-change=&quot;TableCurrentChange&quot; ref=&quot;singleTableRef&quot; style=&quot;width: 98%;margin-left: 10px;height: 67vh;&quot;&gt;</span><br><span class="line">   &lt;el-table-column prop=&quot;id&quot; label=&quot;ID&quot; width=&quot;100&quot; /&gt;</span><br><span class="line">   &lt;el-table-column prop=&quot;username&quot; label=&quot;用户名&quot; width=&quot;120&quot; /&gt;</span><br><span class="line">   &lt;el-table-column prop=&quot;nickname&quot; label=&quot;昵称&quot; width=&quot;120&quot; /&gt;</span><br><span class="line"> &lt;/el-table&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Element-UI中获取表格当前行的操作&quot;&gt;&lt;a href=&quot;#Element-UI中获取表格当前行的操作&quot; class=&quot;headerlink&quot; title=&quot;Element-UI中获取表格当前行的操作&quot;&gt;&lt;/a&gt;Element-UI中获取表格当前行的操作&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>el-tree控件获取当前选中节点的方法</title>
    <link href="https://aliveseven.github.io/posts/eb414ced/"/>
    <id>https://aliveseven.github.io/posts/eb414ced/</id>
    <published>2022-10-25T17:39:51.082Z</published>
    <updated>2022-10-25T17:44:50.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="el-tree控件获取当前选中节点的方法"><a href="#el-tree控件获取当前选中节点的方法" class="headerlink" title="el-tree控件获取当前选中节点的方法"></a>el-tree控件获取当前选中节点的方法</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在开发菜单权限分配的时候，用到了Element-Plus里面的Tree树形控件来显示菜单，但是在提交确认的时候需要知道当前已选的菜单节点，所以引出了题中的问题</p><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>其实也很简单，Element里面有个check方法，这个方法有两个参数可以传入，而第二个参数就是我们要的，第二参数即树目前的选中状态对象，包含 checkedNodes、checkedKeys、halfCheckedNodes、halfCheckedKeys 四个属性</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h7i1vtatx8j318b0g97c1.jpg"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入的菜单</span></span><br><span class="line"><span class="keyword">const</span> menuArray : <span class="built_in">any</span> = <span class="title function_">ref</span>([])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入半选中的菜单</span></span><br><span class="line"><span class="keyword">const</span> menuHalfArray : <span class="built_in">any</span> = <span class="title function_">ref</span>([])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击菜单管理多选框</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleNodeClick</span> = (<span class="params">nodeObj : <span class="built_in">any</span> , SelectedObj : <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">SelectedObj</span>.<span class="property">checkedNodes</span>)&#123;</span><br><span class="line">    menuArray.<span class="property">value</span> = <span class="title class_">SelectedObj</span>.<span class="property">checkedNodes</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 半选中菜单赋值</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="title class_">SelectedObj</span>.<span class="property">halfCheckedNodes</span>)&#123;</span><br><span class="line">    menuHalfArray.<span class="property">value</span> = <span class="title class_">SelectedObj</span>.<span class="property">halfCheckedNodes</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>checkedNodes既是当前选中的节点，而半选中的节点也可以通过halfCheckedNodes来获取。就是这么简单</p><p>另外，可以给el-tree控件加入node-key 属性，以保证每个树节点都有作为唯一标识的属性。使用上面的checkedKeys和halfCheckedKeys 方法是需要设置这个属性的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">TreeChecked</span> (nodeObj, <span class="title class_">SelectedObj</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SelectedObj</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SelectedObj</span>.<span class="property">checkedKeys</span>)   <span class="comment">// 这是选中的节点的key数组</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">SelectedObj</span>.<span class="property">checkedNodes</span>)  <span class="comment">// 这是选中的节点数组  </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;el-tree控件获取当前选中节点的方法&quot;&gt;&lt;a href=&quot;#el-tree控件获取当前选中节点的方法&quot; class=&quot;headerlink&quot; title=&quot;el-tree控件获取当前选中节点的方法&quot;&gt;&lt;/a&gt;el-tree控件获取当前选中节点的方法&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Java中list的stream流详解</title>
    <link href="https://aliveseven.github.io/posts/55abbcd5/"/>
    <id>https://aliveseven.github.io/posts/55abbcd5/</id>
    <published>2022-10-23T13:37:55.255Z</published>
    <updated>2022-10-25T17:47:46.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中list的stream流详解"><a href="#Java中list的stream流详解" class="headerlink" title="Java中list的stream流详解"></a>Java中list的stream流详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Java8中提供了Stream对集合操作作出了极大的简化，学习了Stream之后，我们以后不用使用for循环就能对集合作出很好的操作</li><li>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询，也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul><li>Java中的Stream的所有操作都是针对流的，所以，使用Stream必须要得到Stream对象</li><li>比如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream = list.stream(); <span class="comment">//获取一个顺序流</span></span><br><span class="line">Stream&lt;String&gt; parallelStream = list.parallelStream(); <span class="comment">//获取一个并行流</span></span><br></pre></td></tr></table></figure><h3 id="获取流的方法"><a href="#获取流的方法" class="headerlink" title="获取流的方法"></a>获取流的方法</h3><ol><li>根据List集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建List集合</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">list.add(<span class="string">&quot;一号&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;二号&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;三号&quot;</span>);</span><br><span class="line">Stream&lt;String&gt; stream1 = list.stream();</span><br></pre></td></tr></table></figure><ol start="2"><li>根据Set集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream2 = set.stream();</span><br></pre></td></tr></table></figure><ol start="3"><li>根据Map集合获取流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建Map集合</span></span><br><span class="line">Map&lt;Integer,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">&quot;一号&quot;</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">&quot;二号&quot;</span>);</span><br><span class="line">map.put(<span class="number">3</span>,<span class="string">&quot;三号&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 根据Map集合的键获取流</span></span><br><span class="line">Set&lt;Integer&gt; map1 = map.keySet();</span><br><span class="line">Stream&lt;Integer&gt; stream3 = map1.stream();</span><br><span class="line"><span class="comment">// 根据Map集合的值获取流</span></span><br><span class="line">Collection&lt;String&gt; map2 = map.values();</span><br><span class="line">Stream&lt;String&gt; stream4 = map2.stream();</span><br><span class="line"><span class="comment">// 根据Map集合的键值对对象获取瑞</span></span><br><span class="line">Set&lt;Map.Entry&lt;Integer, String&gt;&gt; map3 = map.entrySet();</span><br><span class="line">Stream&lt;Map.Entry&lt;Integer, String&gt;&gt; stream5 = map3.stream();</span><br></pre></td></tr></table></figure><ol start="4"><li>根据数组获取流</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 根据数组获取流</span><br><span class="line">String[] arr = &#123;&quot;一号&quot;,&quot;二号&quot;,&quot;三号&quot;&#125;;</span><br><span class="line">Stream&lt;String&gt; stream6 = Stream.of(arr);</span><br></pre></td></tr></table></figure><h3 id="Stream流的常用方法"><a href="#Stream流的常用方法" class="headerlink" title="Stream流的常用方法"></a>Stream流的常用方法</h3><h4 id="collect-Collectors-toList"><a href="#collect-Collectors-toList" class="headerlink" title=".collect(Collectors.toList())"></a>.collect(Collectors.toList())</h4><ul><li>使用map操作可以遍历集合中的每个对象，并对其进行操作，map之后，用.collect(Collectors.toList())会得到操作后的集合</li><li>使用filter()函数之后也可以通过该方法得到集合。</li><li>Collectors.toList() 用来结束Stream流</li></ul><h4 id="stream-filter"><a href="#stream-filter" class="headerlink" title="stream().filter()"></a>stream().filter()</h4><p>stream().filter()一般适用于list集合，主要作用就是条件查询，从集合中查询想要的数据。<strong>filter里面的参数user是指集合里面的每一项</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建3个对象</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u1.setAge(<span class="number">23</span>);</span><br><span class="line">        u1.setName(<span class="string">&quot;xiaoming&quot;</span>);</span><br><span class="line">        u1.setId(<span class="number">123456</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u2.setAge(<span class="number">26</span>);</span><br><span class="line">        u2.setName(<span class="string">&quot;xiaofang&quot;</span>);</span><br><span class="line">        u2.setId(<span class="number">77777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        u3.setAge(<span class="number">18</span>);</span><br><span class="line">        u3.setName(<span class="string">&quot;honghong&quot;</span>);</span><br><span class="line">        u3.setId(<span class="number">11111</span>);</span><br><span class="line">        <span class="comment">//添加对象到集合</span></span><br><span class="line">        list.add(u1);</span><br><span class="line">        list.add(u2);</span><br><span class="line">        list.add(u3);</span><br><span class="line">        <span class="comment">//条件筛选</span></span><br><span class="line">        compare(list);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">compare</span><span class="params">(List&lt;User&gt; list)</span> &#123;</span><br><span class="line">        <span class="comment">//在集合中查询用户名为xiaofang的集合</span></span><br><span class="line">        List&lt;User&gt; userList = list.stream().filter(user -&gt; <span class="string">&quot;xiaofang&quot;</span>           .equals(user.getName())).collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(userList);</span><br><span class="line">        </span><br><span class="line">        List&lt;User&gt; userList1 = list.stream().filter(user -&gt; user.getAge() &gt; <span class="number">19</span> &amp;&amp; user.getAge() &lt; <span class="number">24</span>).collect(Collectors.toList());</span><br><span class="line">        System.out.println(userList1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter：筛选（里面输入的筛选的条件（ <strong>user -&gt; “xiaofang”.equals(user.getName())</strong> ）），这里的条件是查询uesr对象中name属性。</p><h4 id="stream-map"><a href="#stream-map" class="headerlink" title="stream().map()"></a>stream().map()</h4><ol><li>stream().map()提取List对象的某一列值。然后可以通过<strong>forEach</strong>方法对该对象进行循环输出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static void printList(List&lt;User&gt; list) &#123;</span><br><span class="line">    List&lt;String&gt; userList = list.stream().map(User::getName).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">    userList.forEach(u -&gt; System.out.println(u));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="stream-sorted"><a href="#stream-sorted" class="headerlink" title="stream().sorted()"></a>stream().sorted()</h4><ul><li>对list集合进行排序</li></ul><ol><li>对id进行升序排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSortList</span><span class="params">(List&lt;User&gt; list)</span> &#123;</span><br><span class="line"><span class="comment">// 升序排序</span></span><br><span class="line">    List&lt;User&gt; userList = list.stream().sorted(Comparator.comparing(User::getId)).collect(Collectors.toList());</span><br><span class="line">    userList.forEach(u -&gt; System.out.println(u));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对id进行降序排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printSortList</span><span class="params">(List&lt;User&gt; list)</span> &#123;</span><br><span class="line">    <span class="comment">// 降序排序</span></span><br><span class="line">    List&lt;User&gt; userList = list.stream().sorted(Comparator.comparing(User::getId).reversed()).collect(Collectors.toList());</span><br><span class="line">    userList.forEach( u - &gt;System.out.println(u));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="流的中间操作"><a href="#流的中间操作" class="headerlink" title="流的中间操作"></a><strong>流的中间操作</strong></h3><ul><li>筛选与切片<pre><code>filter：过滤流中的某些元素limit(n)：获取n个元素skip(n)：跳过n元素，配合limit(n)可实现分页distinct：通过流中元素的 hashCode() 和 equals() 去除重复元素</code></pre></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; stream = Stream.of(<span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">14</span>);</span><br><span class="line"> </span><br><span class="line">Stream&lt;Integer&gt; newStream = stream.filter(s -&gt; s &gt; <span class="number">5</span>) <span class="comment">//6 6 7 9 8 10 12 14 14</span></span><br><span class="line">        .distinct() <span class="comment">//6 7 9 8 10 12 14</span></span><br><span class="line">        .skip(<span class="number">2</span>) <span class="comment">//9 8 10 12 14</span></span><br><span class="line">        .limit(<span class="number">2</span>); <span class="comment">//9 8</span></span><br><span class="line">newStream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="Stream对象转换为集合"><a href="#Stream对象转换为集合" class="headerlink" title="Stream对象转换为集合"></a>Stream对象转换为集合</h3><ul><li><p><strong>collect(Collectors.toList())</strong> </p></li><li><p><strong>collect(Collectors.toSet())</strong></p></li><li><p><strong>collect(Collectors.toMap())</strong></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java中list的stream流详解&quot;&gt;&lt;a href=&quot;#Java中list的stream流详解&quot; class=&quot;headerlink&quot; title=&quot;Java中list的stream流详解&quot;&gt;&lt;/a&gt;Java中list的stream流详解&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="后端" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="Java" scheme="https://aliveseven.github.io/categories/%E5%90%8E%E7%AB%AF/Java/"/>
    
    
    <category term="Java" scheme="https://aliveseven.github.io/tags/Java/"/>
    
    <category term="后端" scheme="https://aliveseven.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript实现保留两位小数</title>
    <link href="https://aliveseven.github.io/posts/a625f058/"/>
    <id>https://aliveseven.github.io/posts/a625f058/</id>
    <published>2022-10-21T15:37:17.632Z</published>
    <updated>2022-10-27T12:49:00.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript实现保留两位小数"><a href="#JavaScript实现保留两位小数" class="headerlink" title="JavaScript实现保留两位小数"></a>JavaScript实现保留两位小数</h1><h2 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h2><ul><li>注意：保留两位小数，将数值类型的数据改变成了字符串类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">2.447562341</span>;</span><br><span class="line">num = num.<span class="title function_">toFixed</span>(<span class="number">2</span>); <span class="comment">// 输出结果为 2.45</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> num) <span class="comment">// string</span></span><br></pre></td></tr></table></figure><h2 id="不四舍五入"><a href="#不四舍五入" class="headerlink" title="不四舍五入"></a>不四舍五入</h2><ul><li>第一种，先把小数变整数，再除，向下取整</li><li>注意，不改变数据类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">17.79845550</span> * <span class="number">100</span>) / <span class="number">100</span> <span class="comment">// 输出结果为 17.79</span></span><br></pre></td></tr></table></figure><ul><li>第二种，当作字符串，使用正则匹配：</li><li>注意，先将数据转换为字符串，最后再转为数值类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="number">17.79845550</span>.<span class="title function_">toString</span>().<span class="title function_">match</span>(<span class="regexp">/^\d+(?:\.\d&#123;0,2&#125;)?/</span>)) <span class="comment">// 输出结果为 17.79,不能用于整数如 10 必须写为10.0000</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果是负数，要先转换为正数再计算，最后再转回负数</p></blockquote><h2 id="Js取float型小数点后两位数的方法"><a href="#Js取float型小数点后两位数的方法" class="headerlink" title="Js取float型小数点后两位数的方法"></a>Js取float型小数点后两位数的方法</h2><ol><li>将浮点数四舍五入，取小数点后2位</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toDecimal</span>(<span class="params">x</span>) &#123; </span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">parseFloat</span>(x); </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(num)) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;传参类型错误，请检查！&#x27;</span>) </span><br><span class="line">        <span class="keyword">return</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    num = <span class="title class_">Math</span>.<span class="title function_">round</span>(x*<span class="number">100</span>)/<span class="number">100</span>; </span><br><span class="line">    <span class="keyword">return</span> num; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">toDecimal</span>(<span class="number">2.447562341</span>))  <span class="comment">// 输出 2.45</span></span><br></pre></td></tr></table></figure><h2 id="Js中部分对小数的操作"><a href="#Js中部分对小数的操作" class="headerlink" title="Js中部分对小数的操作"></a>Js中部分对小数的操作</h2><ol><li>丢弃小数部分,保留整数部分</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">7</span>/<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ol start="2"><li>向上取整,有小数就整数部分加1</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">7</span>/<span class="number">2</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ol start="3"><li>四舍五入</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">5.88</span>/<span class="number">2</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ol start="4"><li>向下取整</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">5.88</span>/<span class="number">2</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript实现保留两位小数&quot;&gt;&lt;a href=&quot;#JavaScript实现保留两位小数&quot; class=&quot;headerlink&quot; title=&quot;JavaScript实现保留两位小数&quot;&gt;&lt;/a&gt;JavaScript实现保留两位小数&lt;/h1&gt;&lt;h2 id=&quot;四</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue开发中组件或路由渲染问题</title>
    <link href="https://aliveseven.github.io/posts/9d49a934/"/>
    <id>https://aliveseven.github.io/posts/9d49a934/</id>
    <published>2022-10-19T02:45:22.986Z</published>
    <updated>2022-10-19T02:50:19.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue开发中组件或路由渲染问题"><a href="#Vue开发中组件或路由渲染问题" class="headerlink" title="Vue开发中组件或路由渲染问题"></a>Vue开发中组件或路由渲染问题</h1><h2 id="Vue3中切换路由页面不展示内容，刷新后页面正常显示"><a href="#Vue3中切换路由页面不展示内容，刷新后页面正常显示" class="headerlink" title="Vue3中切换路由页面不展示内容，刷新后页面正常显示"></a>Vue3中切换路由页面不展示内容，刷新后页面正常显示</h2><p>解决办法：给路由添加key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;RouterView v-slot=&quot;&#123; Component &#125;&quot;&gt;</span><br><span class="line">      &lt;transition name=&quot;el-fade-in&quot; &gt;</span><br><span class="line">        &lt;keep-alive&gt;</span><br><span class="line">          &lt;component :is=&quot;Component&quot; :key=&quot;key&quot; /&gt;</span><br><span class="line">        &lt;/keep-alive&gt;</span><br><span class="line">      &lt;/transition&gt;</span><br><span class="line">    &lt;/RouterView&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; useRoute, RouterView &#125; from &#x27;vue-router&#x27;</span><br><span class="line"></span><br><span class="line">import &#123; computed &#125; from &quot;vue&quot;;</span><br><span class="line"> </span><br><span class="line">// 路由中添加key解决切换路由时页面不展示内容，刷新后才展示内容问题</span><br><span class="line">const route = useRoute();</span><br><span class="line">const key = computed(() =&gt; &#123;</span><br><span class="line">  return route.path + Math.random();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue中重新渲染组件"><a href="#Vue中重新渲染组件" class="headerlink" title="Vue中重新渲染组件"></a>Vue中重新渲染组件</h2><p>有时Vue的反应性系统还不够，需要重新渲染组件页面。</p><p>重新渲染组件有以下几个办法：</p><ul><li>重新加载整个页面</li><li>使用<code>v-if</code></li><li>使用Vue的内置<code>forceUpdate</code>方法</li><li>在组件上进行<code>key</code>更改</li></ul><p>前面两种方法暂时不建议做，这里讨论一些后面两种方法</p><h3 id="使用forceUpdate"><a href="#使用forceUpdate" class="headerlink" title="使用forceUpdate"></a>使用forceUpdate</h3><p><strong>$forceUpdate具有强制刷新的作用</strong>，在vue框架中，如果data中有一个变量:age，修改他，页面会自动更新。但如果data中的变量为<a href="https://so.csdn.net/so/search?q=%E6%95%B0%E7%BB%84&spm=1001.2101.3001.7020">数组</a>或对象，我们直接去给某个对象或数组添加属性，页面是识别不到的。</p><p><img src="https://img-blog.csdnimg.cn/20200521144530901.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3k1MjExMjN5,size_16,color_FFFFFF,t_70#pic_center"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      userInfo:&#123;name:&#x27;小明&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    updateName()&#123;</span><br><span class="line">      this.userInfo.name=&#x27;小红&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      A:&#123;name:&#x27;Alive&#x27;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    updateA()&#123;</span><br><span class="line">      this.A.name=&#x27;Seven&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在<code>updateA</code>函数中，我们尝试给<code>A</code>对象修改值，发现页面其实并没有变化。看看解决方法</p><p><strong>方法一：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">updateA</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">A</span>.<span class="property">name</span>=<span class="string">&#x27;Seven&#x27;</span>;<span class="comment">//在此时，确实已经将A对象修改完成</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">A</span>.<span class="property">name</span>);<span class="comment">//输出结果: Seven</span></span><br><span class="line">    <span class="variable language_">this</span>.$forceUpdate();<span class="comment">//在这里，强制刷新之后，页面的结果变为&#x27;小红&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">  <span class="title function_">updateA</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.$set(<span class="string">&#x27;A&#x27;</span>,name,<span class="string">&#x27;Seven&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改组件的key达到组件重新渲染"><a href="#修改组件的key达到组件重新渲染" class="headerlink" title="修改组件的key达到组件重新渲染"></a>修改组件的key达到组件重新渲染</h3><p><strong>这种方法是最好的</strong>，<strong>：key=‘’（此处可触发watch和update）（最优方法）</strong></p><p>给要重新渲染的组件提供一个key属性，如果key保持不变，则不会更改组件，但是如果key发生更改，Vue 就会重新渲染属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :key=&quot;reload&quot;&gt;</span><br><span class="line">    &#123;&#123;this.message&#125;&#125;</span><br><span class="line">    &lt;v-btn @click=&#x27;Rerender&#x27;&gt;change&lt;/v-btn&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">reload</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;旧消息&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title class_">Rerender</span>() &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&#x27;新消息&#x27;</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reload</span> += <span class="number">1</span>;  <span class="comment">// 改变reload，达到重新渲染</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rerender()被调用时，reload改变。此时，Vue将销毁组件并创建一个新组件。我们得到的是一个子组件，它将重新初始化自身并“重置”其状态。</p><h3 id="刷新整个页面（最不推荐"><a href="#刷新整个页面（最不推荐" class="headerlink" title="刷新整个页面（最不推荐"></a>刷新整个页面（最不推荐</h3><p>1、reload   2、this.$router.go(0)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue开发中组件或路由渲染问题&quot;&gt;&lt;a href=&quot;#Vue开发中组件或路由渲染问题&quot; class=&quot;headerlink&quot; title=&quot;Vue开发中组件或路由渲染问题&quot;&gt;&lt;/a&gt;Vue开发中组件或路由渲染问题&lt;/h1&gt;&lt;h2 id=&quot;Vue3中切换路由页面不展</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Promise、Generator函数、async/await异步函数的应用</title>
    <link href="https://aliveseven.github.io/posts/6e1b41e8/"/>
    <id>https://aliveseven.github.io/posts/6e1b41e8/</id>
    <published>2022-10-16T06:38:29.095Z</published>
    <updated>2022-10-27T12:34:33.485Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise、Generator函数、async-await异步函数的应用"><a href="#Promise、Generator函数、async-await异步函数的应用" class="headerlink" title="Promise、Generator函数、async/await异步函数的应用"></a>Promise、Generator函数、async/await异步函数的应用</h1><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="Promise是什么？"><a href="#Promise是什么？" class="headerlink" title="Promise是什么？"></a>Promise是什么？</h3><ol><li>Promise是JS中进行异步操作的新的解决方案，在旧的回调函数的形式中，当后一个异步请求的参数依赖于前一个异步请求的结果时，就会出现层层嵌套的情况，使得代码维护性变得比较差。</li><li>Promise可以很好的解决这个回调问题，then的链式调用使得Promise的结构层次很清晰，async和await能使代码的运行变成同步。</li><li>Promise支持链式调用，解决了回调地狱问题。</li></ol><p><strong>什么是回调地狱?</strong><br>回调函数嵌套调用，外部回调函数异步执行的结果是嵌套的回调执行的条件</p><p><code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）</p><p>一个 <code>Promise</code> 必然处于以下几种状态之一：</p><p><img src="https://img-blog.csdnimg.cn/20210328214248764.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JpbmdiaW5nMTEyOA==,size_16,color_FFFFFF,t_70"></p><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve , reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A&#x27;</span>, A)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> B = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve , reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B&#x27;</span>,B)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> C = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span>(<span class="string">&#x27;报错&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;C&#x27;</span>,C)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h774dzl3t6j30fw07d77d.jpg"></p><ul><li>1、执行了<code>resolve</code>，Promise状态会变成<code>fulfilled</code>，即 <strong>已完成状态</strong></li><li>2、执行了<code>reject</code>，Promise状态会变成<code>rejected</code>，即 <strong>被拒绝状态</strong></li><li>3、Promise只以<code>第一次为准</code>，第一次成功就<code>永久</code>为<code>fulfilled</code>，第一次失败就永远状态为<code>rejected</code></li><li>4、Promise中有<code>throw</code>的话，就相当于执行了<code>reject</code></li></ul><h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><ol><li>Genertor 函数是es6 新增的一种异步编程的解决方案，语法和传统的函数完全不同；Genertor 函数的最大的特点就是可以交出函数的执行权，即暂停执行。</li><li>声明Genertor函数的时候，要在function关键字和函数名之间加一个星号：*，比如 function *fn()</li><li> Generator函数封装了多个内部状态，通过yield表达式定义内部状态，执行时返回一个迭代器对象。</li></ol><h3 id="Generator的使用"><a href="#Generator的使用" class="headerlink" title="Generator的使用"></a>Generator的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入星号，表示Genertor函数</span></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;Alive&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;Seven&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;goodbye&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> A = <span class="title function_">gen</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="title function_">next</span>())  <span class="comment">// &#123;value: &#x27;Alive&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="title function_">next</span>())  <span class="comment">// &#123;value: &#x27;Seven&#x27;, done: false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="title function_">next</span>())  <span class="comment">// &#123;value: &#x27;goodbye&#x27;, done: true&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A.<span class="title function_">next</span>())  <span class="comment">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h778g86jtsj30lb09rtbh.jpg"></p><p>调用 Generator 函数，返回一个遍历器对象，代表 Generator 函数的内部指针。以后，每次调用遍历器对象的next方法，就会返回一个有着value和done两个属性的对象。value属性表示当前的内部状态的值，是yield表达式后面那个表达式的值；done属性是一个布尔值，表示是否遍历结束。</p><h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Promise、Generator函数、async-await异步函数的应用&quot;&gt;&lt;a href=&quot;#Promise、Generator函数、async-await异步函数的应用&quot; class=&quot;headerlink&quot; title=&quot;Promise、Generato</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="面试" scheme="https://aliveseven.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Vue3中reactive对象重新赋值，页面不重新渲染问题</title>
    <link href="https://aliveseven.github.io/posts/79e18b59/"/>
    <id>https://aliveseven.github.io/posts/79e18b59/</id>
    <published>2022-10-12T16:25:14.544Z</published>
    <updated>2022-10-12T16:36:18.630Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3中reactive对象重新赋值，页面不重新渲染问题"><a href="#Vue3中reactive对象重新赋值，页面不重新渲染问题" class="headerlink" title="Vue3中reactive对象重新赋值，页面不重新渲染问题"></a>Vue3中reactive对象重新赋值，页面不重新渲染问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在学习过程中用到了Element-Plus + Vue3.2来开发一个管理系统，但是在用户表格的增删改查的开发中，表格中的单条数据的编辑问题困扰了我，一开始是用ref()取定义了一个currentRow对象（单条数据）</p><p>详细见：<a href="https://element-plus.gitee.io/zh-CN/component/table.html#%E5%8D%95%E9%80%89">https://element-plus.gitee.io/zh-CN/component/table.html#%E5%8D%95%E9%80%89</a></p><p>后面在编辑的时候发现不对劲，每次编辑完再重新请求数据的时候会报下面的错误。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h72yhuhfr9j31hc0sv1kx.jpg"></p><p>然后在网上找了好久也没找出解决方案来，打断点Debug弄了一个小时感觉应该是ref()它的这个问题。我指定ref()它定义了响应式的属性，</p><p>而ref()所定义的属性的更改是对变量进行了类似<strong>浅拷贝</strong>的操作，可能因为在重新请求数据库数据的时候，ref()所定义的currentRow失去了值变为null，具体是为什么我也不知道，虽然这个错误并没有影响页面的增删改查，还是没有问题，但是我觉得这样还是有点问题。</p><p>所以我改成用reactive()来定义这个currentRow，但是呢，用reactive()定义的数据再更改的时候，页面没有跟着一起渲染，这样就引出了问题了。</p><p>而reactive()则是类似<strong>深拷贝</strong>，如果重新赋值，就会丢失原来响应式对象的引用地址，<strong>变成一个新的引用地址</strong>，这个新的引用地址指向的对象是没有经过 reactive 方法处理的，<strong>所以是一个普通对象，而不是响应式对象</strong></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我的操作的是直接用Object.assign()来解决赋值不渲染的问题</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单条的表格数据，单选</span></span><br><span class="line"><span class="keyword">var</span> currentRow = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  id : <span class="number">100</span> ,</span><br><span class="line">  username : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  password : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  nickname : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  email : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  phone : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  address : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TableCurrentChange</span>(<span class="params">val : User</span>)&#123;</span><br><span class="line">  <span class="comment">// 这样给reactive赋值可以保证页面会重新渲染</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(currentRow,val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外呢，还有另外的方法</p><p>在定义reactive的时候，定义属性名，在后期赋值的时候，对属性名进行赋值</p><p>比如</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;<span class="title class_">HelloWorld</span>&#125;,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> A=<span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getA</span>= (<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">      A.<span class="property">name</span>=data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      getA,</span><br><span class="line">      A</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外就是我用的Object.assign()方法，</p><p>Object.assign()拷贝的是属性值，如果源对象的属性值是一个指向对象的指针，那也只拷贝那个指针。</p><p>所以如果对象的属性值为基础类型，对于通过Object.assign()拷贝的那个属性而言是<strong>深拷贝</strong>；如果对象的属性值为引用，对于通过通过Object.assign()拷贝的那个属性而言其实是<strong>浅拷贝</strong>的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3中reactive对象重新赋值，页面不重新渲染问题&quot;&gt;&lt;a href=&quot;#Vue3中reactive对象重新赋值，页面不重新渲染问题&quot; class=&quot;headerlink&quot; title=&quot;Vue3中reactive对象重新赋值，页面不重新渲染问题&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3中的ref和reactive的应用</title>
    <link href="https://aliveseven.github.io/posts/cffffdfa/"/>
    <id>https://aliveseven.github.io/posts/cffffdfa/</id>
    <published>2022-10-10T02:25:26.013Z</published>
    <updated>2022-10-12T16:28:50.708Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3中的ref和reactive的应用"><a href="#Vue3中的ref和reactive的应用" class="headerlink" title="Vue3中的ref和reactive的应用"></a>Vue3中的ref和reactive的应用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ref和reactive是干什么用？<strong>就是把数据变成「响应式」的</strong></p><blockquote><p>Vue3中实现数据响应式，用到的是组合式API中的<code>ref</code>和<code>reactive</code>函数，不同的是<code>ref</code>函数一般定义<strong>基本类型</strong>数据，而<code>reactive</code>函数用于定义一个<strong>对象类型</strong>的响应式数据。</p></blockquote><h2 id="Vue2和Vue3中的响应式"><a href="#Vue2和Vue3中的响应式" class="headerlink" title="Vue2和Vue3中的响应式"></a>Vue2和Vue3中的响应式</h2><p>vue2的响应式是通过<strong>Object.defineProperty（数据劫持）</strong>方法，针对对象和数组有两种处理：</p><ul><li>对象: 通过defineProperty对对象的已有属性值的读取和修改进行劫持(监视/拦截)</li><li>数组: 通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持</li></ul><h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><ol><li><p><strong>作用</strong>: 定义一个响应式的数据</p></li><li><p><strong>语法</strong>: <code>const xxx = ref(initValue)</code></p></li></ol><ul><li>创建一个包含响应式数据的<strong>引用对象（reference对象，简称ref对象）</strong> </li><li>JS中操作数据： <code>xxx.value</code>，因为<code>ref</code> 接收参数并将其包裹在一个带有 <code>value</code> property 的对象中返回</li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li><li>本质上，ref(0) 等于 reactive( { value:0 })</li></ul><h3 id="使用事项"><a href="#使用事项" class="headerlink" title="使用事项"></a>使用事项</h3><ol><li>使用ref包装之后，需要使用.value才行进行取值和赋值操作。这就导致一个结，就是在对象起属性名时，尽可能避开有value的属性名。因为会引起混淆。</li><li><strong>响应式对象里面如果有ref包装的值类型。则Vue会实现自动拆箱</strong>，即获取值的方式是object.property，而不是object.property.value，注意：只有响应式对象会是这样，响应式数组或者Map都不能这样。</li><li>接受的数据可以是：基本类型，也可以是对象类型，<strong>基础类型</strong>靠Object.defineProperty()的get与set完成响应式，<strong>对象类型</strong>则是靠reactive函数进行辅助</li></ol><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="title function_">ref</span>(<span class="string">&#x27;AliveSeven&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A的ref数据:&#x27;</span>, A)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70lm35d0oj30wi04r40t.jpg"></p><p>改变A，要用.value来改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A.<span class="property">value</span> = <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改变了A后：&#x27;</span>,A)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70lqoowz9j30u504zac6.jpg"></p><p>使用ref来声明对象类型时候：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> C = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  name : <span class="string">&#x27;Nanami&#x27;</span>,</span><br><span class="line">  age : <span class="number">77</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;C的ref数据:&#x27;</span>, C)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70lwhwaxij30w304yjtk.jpg"></p><h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><ul><li><strong>作用</strong>: 定义一个<strong>对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li><strong>语法</strong>：const 代理对象= reactive(源对象)</li></ul><h3 id="使用事项-1"><a href="#使用事项-1" class="headerlink" title="使用事项"></a>使用事项</h3><ol><li>接收一个对象（或数组），返回一个<strong>代理对象</strong>（Proxy的实例对象，简称proxy对象）</li><li>js中操作不需要.value(与ref区别)</li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li><li>可以使用<strong>toRef(obj)<strong>为对象中的每一个属性创建一个ref，它可以保持对原属性的响应式链接，类似于</strong>浅拷贝</strong>。<br>* </li></ol><h2 id="ref和reactive的区别"><a href="#ref和reactive的区别" class="headerlink" title="ref和reactive的区别"></a>ref和reactive的区别</h2><ol><li>ref定义对象，在js中使用时都应该.value，如果定义的对象嵌套太深，再多一层.value太冗余，而reactive则无需.value</li><li>ref定义对象类型数据，里边使用的也是reactive中的Proxy代理，不如直接使用reactive</li><li>reactive不能直接定义基本类型数据，不起作用，可以将基本类型数据整体放入一个对象中，将reactive当作Vue2中的data去使用</li><li>ref存在异步问题</li></ol><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> B = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alive2&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B的ref数据:&#x27;</span>, B)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70m2m9q93j30u0044wfq.jpg"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alive2&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">hobby</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;唱&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;跳&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;rap&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;篮球&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B的ref数据:&#x27;</span>, B)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive定义的响应式数据是“深层次的”。</span></span><br><span class="line"><span class="comment">// 下面的赋值不会影响上面的结果</span></span><br><span class="line"></span><br><span class="line">B.<span class="property">name</span> = <span class="string">&#x27;Alive3&#x27;</span></span><br><span class="line">B.<span class="property">age</span> = <span class="number">99</span></span><br><span class="line">B.<span class="property">hobby</span>[<span class="number">3</span>].<span class="property">type</span> = <span class="string">&quot;ctrl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改变了B后：&#x27;</span>,B)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70mlmoifsj30xu05ptbn.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3中的ref和reactive的应用&quot;&gt;&lt;a href=&quot;#Vue3中的ref和reactive的应用&quot; class=&quot;headerlink&quot; title=&quot;Vue3中的ref和reactive的应用&quot;&gt;&lt;/a&gt;Vue3中的ref和reactive的应用&lt;/</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="https://aliveseven.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题</title>
    <link href="https://aliveseven.github.io/posts/894ca352/"/>
    <id>https://aliveseven.github.io/posts/894ca352/</id>
    <published>2022-10-09T14:07:38.979Z</published>
    <updated>2022-10-09T14:23:31.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题"><a href="#npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题" class="headerlink" title="npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题"></a>npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题</h1><h3 id="npm设置"><a href="#npm设置" class="headerlink" title="npm设置"></a>npm设置</h3><ol><li>在nodejs文件夹下创建 <code>node_global</code> 和 <code>node_cache</code> 两个文件夹。</li><li>设置npm全局安装位置：<code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code></li><li>设置npm缓存位置：<code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code></li><li>设置环境变量<ul><li>用户变量Path， 添加 <code>D:\nodejs\node_global</code></li><li>新建系统变量 NODE_PATH， <code>D:\nodejs\node_global\node_modules</code></li></ul></li></ol><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6ze6gxlawj31hc0smhad.jpg"></p><h3 id="yarn的安装、设置和注意事项"><a href="#yarn的安装、设置和注意事项" class="headerlink" title="yarn的安装、设置和注意事项"></a>yarn的安装、设置和注意事项</h3><ol><li>安装：<code>npm i -g yarn</code></li><li>查看yarn global、yarn cache目录<ul><li>yarn global dir</li><li>yarn cache dir</li></ul></li><li>在nodejs文件夹下创建yarn文件夹，在yarn下创建 <code>global</code> 和 <code>cache</code> 文件夹。（在D盘找个位置存放就行）</li><li>设置全局安装位置和缓存位置到D盘<ul><li><code>yarn config set global-folder &quot;D:\nodejs\yarn\global</code></li><li><code>yarn config cache-folder &quot;D:\nodejs\yarn\cache</code></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题&quot;&gt;&lt;a href=&quot;#npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题&quot; class=&quot;headerlink&quot; title=&quot;npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题&quot;&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="NodeJs" scheme="https://aliveseven.github.io/tags/NodeJs/"/>
    
  </entry>
  
  <entry>
    <title>Js中的call()、apply()、bind()的用法</title>
    <link href="https://aliveseven.github.io/posts/4f97ecc/"/>
    <id>https://aliveseven.github.io/posts/4f97ecc/</id>
    <published>2022-10-05T14:30:05.079Z</published>
    <updated>2022-10-05T14:42:38.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js中的call-、apply-、bind-的用法"><a href="#Js中的call-、apply-、bind-的用法" class="headerlink" title="Js中的call()、apply()、bind()的用法"></a>Js中的call()、apply()、bind()的用法</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><strong><code>call()</code>、<code>apply()</code>、<code>bind()</code> 都是用来重定义 <code>this</code> 这个对象</strong></p><p>这里简单说一下这三个东西的用法和区别，太过深层的东西就不深究了，先用熟练，会用，再深入了解原理。</p><p>简单来说这三个东西都是用来修改this指向的，<strong>为什么要改变this指向？</strong></p><p>案例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    sayName : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayName</span>()  <span class="comment">// 步君，this指向obj对象</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">sayName</span>,<span class="number">0</span>); <span class="comment">// AliveSeven，this指向window对象</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出来，正常调用obj的话，this的指向是没有问题的，但是放到setTimeout中做回调问题就出现了，因为setTimeout因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候this指向自然是window，这显然不符合我们的需求，因此便需要改变this的指向。</p></blockquote><p>案例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    secAge : <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">    <span class="title class_">Fn</span> : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的年龄&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">secAge</span>) <span class="comment">// 21</span></span><br><span class="line">obj.<span class="title class_">Fn</span>()  <span class="comment">// 步君的年龄undefined</span></span><br></pre></td></tr></table></figure><p>关于Js中的this指向问题，可以参考下面这篇文章</p><p><a href="https://aliveseven.github.io/posts/9170747e/">https://aliveseven.github.io/posts/9170747e/</a></p><p>在上面代码的基础上，加入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个data的变量</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;七海&#x27;</span>,</span><br><span class="line">    age : <span class="number">77</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data)  <span class="comment">// 七海的年龄77</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">apply</span>(data) <span class="comment">// 七海的年龄77</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data)() <span class="comment">// 七海的年龄77</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6urr84dq5j30ga0ep0x1.jpg"></p><p>以上除了<code>bind</code> 方法后面多了个 <code>()</code> 外 ，它们的返回结果都一样</p><p>由此得出结论，<code>bind</code> 返回的是一个新的函数，你必须调用它才会被执行</p><h2 id="传参情况"><a href="#传参情况" class="headerlink" title="传参情况"></a>传参情况</h2><p>案例3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    secAge : <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">    <span class="title class_">Fn</span> : <span class="keyword">function</span>(<span class="params">sex , city</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的年龄&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;是一个&quot;</span> + sex + <span class="string">&quot;来自&quot;</span> + city);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">secAge</span>) <span class="comment">// 21</span></span><br><span class="line">obj.<span class="title class_">Fn</span>()  <span class="comment">// 步君的年龄undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个data的变量</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;七海&#x27;</span>,</span><br><span class="line">    age : <span class="number">77</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用三个不同的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data , <span class="string">&quot;girl&quot;</span> , <span class="string">&quot;北京&quot;</span>)  <span class="comment">// 七海的年龄77是一个girl来自北京</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;北京&quot;</span>]) <span class="comment">// 七海的年龄77是一个girl,北京来自undefined</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">apply</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;深圳&quot;</span>]) <span class="comment">// 七海的年龄77是一个girl来自深圳</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data , <span class="string">&quot;girl&quot;</span> , <span class="string">&quot;上海&quot;</span>)() <span class="comment">// 七海的年龄77是一个girl来自上海</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;上海&quot;</span>])() <span class="comment">// 七海的年龄77是一个girl,上海来自undefined</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>call()和apply()，bind() 的第一个参数都是用来表示指定对象的</li><li>区别在于他们第二个参数的使用方式是不同的</li><li><strong>使用call()、bind()方法，第一个参数是指定this是谁，后面的参数是指定函数的实参，并且call方法的参数没有限制</strong></li><li><strong>而apply方法的参数并不是如此：第一个参数与call()用法相同，第二个参数是数组，数组中包含实参</strong></li><li>call()、apply()是立即执行的，bind不是立即执行的而bind返回的是函数，需要加()才执行</li><li><strong>call()和bind()传递的参数是相同的，而apply()第二个参数是数组</strong></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js中的call-、apply-、bind-的用法&quot;&gt;&lt;a href=&quot;#Js中的call-、apply-、bind-的用法&quot; class=&quot;headerlink&quot; title=&quot;Js中的call()、apply()、bind()的用法&quot;&gt;&lt;/a&gt;Js中的call</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>小程序缓存操作(本地、同步、异步)</title>
    <link href="https://aliveseven.github.io/posts/e3e02fb9/"/>
    <id>https://aliveseven.github.io/posts/e3e02fb9/</id>
    <published>2022-09-29T02:20:27.291Z</published>
    <updated>2022-09-29T15:33:47.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小程序缓存操作-本地、同步、异步"><a href="#小程序缓存操作-本地、同步、异步" class="headerlink" title="小程序缓存操作(本地、同步、异步)"></a>小程序缓存操作(本地、同步、异步)</h1><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><ol><li>wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB</li><li>使用localStorage永久存储</li><li>使用uniapp进行开发的时候，可以将wx替换为uni来进行缓存的操作</li></ol><h2 id="异步缓存"><a href="#异步缓存" class="headerlink" title="异步缓存"></a>异步缓存</h2><p>wx.setStorage(object)</p><p>uni.setStorage(object)</p><ul><li>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="string">&quot;key&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorage(object)</p><p>uni.getStorage(object)</p><ul><li>从本地缓存中异步获取指定 key 对应的内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorageInfo(object)</p><p>uni.getStorageInfo(object)</p><ul><li>异步获取当前storage的相关信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorageInfo</span>(&#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">keys</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">currentSize</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">limitSize</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.removeStorage(object)</p><p>uni.removeStorage(object)</p><ul><li>从本地缓存中异步移除指定 key 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">removeStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="同步缓存"><a href="#同步缓存" class="headerlink" title="同步缓存"></a>同步缓存</h2><p>wx.setStorageSync(key,value)</p><p>uni.setStorageSync(key,value)</p><ul><li>将 value 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个<strong>同步</strong>接口。</li></ul><p>wx.getStorageSync(key)</p><p>uni.getStorageSync(key)</p><ul><li>从本地缓存中<strong>同步获取</strong>指定 key 对应的内容。</li></ul><p>wx.getStorageInfoSync</p><p>uni.getStorageInfoSync</p><ul><li><strong>同步获取</strong>当前storage的相关信息</li></ul><p>wx.removeStorageSync(key)</p><p>uni.removeStorageSync(key)</p><ul><li>从本地缓存中<strong>同步移除</strong>指定 key 。</li></ul><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>wx.clearStorage()</p><p>uni.clearStorage()</p><ul><li>清理本地数据缓存。</li></ul><p>wx.clearStorageSync()</p><p>uni.clearStorageSync()</p><ul><li>同步清理本地数据缓存</li></ul><h2 id="同步缓存和异步缓存的区别"><a href="#同步缓存和异步缓存的区别" class="headerlink" title="同步缓存和异步缓存的区别"></a>同步缓存和异步缓存的区别</h2><p>以Sync（同步，同时）结尾的都是都是同步缓存，二者的区别是，异步不会阻塞当前任务，同步缓存直到同步方法处理完才能继续往下执行。</p><h3 id="历史搜索"><a href="#历史搜索" class="headerlink" title="历史搜索"></a>历史搜索</h3><ul><li>案例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-icon&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要搜索的内容&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;searchNameInput&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">bindtap</span>=<span class="string">&quot;setSearchStorage&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>历史搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:right;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>删除搜索历史<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;search-list&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;searchData&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item == null?&#x27;暂无数据&#x27;:item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面</p><p>这里有三个绑定事件</p><ul><li>bindinput=”searchNameInput” 获取用户输入的数据</li><li>bindtap=”setSearchStorage” 设置本地存储</li><li>bindtap=”deleteHistory” 删除历史搜索</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户输入框的值</span></span><br><span class="line">    <span class="attr">searchNameInput</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">inputValue</span>:e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>e.detail.value就代表了当前输入值</p><p>当点击搜索的时候，bindtap=”setSearchStorage”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用户输入的内容存入本地缓存,并且将搜索数据放到首页</span></span><br><span class="line"><span class="attr">setSearchStorage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//调用API向本地缓存存入数据</span></span><br><span class="line">        <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || [] </span><br><span class="line">        searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)  </span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读取用户搜索商品</span></span><br><span class="line">        <span class="keyword">var</span> name = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span></span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;www.shop.com/home/product/search&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;<span class="attr">name</span>:name&#125;,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">                that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">goodsList</span>: res.<span class="property">data</span>.<span class="property">info</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程这么走：</p><ol><li><p>用户输入数据，点击搜索</p></li><li><p>如果数据不为空，加入（设置）本地缓存</p></li><li><p>去服务器搜索用户想要的数据，赋值给这个页面的变量</p></li><li><p>点击删除，去除本地这个key的value</p></li></ol><ul><li>这里的缓存形式的 key =&gt; value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || []</span><br></pre></td></tr></table></figure><p>获取本地名字为’searchData’的缓存，如果’searchData’这个缓存不存在就相当于重新什么一个空数组，赋值给searchData这个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)</span><br></pre></td></tr></table></figure><p>将用户输入的值PUSH进searchData这个变量里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br></pre></td></tr></table></figure><p>调用API接口，重新设置key = ‘searchData’的这个缓存的value等于searchData，下面的wx.request是请求数据的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从本地获取历史搜索数据</span></span><br><span class="line">          <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>)||[]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">searchData</span>:searchData</span><br><span class="line">            &#125;)</span><br><span class="line"> </span><br><span class="line"> deleteHistory</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除历史搜索数据</span></span><br><span class="line">    <span class="attr">deleteHistory</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">        wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;是否删除历史搜索&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, []);</span><br><span class="line">                wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;/pages/index/index&#x27;</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小程序缓存操作-本地、同步、异步&quot;&gt;&lt;a href=&quot;#小程序缓存操作-本地、同步、异步&quot; class=&quot;headerlink&quot; title=&quot;小程序缓存操作(本地、同步、异步)&quot;&gt;&lt;/a&gt;小程序缓存操作(本地、同步、异步)&lt;/h1&gt;&lt;h2 id=&quot;本地缓存&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    <category term="uniapp" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/uniapp/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
    <category term="uniapp" scheme="https://aliveseven.github.io/tags/uniapp/"/>
    
  </entry>
  
  <entry>
    <title>Js实现Cookie的操作</title>
    <link href="https://aliveseven.github.io/posts/a19e24db/"/>
    <id>https://aliveseven.github.io/posts/a19e24db/</id>
    <published>2022-09-26T15:11:05.432Z</published>
    <updated>2022-09-28T12:34:47.353Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Js实现Cookie的操作"><a href="#Js实现Cookie的操作" class="headerlink" title="Js实现Cookie的操作"></a>Js实现Cookie的操作</h1><h2 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h2><blockquote><p>cookie其实就是一些数据信息，类型为“小型文本文件”，存储于电脑上的文本文件中。</p></blockquote><p><img src="https://m1.im5i.com/2022/09/27/UFpDbW.png"></p><h2 id="Cookie有什么用"><a href="#Cookie有什么用" class="headerlink" title="Cookie有什么用"></a>Cookie有什么用</h2><ol><li>在编程领域，Cookie 代表一种小型的文本文件，可以让开发人员在用户计算机上存储少量的数据（大约 4kb）</li><li>记录用户的某些信息，例如用户身份、喜好等，当用户下次访问网站时，网站可以通过检索这些信息来为用户展示个性化页面。</li><li>当我们打开一个网站时，如果这个网站我们曾经登录过，那么当我们再次打开网站时，就不需要再次登录了。例如bilibili，csdn等网站。</li></ol><h2 id="Js创建Cookie"><a href="#Js创建Cookie" class="headerlink" title="Js创建Cookie"></a>Js创建Cookie</h2><p>在 JavaScript 中，您可以通过<code>document.cookie</code>属性来创建、读取、修改和删除 Cookie 信息。</p><p>创建（设置）新的 Cookie 信息，需要以<code>name=value</code>形式的字符串来定义新的 Cookie 信息，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username = AliveSeven&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;age = 21&quot;</span>;</span><br></pre></td></tr></table></figure><p>假设在A页面中要保存变量username的值(“jack”)到cookie中,key值为name，则相应的JS代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="string">&quot;name=&quot;</span>+username;</span><br></pre></td></tr></table></figure><p>注意:</p><blockquote><p>在 cookie 的名称或值中不能使用分号、逗号或空格。如果想存入这些符号，需要使用 escape() 函数进行编码。</p></blockquote><p>例如：</p><p>document.cookie=”str=”+escape(“username=AliveSeven”)，该代码等效于：</p><p>document.cookie=”str=username%3DAliveSeven”，即等号被编码为%3D。</p><p>当使用 escape() 编码后，在取出值以后需要使用 unescape() 进行解码才能得到原来的 cookie 值。</p><p>或者使用encodeURIComponent()函数也可以存储带分号、逗号和空格的数据，同样也要使用对应的decodeURIComponent() 函数来解析 Cookie 数据。如果要编码整个URL，那就用encodeURI方法。</p><h3 id="Cookie的时效性"><a href="#Cookie的时效性" class="headerlink" title="Cookie的时效性"></a>Cookie的时效性</h3><p>Cookie 并不会一直存在，默认情况下，Cookie 的生命周期就是浏览器的会话周期，即用户关闭浏览器后，Cookie 就会失效。</p><p>如果想要延长 Cookie 的生命周期，您可以使用 max-age 属性来指定 Cookie 可以存在的时间（单位为秒），默认为 -1，即关闭浏览器后失效。</p><p>如果将 max-age 设置为一个负数，则表示该 Cookie 为临时 Cookie，关闭浏览器后就会失效。如果设置为 0，则表示删除该 Cookie。若要将 Cookie 的生命周期设置为 30 天的话，则可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>此外，您也可以使用 expires 属性来指定 Cookie 失效的具体日期（GMT/UTC 格式），如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">today.<span class="title function_">setDate</span>(today.<span class="title function_">getDate</span>()+<span class="number">10</span>); <span class="comment">//访问页面后的10天过期</span></span><br><span class="line"><span class="comment">//设置cookie的有效时间，时间为字符串格式</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;username = AliveSeven ; expires=&#x27;</span>+ today.<span class="title function_">toGMTString</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; expires=Sun, 28 Oct 2022 12:00:00 UTC;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Js获取Cookie"><a href="#Js获取Cookie" class="headerlink" title="Js获取Cookie"></a>Js获取Cookie</h2><p>读取（获取） Cookie 同样使用<code>document.cookie</code>即可，该属性会返回一个字符串，字符串中包含除 max-age、expires、path 和 domain 等属性之外的所有 Cookie 信息。</p><p>为了获取单个 Cookie 的值，我们可以通过 split() 函数将包含 Cookie 信息的字符串拆分为数组，然后再获取某个 Cookie 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username = AliveSeven ; age = 21 ; max-age = &quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;age = 21&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line">      <span class="comment">// 拆分 cookie 字符串</span></span><br><span class="line">      <span class="keyword">var</span> array = str.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; array.<span class="property">length</span> ; i++)&#123;</span><br><span class="line"><span class="comment">// console.log(array[i]);</span></span><br><span class="line"><span class="keyword">var</span> array2 = array[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">              <span class="keyword">var</span> getCookie = array2[<span class="number">0</span>]+<span class="string">&quot;:&quot;</span>+<span class="built_in">decodeURIComponent</span>(array2[<span class="number">1</span>]) <span class="comment">//解码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getCookie.<span class="title function_">trim</span>()); <span class="comment">// 去除开头的空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Js修改或更新Cookie"><a href="#Js修改或更新Cookie" class="headerlink" title="Js修改或更新Cookie"></a>Js修改或更新Cookie</h2><p>如果要改变一个 cookie 值，只需对它重新赋值，例如：<code>document.cookie=&quot;age=23&quot;;</code>这样就可以修改前面设置的 age=21 的 cookie 值。</p><h2 id="Js删除Cookie"><a href="#Js删除Cookie" class="headerlink" title="Js删除Cookie"></a>Js删除Cookie</h2><p>删除 Cookie 与修改 Cookie 类似，只需要重新将 Cookie 的值设置为空，并将 expires 属性设置为一个过去的日期即可。</p><p>另外，也可通过将 max-age 属性设置为 0 来删除 Cookie。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; path=/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line"><span class="comment">// 删除这个 Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="使用插件实现Cookie的操作"><a href="#使用插件实现Cookie的操作" class="headerlink" title="使用插件实现Cookie的操作"></a>使用插件实现Cookie的操作</h1><h2 id="Js-cookie-js"><a href="#Js-cookie-js" class="headerlink" title="Js.cookie.js"></a>Js.cookie.js</h2><blockquote><p>js.cookie.js : 一个简单，轻量级的JavaScript API，用于处理cookie;</p></blockquote><p>开源地址：<a href="https://github.com/js-cookie/js-cookie">https://github.com/js-cookie/js-cookie</a></p><p>下载：<a href="https://github.com/js-cookie/js-cookie/releases">https://github.com/js-cookie/js-cookie/releases</a></p><p>优点：</p><ul><li>适用于所有浏览器；</li><li>接受任何字符；</li><li>没有依赖；</li><li>支持ES模块；</li><li>Unobtrusive JSON support；</li><li>Enable custom encoding/decoding；</li></ul><h3 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h3><p>创建一个cookie，整个站点可用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天，整个站点可用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>expires的单位默认为“天”，那如何设置有效期小于1天呢？<br>解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效期为15分钟；</span></span><br><span class="line"><span class="keyword">var</span> inFifteenMinutes = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">expires</span>: inFifteenMinutes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天，且只在当前页面所在的路径有效；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><p>读取某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// =&gt; &#x27;value&#x27;</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;nothing&#x27;</span>) <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>读取所有可见cookie：返回的是个json对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>() <span class="comment">// =&gt; &#123; name: &#x27;value&#x27; , &quot;name1&quot;:&quot;value1&quot;  &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><p>删除某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>删除当前页面所在路径下某个有效的cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// fail!</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;) <span class="comment">// removed!</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-cookie-js"><a href="#jQuery-cookie-js" class="headerlink" title="jQuery.cookie.js"></a>jQuery.cookie.js</h2><blockquote><p>Jquery.cookie.js - 一个简单，轻量的jquery插件，用于cookie的读取、写入和删除操作；</p></blockquote><p>开源地址：<a href="https://github.com/carhartl/jquery-cookie">https://github.com/carhartl/jquery-cookie</a></p><p>下载地址：<a href="http://plugins.jquery.com/cookie/">http://plugins.jquery.com/cookie/</a></p><blockquote><p>注意：使用之前要引入jquery.js;</p></blockquote><h3 id="创建Cookie-1"><a href="#创建Cookie-1" class="headerlink" title="创建Cookie"></a>创建Cookie</h3><p>创建一个cookie，当前页面路径有效；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建一个cookie，全站点有效：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>expires的单位默认为“天”，那如何设置有效期小于1天呢？<br>解决方案如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效期为15分钟；</span></span><br><span class="line"><span class="keyword">var</span> inFifteenMinutes = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>, &#123; <span class="attr">expires</span>: inFifteenMinutes &#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，并设置cookie的有效路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">4</span>, <span class="attr">path</span>: <span class="string">&#x27;/website1&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="获取Cookie-1"><a href="#获取Cookie-1" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><p>读取某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; &quot;value&quot;</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>读取所有有效的cookie：（json格式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(); <span class="comment">// =&gt; &#123; &quot;name&quot;: &quot;value&quot;,&quot;name1&quot;:&quot;value1&quot; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除Cookie-1"><a href="#删除Cookie-1" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功删除返回true，失败返回false；</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除时，必须使用创建时设置的属性值（path，domain 等）</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><h4 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h4><p>cookie是否编码；（using encodeURIComponent/decodeURIComponent）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie.<span class="property">raw</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="json"><a href="#json" class="headerlink" title="#json"></a>#json</h4><p>是否以json格式进行存储和读取；（Assumes JSON.stringify and JSON.parse）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie.<span class="property">json</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.it610.com/article/1538766788089638912.htm">https://www.it610.com/article/1538766788089638912.htm</a></p><p><a href="https://www.jb51.net/article/182552.htm">https://www.jb51.net/article/182552.htm</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Js实现Cookie的操作&quot;&gt;&lt;a href=&quot;#Js实现Cookie的操作&quot; class=&quot;headerlink&quot; title=&quot;Js实现Cookie的操作&quot;&gt;&lt;/a&gt;Js实现Cookie的操作&lt;/h1&gt;&lt;h2 id=&quot;Cookie是什么&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JQuery的基本使用</title>
    <link href="https://aliveseven.github.io/posts/ecc9d9/"/>
    <id>https://aliveseven.github.io/posts/ecc9d9/</id>
    <published>2022-09-24T15:15:19.096Z</published>
    <updated>2022-09-28T12:34:41.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JQuery的基本使用"><a href="#JQuery的基本使用" class="headerlink" title="JQuery的基本使用"></a>JQuery的基本使用</h1><h2 id="JQuery是什么"><a href="#JQuery是什么" class="headerlink" title="JQuery是什么"></a>JQuery是什么</h2><p>JQuery是轻量级、快速、简洁的脚本库，它对Js进行了封装，简单来说就是可以用更少的代码做更多的事情。</p><p><strong>中文API手册：</strong><a href="https://jqueryapi.net/">https://jqueryapi.net/</a></p><p><strong>速查表：</strong><a href="https://www.bejson.com/apidoc/jquery/">https://www.bejson.com/apidoc/jquery/</a></p><h2 id="JQuery的下载和安装"><a href="#JQuery的下载和安装" class="headerlink" title="JQuery的下载和安装"></a>JQuery的下载和安装</h2><h3 id="下载-JQuery"><a href="#下载-JQuery" class="headerlink" title="下载 JQuery"></a>下载 JQuery</h3><p>有两个版本的 JQuery 可供下载：</p><ul><li>Production version - 用于实际的网站中，已被精简和压缩。</li><li>Development version - 用于测试和开发（未压缩，是可读的代码）</li></ul><p>以上两个版本都可以从 <a href="http://jquery.com/download/">jquery.com</a> 中下载。</p><p>Juery 库是一个 JavaScript 文件，您可以使用 HTML 的 <code>&lt;script&gt;</code> 标签引用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过-CDN引用JQ"><a href="#通过-CDN引用JQ" class="headerlink" title="通过 CDN引用JQ"></a>通过 CDN引用JQ</h3><ol><li>Staticfile CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>百度 CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>又拍云 CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h2><p>JQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <strong>$(*selector*).*action*()</strong></p><ul><li>美元符号定义 JQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素，类似于querySelector()</li><li>selector为选择器，比如我要选择id=”test”的元素，那么我可以这样操作，$(“#test”)，又或者我选择class=”wrap”的元素，那么就是$(“.wrap”)</li><li>JQuery 的 action() 执行对元素的操作</li></ul><p>实例:</p><ul><li>$(this).hide() - 隐藏当前元素</li><li>$(“div”).hide() - 隐藏所有 <code>&lt;div&gt;</code> 元素</li><li>$(“div.test”).hide() - 隐藏所有 class=”test” 的<code> &lt;div&gt;</code> 元素</li><li>$(“#test”).hide() - 隐藏 id=”test” 的元素</li></ul><p>JQuery 入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br><span class="line">或者</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JavaScript 入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JQuery 入口函数与 JavaScript 入口函数的区别：</p><ul><li> JQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li><li> JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li></ul><h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><ul><li>JQuery 选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML 元素。</li><li> 它基于已经存在的 CSS 选择器，除此之外，它还有一些自定义的选择器。</li><li>JQuery 中所有选择器都以美元符号开头：$()。</li></ul><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>JQuery 使用 CSS 选择器来选取 HTML 元素。</p><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(“*”)</td><td align="left">选取所有元素</td></tr><tr><td align="left">$(“#test”)</td><td align="left">选择id值为test的元素，id值是唯一的所以返回单个元素</td></tr><tr><td align="left">$(“div”)</td><td align="left">选择所有 <code>&lt;div&gt;</code> 元素</td></tr><tr><td align="left">$(“.myclass”)</td><td align="left">选择使用myclass类的css的所有元素</td></tr><tr><td align="left">$(“#test,div,.myclass”)</td><td align="left">选取多个元素</td></tr><tr><td align="left">$(“p.intro”)</td><td align="left">选取所有 class=”intro”的<code>&lt;p&gt;</code>元素</td></tr><tr><td align="left">$(“p#demo”)</td><td align="left">选取所有 id=”demo”的<code>&lt;p&gt;</code>元素</td></tr></tbody></table><p>实例1：</p><p>当用户点击按钮后，有 id=”test” 属性的元素将被隐藏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实例2：</p><p>用户点击按钮后所有带有 class=”test” 属性的元素都隐藏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(“div span”)</td><td align="left">选取<code>&lt;div&gt;</code>里的所有<code>&lt;span&gt;</code>元素</td></tr><tr><td align="left">$(“div &gt;span”)</td><td align="left">选取<code>&lt;div&gt;</code>元素下元素名是<code>&lt;span&gt;</code>的子元素</td></tr><tr><td align="left">$(“#one +div”)</td><td align="left">选取id为one的元素的下一个<code>&lt;div&gt;</code>同辈元素，等同于$(“#one”).next(“div”)</td></tr><tr><td align="left">$(“#one~div”)</td><td align="left">选取id为one的元素的元素后面的所有<code>&lt;div&gt;</code>同辈元素，等同于$(“#one”).nextAll(“div”)</td></tr><tr><td align="left">$(“#one”).siblings(“div”)</td><td align="left">获取id为one的元素的所有<code>&lt;div&gt;</code>同辈元素（不管前后）</td></tr><tr><td align="left">$(“#one”).prev(“div”)</td><td align="left">获取id为one的元素的前面紧邻的同辈<code>&lt;div&gt;</code>元素</td></tr></tbody></table><p><strong>获取元素范围大小顺序依次为：</strong></p><p>$(“#one”).siblings(“div”) &gt; $(“#one~div”) &gt; $(“#one +div”)  </p><p>或是</p><p>$(“#one”).siblings(“div”) &gt; $(“#one”).nextAll(“div”) &gt; $(“#one”).next(“div”)</p><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(“:input”)</td><td align="left">选取所有<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>，<code>&lt;select&gt;</code> 和 <code>&lt;button&gt;</code>元素</td></tr><tr><td align="left">$(“:text”)</td><td align="left">选取所有的单行文本框</td></tr><tr><td align="left">$(“:password”)</td><td align="left">选取所有的密码框</td></tr><tr><td align="left">$(“:radio”)</td><td align="left">选取所有单的选框</td></tr><tr><td align="left">$(“:checkbox”)</td><td align="left">选取所有的多选框</td></tr><tr><td align="left">$(“:submit”)</td><td align="left">选取所有的提交按钮</td></tr><tr><td align="left">$(“:image”)</td><td align="left">选取所有的图像按钮</td></tr><tr><td align="left">$(“:reset”)</td><td align="left">选取所有的重置按钮</td></tr><tr><td align="left">$(“:button”)</td><td align="left">选取所有的按钮</td></tr><tr><td align="left">$(“:file”)</td><td align="left">选取所有的上传域</td></tr><tr><td align="left">$(“:hidden”)</td><td align="left">选取所有不可见元素</td></tr></tbody></table><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(“div:first”)</td><td align="left">选取所有<code>&lt;div&gt;</code>元素中第1个<code>&lt;div&gt;</code>元素</td></tr><tr><td align="left">$(“div:last”)</td><td align="left">选取所有<code>&lt;div&gt;</code>元素中最后一个<code>&lt;div&gt;</code>元素</td></tr><tr><td align="left">$(“input:not(.myClass)”)</td><td align="left">选取class不是myClass的<code>&lt;input&gt;</code>元素</td></tr><tr><td align="left">$(“input:even”)</td><td align="left">选取索引是偶数的<code>&lt;input&gt;</code>元素(索引从0开始)</td></tr><tr><td align="left">$(“input:odd”)</td><td align="left">选取索引是基数的<code>&lt;input&gt;</code>元素(索引从0开始)</td></tr><tr><td align="left">$(“input:eq(2)”)</td><td align="left">选取索引等于2的<code>&lt;input&gt;</code>元素</td></tr><tr><td align="left">$(“input:gt(4)”)</td><td align="left">选取索引大于4的<code>&lt;input&gt;</code>元素</td></tr><tr><td align="left">$(“input:lt(4)”)</td><td align="left">选取索引小于4的<code>&lt;input&gt;</code>元素</td></tr><tr><td align="left">$(“:header”)</td><td align="left">过滤掉所有标题元素，例如：h1、h2、h3等</td></tr><tr><td align="left">$(“div:animated”)</td><td align="left">选取正在执行动画的<code>&lt;div&gt;</code>元素</td></tr><tr><td align="left">$(“:focus”)</td><td align="left">选取当前获取焦点的元素</td></tr></tbody></table><h3 id="更多选择器"><a href="#更多选择器" class="headerlink" title="更多选择器"></a>更多选择器</h3><p>除了上述几个选择器外，JQuery还有其他常用的选择器和过滤选择器，下面列举几个。</p><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$(this)</td><td align="left">当前 HTML 元素</td></tr><tr><td align="left">$(“[href]”)</td><td align="left">选取带有 href 属性的元素</td></tr><tr><td align="left">$(“[href$=’.jpg’]”)</td><td align="left">所有带有以 “.jpg” 结尾的属性值的 href 属性</td></tr><tr><td align="left">$(“div#intro .head”)</td><td align="left">id=”intro” 的 <code>&lt;div&gt;</code> 元素中的所有 class=”head” 的元素</td></tr><tr><td align="left">$(“a[target=’_blank’]”)</td><td align="left">选取所有 target 属性值等于 “_blank” 的 <code>&lt;a&gt;</code> 元素</td></tr><tr><td align="left">$(“a[target!=’_blank’]”)</td><td align="left">选取所有 target 属性值不等于 “_blank” 的 <code>&lt;a&gt;</code> 元素</td></tr><tr><td align="left">$(“tr:even”)</td><td align="left">选取偶数位置的 <code>&lt;tr&gt;</code> 元素</td></tr><tr><td align="left">$(“tr:odd”)</td><td align="left">选取奇数位置的 <code>&lt;tr&gt;</code> 元素</td></tr></tbody></table><h2 id="JQuery事件"><a href="#JQuery事件" class="headerlink" title="JQuery事件"></a>JQuery事件</h2><p>JQuery 事件处理方法是 jQuery 中的核心函数。</p><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><h4 id="click"><a href="#click" class="headerlink" title="click()"></a>click()</h4><p>click() 方法是当按钮点击事件被触发时会调用一个函数。</p><p>该函数在用户点击 HTML 元素时执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当点击事件在某个 &lt;p&gt; 元素上触发时，隐藏当前的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="dblclick"><a href="#dblclick" class="headerlink" title="dblclick()"></a>dblclick()</h4><p>当双击元素时，会发生 dblclick 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当双击事件在某个 &lt;p&gt; 元素上触发时，隐藏当前的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseenter"><a href="#mouseenter" class="headerlink" title="mouseenter()"></a>mouseenter()</h4><p>当鼠标指针穿过元素时，会发生 mouseenter 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouseenter() 方法触发 mouseenter 事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;您的鼠标移到了 id=&quot;p1&quot; 的元素上!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseleave"><a href="#mouseleave" class="headerlink" title="mouseleave()"></a>mouseleave()</h4><p>当鼠标指针离开元素时，会发生 mouseleave 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouseleave() 方法触发 mouseleave 事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseleave</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;您的鼠标离开了 id=&quot;</span>p1<span class="string">&quot; 的元素上!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown()"></a>mousedown()</h4><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下了id为p1的元素</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mousedown</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;鼠标在 id=&quot;</span>p1<span class="string">&quot; 的元素上按下！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup()"></a>mouseup()</h4><p>当在元素上松开鼠标按钮时，会发生 mouseup 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下了id为p1的元素之后，松开了鼠标触发事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseup</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;鼠标在段落上松开。&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hover"><a href="#hover" class="headerlink" title="hover()"></a>hover()</h4><p>hover()方法用于模拟光标悬停事件。</p><p>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">$( selector ).<span class="title function_">hover</span>( handlerIn, handlerOut )</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>inFunction</em></td><td align="left">必需。规定 mouseenter 事件发生时运行的函数。</td></tr><tr><td align="left"><em>outFunction</em></td><td align="left">可选。规定 mouseleave 事件发生时运行的函数。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例，鼠标进入触发第一个函数，离开触发第二个函数</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">hover</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;你进入了 p1!&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;拜拜! 现在你离开了 p1!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="focus"><a href="#focus" class="headerlink" title="focus()"></a>focus()</h4><p>当元素获得焦点时，发生 focus 事件。</p><p>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入框获取焦点，发生focus事件</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h4><p>当元素失去焦点时，发生 blur 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入框失去焦点，发生blur事件</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#ffffff&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="keypress"><a href="#keypress" class="headerlink" title="keypress()"></a>keypress()</h4><p>与 keypress 事件相关的事件顺序：</p><ol><li>keydown- 键按下的过程</li><li>keypress - 键被按下</li><li>keyup - 键被松开</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发被选元素的 keypress 事件</span></span><br><span class="line">$(selector).<span class="title function_">keypress</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加函数到 keypress 事件</span></span><br><span class="line">$(selector).<span class="title function_">keypress</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>function</em></td><td align="left">可选。规定 keypress 事件触发时运行的函数。</td></tr></tbody></table><h4 id="keydown"><a href="#keydown" class="headerlink" title="keydown()"></a>keydown()</h4><p>当键盘键被按下时发生 keydown 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">keydown</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><h4 id="keyup"><a href="#keyup" class="headerlink" title="keyup()"></a>keyup()</h4><p>当键盘键被松开时发生 keyup 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">keyup</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JQuery的基本使用&quot;&gt;&lt;a href=&quot;#JQuery的基本使用&quot; class=&quot;headerlink&quot; title=&quot;JQuery的基本使用&quot;&gt;&lt;/a&gt;JQuery的基本使用&lt;/h1&gt;&lt;h2 id=&quot;JQuery是什么&quot;&gt;&lt;a href=&quot;#JQuery是什</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5之Canvas标签</title>
    <link href="https://aliveseven.github.io/posts/5de0b8dd/"/>
    <id>https://aliveseven.github.io/posts/5de0b8dd/</id>
    <published>2022-09-22T03:19:48.803Z</published>
    <updated>2022-10-16T07:03:20.771Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML5之Canvas标签"><a href="#HTML5之Canvas标签" class="headerlink" title="HTML5之Canvas标签"></a>HTML5之Canvas标签</h1><h2 id="Canvas简介"><a href="#Canvas简介" class="headerlink" title="Canvas简介"></a>Canvas简介</h2><p><code>&lt;canvas&gt;</code> 是 <code>HTML5</code> 新增的，一个可以使用脚本(通常为<code>JavaScript</code>)在其中绘制图像的 <code>HTML</code> 元素。它可以用来制作照片集或者制作简单(也不是那么简单)的动画，甚至可以进行实时视频处理和渲染。</p><h2 id="Canvas基本使用"><a href="#Canvas基本使用" class="headerlink" title="Canvas基本使用"></a>Canvas基本使用</h2><p><code>&lt;canvas&gt;</code>看起来和<code>&lt;img&gt;</code>标签一样，只是 <code>&lt;canvas&gt;</code> 只有两个可选的属性 <code>width、heigth</code> 属性，而没有 <code>src、alt</code> 属性。</p><p> 如果不给<code>&lt;canvas&gt;</code>设置<code>widht、height</code>属性时，则默认 <code>width</code>为300、<code>height</code>为150,单位都是<code>px</code>。也可以使用<code>css</code>属性来设置宽高，但是如宽高属性和初始比例不一致，他会出现扭曲。所以，建议永远不要使用<code>css</code>属性来设置<code>&lt;canvas&gt;</code>的宽高。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>某些较老的浏览器（尤其是IE9之前的IE浏览器）或者浏览器不支持HTML元素<code>&lt;canvas&gt;</code>，然后可以用替代内容来渲染。</p><blockquote><p>用文本替换：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">    你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用 <code>&lt;img&gt;</code> 替换：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./404.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结束标签<code>&lt;/canvas&gt;</code>不可省</p></blockquote><p>与 <code>&lt;img&gt;</code>元素不同，<code>&lt;canvas&gt;</code>元素<strong>需要</strong>结束标签(<code>&lt;/canvas&gt;</code>)。如果结束标签不存在，则文档的其余部分会被认为是替代内容，将不会显示出来。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p> <code>&lt;canvas&gt;</code>会创建一个固定大小的画布，会公开一个或多个 <strong>渲染上下文</strong>(画笔)，使用 <strong>渲染上下文</strong>来绘制和处理要展示的内容。</p><h3 id="获取渲染上下文"><a href="#获取渲染上下文" class="headerlink" title="获取渲染上下文"></a><strong>获取渲染上下文</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span></span><br><span class="line">        你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获得 2d 上下文对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_fillstyle.asp">fillStyle</a></td><td align="left">设置或返回用于填充绘画的颜色、渐变或模式</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_strokestyle.asp">strokeStyle</a></td><td align="left">设置或返回用于笔触的颜色、渐变或模式</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_shadowcolor.asp">shadowColor</a></td><td align="left">设置或返回用于阴影的颜色</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_shadowblur.asp">shadowBlur</a></td><td align="left">设置或返回用于阴影的模糊级别</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsetx.asp">shadowOffsetX</a></td><td align="left">设置或返回阴影距形状的水平距离</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsety.asp">shadowOffsetY</a></td><td align="left">设置或返回阴影距形状的垂直距离</td></tr></tbody></table><hr><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_createlineargradient.asp">createLinearGradient()</a></td><td align="left">创建线性渐变（用在画布内容上）</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_createpattern.asp">createPattern()</a></td><td align="left">在指定的方向上重复指定的元素</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_createradialgradient.asp">createRadialGradient()</a></td><td align="left">创建放射状/环形的渐变（用在画布内容上）</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_addcolorstop.asp">addColorStop()</a></td><td align="left">规定渐变对象中的颜色和停止位置</td></tr></tbody></table><h3 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap</a></td><td align="left">设置或返回线条的结束端点样式</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin</a></td><td align="left">设置或返回两条线相交时，所创建的拐角类型</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_linewidth.asp">lineWidth</a></td><td align="left">设置或返回当前的线条宽度</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit</a></td><td align="left">设置或返回最大斜接长度</td></tr></tbody></table><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_rect.asp">rect()</a></td><td align="left">创建矩形</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_fillrect.asp">fillRect()</a></td><td align="left">绘制“被填充”的矩形</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_strokerect.asp">strokeRect()</a></td><td align="left">绘制矩形边框（无填充）</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_clearrect.asp">clearRect()</a></td><td align="left">在给定的矩形内清除指定的像素</td></tr></tbody></table><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_fill.asp">fill()</a></td><td align="left">填充当前绘图（路径）</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_stroke.asp">stroke()</a></td><td align="left">绘制已定义的路径</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_beginpath.asp">beginPath()</a></td><td align="left">起始一条路径，或重置当前路径</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_moveto.asp">moveTo()</a></td><td align="left">把路径移动到画布中的指定点，不创建线条</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_closepath.asp">closePath()</a></td><td align="left">创建从当前点回到起始点的路径</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_lineto.asp">lineTo()</a></td><td align="left">添加一个新点，然后在画布中创建从该点到最后指定点的线条</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_clip.asp">clip()</a></td><td align="left">从原始画布剪切任意形状和尺寸的区域</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp">quadraticCurveTo()</a></td><td align="left">创建二次贝塞尔曲线</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_beziercurveto.asp">bezierCurveTo()</a></td><td align="left">创建三次方贝塞尔曲线</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_arc.asp">arc()</a></td><td align="left">创建弧/曲线（用于创建圆形或部分圆）</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_arcto.asp">arcTo()</a></td><td align="left">创建两切线之间的弧/曲线</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_ispointinpath.asp">isPointInPath()</a></td><td align="left">如果指定的点位于当前路径中，则返回 true，否则返回 false</td></tr></tbody></table><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_scale.asp">scale()</a></td><td align="left">缩放当前绘图至更大或更小</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_rotate.asp">rotate()</a></td><td align="left">旋转当前绘图</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_translate.asp">translate()</a></td><td align="left">重新映射画布上的 (0,0) 位置</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_transform.asp">transform()</a></td><td align="left">替换绘图的当前转换矩阵</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_settransform.asp">setTransform()</a></td><td align="left">将当前转换重置为单位矩阵。然后运行 transform()</td></tr></tbody></table><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_font.asp">font</a></td><td align="left">设置或返回文本内容的当前字体属性</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_textalign.asp">textAlign</a></td><td align="left">设置或返回文本内容的当前对齐方式</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_textbaseline.asp">textBaseline</a></td><td align="left">设置或返回在绘制文本时使用的当前文本基线</td></tr></tbody></table><hr><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_filltext.asp">fillText()</a></td><td align="left">在画布上绘制“被填充的”文本</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_stroketext.asp">strokeText()</a></td><td align="left">在画布上绘制文本（无填充）</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_measuretext.asp">measureText()</a></td><td align="left">返回包含指定文本宽度的对象</td></tr></tbody></table><h3 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_drawimage.asp">drawImage()</a></td><td align="left">向画布上绘制图像、画布或视频</td></tr></tbody></table><h3 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_width.asp">width</a></td><td align="left">返回 ImageData 对象的宽度</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_height.asp">height</a></td><td align="left">返回 ImageData 对象的高度</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_data.asp">data</a></td><td align="left">返回一个对象，其包含指定的 ImageData 对象的图像数据</td></tr></tbody></table><hr><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_createimagedata.asp">createImageData()</a></td><td align="left">创建新的、空白的 ImageData 对象</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_getimagedata.asp">getImageData()</a></td><td align="left">返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_putimagedata.asp">putImageData()</a></td><td align="left">把图像数据（从指定的 ImageData 对象）放回画布上</td></tr></tbody></table><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_globalalpha.asp">globalAlpha</a></td><td align="left">设置或返回绘图的当前 alpha 或透明值</td></tr><tr><td align="left"><a href="https://www.w3school.com.cn/tags/canvas_globalcompositeoperation.asp">globalCompositeOperation</a></td><td align="left">设置或返回新图像如何绘制到已有的图像上</td></tr></tbody></table><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><blockquote><p><code>canvas</code> 提供了三种方法绘制矩形：</p></blockquote><ol><li><p><code>fillRect(x, y, width, height)</code></p><p>绘制一个填充的矩形</p></li><li><p><code>strokeRect(x, y, width, height)</code></p><p>绘制一个矩形的边框</p></li><li><p><code>clearRect(x, y, widh, height)</code></p><p>清除指定的矩形区域，然后这块区域会变的完全透明。</p></li></ol><p><strong>案例：绘制两个矩形</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span></span><br><span class="line">        你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获得 2d 上下文对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置或返回用于填充绘画的颜色、渐变或模式</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgb(200,0,0)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fillRect(x,y,width,height) 绘制一个填充的矩形</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillRect</span> (<span class="number">10</span>, <span class="number">10</span>, <span class="number">55</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置或返回用于笔触的颜色、渐变或模式</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(0, 0, 200, 0.5)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillRect</span> (<span class="number">50</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLO1p.png"></p><h2 id="绘制路径-path"><a href="#绘制路径-path" class="headerlink" title="绘制路径(path)"></a>绘制路径(<code>path</code>)</h2><p>图形的基本元素是路径。</p><p> 路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p><p>一个路径，甚至一个子路径，都是闭合的。</p><blockquote><p>使用路径绘制图形需要一些额外的步骤：</p></blockquote><ol><li>创建路径起始点</li><li>调用绘制方法去绘制出路径</li><li>把路径封闭</li><li>一旦路径生成，通过描边或填充路径区域来渲染图形。</li></ol><blockquote><p>下面是需要用到的方法：</p></blockquote><ol><li><p><code>beginPath()</code></p><p>新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径</p></li><li><p><code>moveTo(x, y)</code></p><p>把画笔移动到指定的坐标<code>(x, y)</code>。相当于设置路径的起始点坐标。</p></li><li><p><code>closePath()</code></p><p>闭合路径之后，图形绘制命令又重新指向到上下文中</p></li><li><p><code>stroke()</code></p><p>通过线条来绘制图形轮廓</p></li><li><p><code>fill()</code></p><p>通过填充路径的内容区域生成实心的图形</p></li></ol><h2 id="绘制线段"><a href="#绘制线段" class="headerlink" title="绘制线段"></a>绘制线段</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">80</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(200, 50)的直线.</span></span><br><span class="line">        <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">150</span>, <span class="number">50</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(150, 50)的直线.</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">150</span>, <span class="number">120</span>); <span class="comment">//绘制一条从当前位置到指定坐标(150, 120)的直线.</span></span><br><span class="line">        <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLRgv.png"></p><h2 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h2><blockquote><p> 有两个方法可以绘制圆弧：</p></blockquote><ol><li><code>arc(x, y, r, startAngle, endAngle, anticlockwise)</code>:</li></ol><p>以<code>(x, y)</code>为圆心，以<code>r</code>为半径，从 <code>startAngle</code>弧度开始到<code>endAngle</code>弧度结束。<code>anticlosewise</code>是布尔值，<code>true</code>表示逆时针，<code>false</code>表示顺时针。(默认是顺时针)</p><p>注意：</p><ol><li>这里的度数都是弧度。</li><li><code>0</code>弧度是指的<code>x</code>轴正方形</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radians=(Math.PI/180)*degrees   //角度转换成弧度</span><br></pre></td></tr></table></figure><ol start="2"><li><code>arcTo(x1, y1, x2, y2, radius)</code>:</li></ol><p>根据给定的控制点和半径画一段圆弧，最后再以直线连接两个控制点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">150</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">0</span>, -<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">50</span>, -<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLBIK.png"></p><h2 id="绘制贝塞尔曲线"><a href="#绘制贝塞尔曲线" class="headerlink" title="绘制贝塞尔曲线"></a>绘制贝塞尔曲线</h2><h3 id="绘制二次贝塞尔曲线"><a href="#绘制二次贝塞尔曲线" class="headerlink" title="绘制二次贝塞尔曲线"></a>绘制二次贝塞尔曲线</h3><p><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>:</p><p>参数1和2：控制点坐标</p><p> 参数3和4：结束点坐标</p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/94917354.jpg"></p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/35792129.jpg"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">120</span>, <span class="number">120</span>); <span class="comment">//起始点</span></span><br><span class="line">        <span class="keyword">var</span> cp1x = <span class="number">60</span>, cp1y = <span class="number">40</span>;  <span class="comment">//控制点</span></span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">120</span>, y = <span class="number">70</span>; <span class="comment">// 结束点</span></span><br><span class="line">        <span class="comment">//绘制二次贝塞尔曲线</span></span><br><span class="line">        ctx.<span class="title function_">quadraticCurveTo</span>(cp1x, cp1y, x, y);</span><br><span class="line">        ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML5之Canvas标签&quot;&gt;&lt;a href=&quot;#HTML5之Canvas标签&quot; class=&quot;headerlink&quot; title=&quot;HTML5之Canvas标签&quot;&gt;&lt;/a&gt;HTML5之Canvas标签&lt;/h1&gt;&lt;h2 id=&quot;Canvas简介&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="HTML5" scheme="https://aliveseven.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中的this指向问题</title>
    <link href="https://aliveseven.github.io/posts/9170747e/"/>
    <id>https://aliveseven.github.io/posts/9170747e/</id>
    <published>2022-09-19T15:26:21.428Z</published>
    <updated>2022-09-28T12:34:38.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript中的this指向问题"><a href="#JavaScript中的this指向问题" class="headerlink" title="JavaScript中的this指向问题"></a>JavaScript中的this指向问题</h1><ul><li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定，<strong>this最终指向调用它的对象。</strong></li></ul><h2 id="全局作用域或函数调用下"><a href="#全局作用域或函数调用下" class="headerlink" title="全局作用域或函数调用下"></a>全局作用域或函数调用下</h2><ul><li><strong>全局作用域或者普通函数中 this 指向全局对象 window。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)  <span class="comment">// undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><h2 id="方法调用下"><a href="#方法调用下" class="headerlink" title="方法调用下"></a>方法调用下</h2><ul><li><strong>方法调用中谁调用了，this 指向谁</strong></li><li>当函数被保存为一个对象的属性时，它就可称为这个对象的方法。当一个方法被调用时，this被绑定到这个对象上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hi</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>因为是A.b调用的这个函数，所以指向b这个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello and Hi&#x27;</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        a : <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        sayHello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hello，</span></span><br><span class="line">            <span class="comment">// 这里的this指向的对象是b，因为调用这个sayHello()函数是通过b.sayHello()执行的</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// b : &#123;sayHello: ƒ&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property">b</span>.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><ul><li>x是<a href="https://so.csdn.net/so/search?q=%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F&spm=1001.2101.3001.7020">全局变量</a>，在全局环境下执行，this指向window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello and Hi&#x27;</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        a : <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        sayHello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hello，</span></span><br><span class="line">            <span class="comment">// 这里的this指向的对象是b，因为调用这个sayHello()函数是通过b.sayHello()执行的</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// b : &#123;sayHello: ƒ&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = A.<span class="property">b</span>.<span class="property">sayHello</span></span><br><span class="line"><span class="comment">// Hello and Hi</span></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line"><span class="title function_">x</span>()</span><br></pre></td></tr></table></figure><h2 id="构造函数调用下"><a href="#构造函数调用下" class="headerlink" title="构造函数调用下"></a>构造函数调用下</h2><ul><li>如果在一个函数前面<strong>加上new关键字</strong>来调用，那么就会创建一个连接到该函数的prototype成员的新对象，同时，<strong>this会被绑定到这个新对象上</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// fn()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li>在构造函数，new出一个对象时，this指向这个构造函数，new关键字会改变this的指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><ul><li>当用new关键字，返回的是一个对象，this指向的就是那个返回的对象；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><ul><li>如果返回的不是对象，this还是指向函数的实例，<strong>虽然null属于对象，但是返回null依然指向函数实例。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数下"><a href="#箭头函数下" class="headerlink" title="箭头函数下"></a><strong>箭头函数下</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bar</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// &#123;foo: ƒ, bar: ƒ&#125;</span></span><br><span class="line">obj.<span class="title function_">bar</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JavaScript中的this指向问题&quot;&gt;&lt;a href=&quot;#JavaScript中的this指向问题&quot; class=&quot;headerlink&quot; title=&quot;JavaScript中的this指向问题&quot;&gt;&lt;/a&gt;JavaScript中的this指向问题&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/categories/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
    <category term="前端" scheme="https://aliveseven.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="JavaScript" scheme="https://aliveseven.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
