<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue3中reactive对象重新赋值，页面不重新渲染问题</title>
      <link href="/posts/79e18b59/"/>
      <url>/posts/79e18b59/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中reactive对象重新赋值，页面不重新渲染问题"><a href="#Vue3中reactive对象重新赋值，页面不重新渲染问题" class="headerlink" title="Vue3中reactive对象重新赋值，页面不重新渲染问题"></a>Vue3中reactive对象重新赋值，页面不重新渲染问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天在学习过程中用到了Element-Plus + Vue3.2来开发一个管理系统，但是在用户表格的增删改查的开发中，表格中的单条数据的编辑问题困扰了我，一开始是用ref()取定义了一个currentRow对象（单条数据）</p><p>详细见：<a href="https://element-plus.gitee.io/zh-CN/component/table.html#%E5%8D%95%E9%80%89">https://element-plus.gitee.io/zh-CN/component/table.html#%E5%8D%95%E9%80%89</a></p><p>后面在编辑的时候发现不对劲，每次编辑完再重新请求数据的时候会报下面的错误。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h72yhuhfr9j31hc0sv1kx.jpg"></p><p>然后在网上找了好久也没找出解决方案来，打断点Debug弄了一个小时感觉应该是ref()它的这个问题。我指定ref()它定义了响应式的属性，</p><p>而ref()所定义的属性的更改是对变量进行了类似<strong>浅拷贝</strong>的操作，可能因为在重新请求数据库数据的时候，ref()所定义的currentRow失去了值变为null，具体是为什么我也不知道，虽然这个错误并没有影响页面的增删改查，还是没有问题，但是我觉得这样还是有点问题。</p><p>所以我改成用reactive()来定义这个currentRow，但是呢，用reactive()定义的数据再更改的时候，页面没有跟着一起渲染，这样就引出了问题了。</p><p>而reactive()则是类似<strong>深拷贝</strong>，如果重新赋值，就会丢失原来响应式对象的引用地址，<strong>变成一个新的引用地址</strong>，这个新的引用地址指向的对象是没有经过 reactive 方法处理的，<strong>所以是一个普通对象，而不是响应式对象</strong></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我的操作的是直接用Object.assign()来解决赋值不渲染的问题</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单条的表格数据，单选</span></span><br><span class="line"><span class="keyword">var</span> currentRow = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  id : <span class="number">100</span> ,</span><br><span class="line">  username : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  password : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  nickname : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  email : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  phone : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  address : <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">TableCurrentChange</span>(<span class="params">val : User</span>)&#123;</span><br><span class="line">  <span class="comment">// 这样给reactive赋值可以保证页面会重新渲染</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(currentRow,val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外呢，还有另外的方法</p><p>在定义reactive的时候，定义属性名，在后期赋值的时候，对属性名进行赋值</p><p>比如</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">components</span>:&#123;<span class="title class_">HelloWorld</span>&#125;,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> A=<span class="title function_">reactive</span>(&#123;</span><br><span class="line">      <span class="attr">name</span>:&#123;&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getA</span>= (<span class="params">data</span>)=&gt;&#123;</span><br><span class="line">      A.<span class="property">name</span>=data</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      getA,</span><br><span class="line">      A</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外就是我用的Object.assign()方法，</p><p>Object.assign()拷贝的是属性值，如果源对象的属性值是一个指向对象的指针，那也只拷贝那个指针。</p><p>所以如果对象的属性值为基础类型，对于通过Object.assign()拷贝的那个属性而言是<strong>深拷贝</strong>；如果对象的属性值为引用，对于通过通过Object.assign()拷贝的那个属性而言其实是<strong>浅拷贝</strong>的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3中的ref和reactive的应用</title>
      <link href="/posts/cffffdfa/"/>
      <url>/posts/cffffdfa/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3中的ref和reactive的应用"><a href="#Vue3中的ref和reactive的应用" class="headerlink" title="Vue3中的ref和reactive的应用"></a>Vue3中的ref和reactive的应用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>ref和reactive是干什么用？<strong>就是把数据变成「响应式」的</strong></p><blockquote><p>Vue3中实现数据响应式，用到的是组合式API中的<code>ref</code>和<code>reactive</code>函数，不同的是<code>ref</code>函数一般定义<strong>基本类型</strong>数据，而<code>reactive</code>函数用于定义一个<strong>对象类型</strong>的响应式数据。</p></blockquote><h2 id="Vue2和Vue3中的响应式"><a href="#Vue2和Vue3中的响应式" class="headerlink" title="Vue2和Vue3中的响应式"></a>Vue2和Vue3中的响应式</h2><p>vue2的响应式是通过<strong>Object.defineProperty（数据劫持）</strong>方法，针对对象和数组有两种处理：</p><ul><li>对象: 通过defineProperty对对象的已有属性值的读取和修改进行劫持(监视/拦截)</li><li>数组: 通过重写数组更新数组一系列更新元素的方法来实现元素修改的劫持</li></ul><h2 id="ref函数"><a href="#ref函数" class="headerlink" title="ref函数"></a>ref函数</h2><ol><li><p><strong>作用</strong>: 定义一个响应式的数据</p></li><li><p><strong>语法</strong>: <code>const xxx = ref(initValue)</code></p></li></ol><ul><li>创建一个包含响应式数据的<strong>引用对象（reference对象，简称ref对象）</strong> </li><li>JS中操作数据： <code>xxx.value</code>，因为<code>ref</code> 接收参数并将其包裹在一个带有 <code>value</code> property 的对象中返回</li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li><li>本质上，ref(0) 等于 reactive( { value:0 })</li></ul><h3 id="使用事项"><a href="#使用事项" class="headerlink" title="使用事项"></a>使用事项</h3><ol><li>使用ref包装之后，需要使用.value才行进行取值和赋值操作。这就导致一个结，就是在对象起属性名时，尽可能避开有value的属性名。因为会引起混淆。</li><li><strong>响应式对象里面如果有ref包装的值类型。则Vue会实现自动拆箱</strong>，即获取值的方式是object.property，而不是object.property.value，注意：只有响应式对象会是这样，响应式数组或者Map都不能这样。</li><li>接受的数据可以是：基本类型，也可以是对象类型，<strong>基础类型</strong>靠Object.defineProperty()的get与set完成响应式，<strong>对象类型</strong>则是靠reactive函数进行辅助</li></ol><h3 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> A = <span class="title function_">ref</span>(<span class="string">&#x27;AliveSeven&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A的ref数据:&#x27;</span>, A)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70lm35d0oj30wi04r40t.jpg" alt=""></p><p>改变A，要用.value来改变</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A.<span class="property">value</span> = <span class="string">&#x27;Alice&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改变了A后：&#x27;</span>,A)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70lqoowz9j30u504zac6.jpg" alt=""></p><p>使用ref来声明对象类型时候：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> C = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  name : <span class="string">&#x27;Nanami&#x27;</span>,</span><br><span class="line">  age : <span class="number">77</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;C的ref数据:&#x27;</span>, C)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70lwhwaxij30w304yjtk.jpg" alt=""></p><h2 id="reactive函数"><a href="#reactive函数" class="headerlink" title="reactive函数"></a>reactive函数</h2><ul><li><strong>作用</strong>: 定义一个<strong>对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li><strong>语法</strong>：const 代理对象= reactive(源对象)</li></ul><h3 id="使用事项-1"><a href="#使用事项-1" class="headerlink" title="使用事项"></a>使用事项</h3><ol><li>接收一个对象（或数组），返回一个<strong>代理对象</strong>（Proxy的实例对象，简称proxy对象）</li><li>js中操作不需要.value(与ref区别)</li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li><li>可以使用<strong>toRef(obj)</strong>为对象中的每一个属性创建一个ref，它可以保持对原属性的响应式链接，类似于<strong>浅拷贝</strong>。<ul><li></li></ul></li></ol><h2 id="ref和reactive的区别"><a href="#ref和reactive的区别" class="headerlink" title="ref和reactive的区别"></a>ref和reactive的区别</h2><ol><li>ref定义对象，在js中使用时都应该.value，如果定义的对象嵌套太深，再多一层.value太冗余，而reactive则无需.value</li><li>ref定义对象类型数据，里边使用的也是reactive中的Proxy代理，不如直接使用reactive</li><li>reactive不能直接定义基本类型数据，不起作用，可以将基本类型数据整体放入一个对象中，将reactive当作Vue2中的data去使用</li><li>ref存在异步问题</li></ol><h3 id="使用案例-1"><a href="#使用案例-1" class="headerlink" title="使用案例"></a>使用案例</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> B = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alive2&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B的ref数据:&#x27;</span>, B)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70m2m9q93j30u0044wfq.jpg" alt=""></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, reactive, toRef &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> B = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;Alive2&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">hobby</span>:[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;唱&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;跳&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;rap&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">type</span> : <span class="string">&quot;篮球&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B的ref数据:&#x27;</span>, B)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive定义的响应式数据是“深层次的”。</span></span><br><span class="line"><span class="comment">// 下面的赋值不会影响上面的结果</span></span><br><span class="line"></span><br><span class="line">B.<span class="property">name</span> = <span class="string">&#x27;Alive3&#x27;</span></span><br><span class="line">B.<span class="property">age</span> = <span class="number">99</span></span><br><span class="line">B.<span class="property">hobby</span>[<span class="number">3</span>].<span class="property">type</span> = <span class="string">&quot;ctrl&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;改变了B后：&#x27;</span>,B)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h70mlmoifsj30xu05ptbn.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题</title>
      <link href="/posts/894ca352/"/>
      <url>/posts/894ca352/</url>
      
        <content type="html"><![CDATA[<h1 id="npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题"><a href="#npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题" class="headerlink" title="npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题"></a>npm、yarn设置全局安装位置和缓存位置，解决C盘占用问题</h1><h3 id="npm设置"><a href="#npm设置" class="headerlink" title="npm设置"></a>npm设置</h3><ol><li>在nodejs文件夹下创建 <code>node_global</code> 和 <code>node_cache</code> 两个文件夹。</li><li>设置npm全局安装位置：<code>npm config set prefix &quot;D:\nodejs\node_global&quot;</code></li><li>设置npm缓存位置：<code>npm config set cache &quot;D:\nodejs\node_cache&quot;</code></li><li>设置环境变量<ul><li>用户变量Path， 添加 <code>D:\nodejs\node_global</code></li><li>新建系统变量 NODE_PATH， <code>D:\nodejs\node_global\node_modules</code></li></ul></li></ol><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6ze6gxlawj31hc0smhad.jpg"></p><h3 id="yarn的安装、设置和注意事项"><a href="#yarn的安装、设置和注意事项" class="headerlink" title="yarn的安装、设置和注意事项"></a>yarn的安装、设置和注意事项</h3><ol><li>安装：<code>npm i -g yarn</code></li><li>查看yarn global、yarn cache目录<ul><li>yarn global dir</li><li>yarn cache dir</li></ul></li><li>在nodejs文件夹下创建yarn文件夹，在yarn下创建 <code>global</code> 和 <code>cache</code> 文件夹。（在D盘找个位置存放就行）</li><li>设置全局安装位置和缓存位置到D盘<ul><li><code>yarn config set global-folder &quot;D:\nodejs\yarn\global</code></li><li><code>yarn config cache-folder &quot;D:\nodejs\yarn\cache</code></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js中的call()、apply()、bind()的用法</title>
      <link href="/posts/4f97ecc/"/>
      <url>/posts/4f97ecc/</url>
      
        <content type="html"><![CDATA[<h1 id="Js中的call-、apply-、bind-的用法"><a href="#Js中的call-、apply-、bind-的用法" class="headerlink" title="Js中的call()、apply()、bind()的用法"></a>Js中的call()、apply()、bind()的用法</h1><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><strong><code>call()</code>、<code>apply()</code>、<code>bind()</code> 都是用来重定义 <code>this</code> 这个对象</strong></p><p>这里简单说一下这三个东西的用法和区别，太过深层的东西就不深究了，先用熟练，会用，再深入了解原理。</p><p>简单来说这三个东西都是用来修改this指向的，<strong>为什么要改变this指向？</strong></p><p>案例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    sayName : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">sayName</span>()  <span class="comment">// 步君，this指向obj对象</span></span><br><span class="line"><span class="built_in">setTimeout</span>(obj.<span class="property">sayName</span>,<span class="number">0</span>); <span class="comment">// AliveSeven，this指向window对象</span></span><br></pre></td></tr></table></figure><blockquote><p>可以看出来，正常调用obj的话，this的指向是没有问题的，但是放到setTimeout中做回调问题就出现了，因为setTimeout因此回到主栈执行时是在全局执行上下文的环境中执行的，这时候this指向自然是window，这显然不符合我们的需求，因此便需要改变this的指向。</p></blockquote><p>案例2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    secAge : <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">    <span class="title class_">Fn</span> : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的年龄&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">secAge</span>) <span class="comment">// 21</span></span><br><span class="line">obj.<span class="title class_">Fn</span>()  <span class="comment">// 步君的年龄undefined</span></span><br></pre></td></tr></table></figure><p>关于Js中的this指向问题，可以参考下面这篇文章</p><p><a href="https://aliveseven.github.io/posts/9170747e/">https://aliveseven.github.io/posts/9170747e/</a></p><p>在上面代码的基础上，加入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个data的变量</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;七海&#x27;</span>,</span><br><span class="line">    age : <span class="number">77</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data)  <span class="comment">// 七海的年龄77</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">apply</span>(data) <span class="comment">// 七海的年龄77</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data)() <span class="comment">// 七海的年龄77</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6urr84dq5j30ga0ep0x1.jpg" alt=""></p><p>以上除了<code>bind</code> 方法后面多了个 <code>()</code> 外 ，它们的返回结果都一样</p><p>由此得出结论，<code>bind</code> 返回的是一个新的函数，你必须调用它才会被执行</p><h2 id="传参情况"><a href="#传参情况" class="headerlink" title="传参情况"></a>传参情况</h2><p>案例3：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;AliveSeven&#x27;</span> , age = <span class="number">21</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">&#x27;步君&#x27;</span>,</span><br><span class="line">    secAge : <span class="variable language_">this</span>.<span class="property">age</span>,</span><br><span class="line">    <span class="title class_">Fn</span> : <span class="keyword">function</span>(<span class="params">sex , city</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot;的年龄&quot;</span> + <span class="variable language_">this</span>.<span class="property">age</span> + <span class="string">&quot;是一个&quot;</span> + sex + <span class="string">&quot;来自&quot;</span> + city);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">secAge</span>) <span class="comment">// 21</span></span><br><span class="line">obj.<span class="title class_">Fn</span>()  <span class="comment">// 步君的年龄undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个data的变量</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">    name : <span class="string">&#x27;七海&#x27;</span>,</span><br><span class="line">    age : <span class="number">77</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用三个不同的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data , <span class="string">&quot;girl&quot;</span> , <span class="string">&quot;北京&quot;</span>)  <span class="comment">// 七海的年龄77是一个girl来自北京</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">call</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;北京&quot;</span>]) <span class="comment">// 七海的年龄77是一个girl,北京来自undefined</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">apply</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;深圳&quot;</span>]) <span class="comment">// 七海的年龄77是一个girl来自深圳</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data , <span class="string">&quot;girl&quot;</span> , <span class="string">&quot;上海&quot;</span>)() <span class="comment">// 七海的年龄77是一个girl来自上海</span></span><br><span class="line">obj.<span class="property">Fn</span>.<span class="title function_">bind</span>(data , [<span class="string">&quot;girl&quot;</span> , <span class="string">&quot;上海&quot;</span>])() <span class="comment">// 七海的年龄77是一个girl,上海来自undefined</span></span><br></pre></td></tr></table></figure><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><ul><li>call()和apply()，bind() 的第一个参数都是用来表示指定对象的</li><li>区别在于他们第二个参数的使用方式是不同的</li><li><strong>使用call()、bind()方法，第一个参数是指定this是谁，后面的参数是指定函数的实参，并且call方法的参数没有限制</strong></li><li><strong>而apply方法的参数并不是如此：第一个参数与call()用法相同，第二个参数是数组，数组中包含实参</strong></li><li>call()、apply()是立即执行的，bind不是立即执行的而bind返回的是函数，需要加()才执行</li><li><strong>call()和bind()传递的参数是相同的，而apply()第二个参数是数组</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小程序缓存操作(本地、同步、异步)</title>
      <link href="/posts/e3e02fb9/"/>
      <url>/posts/e3e02fb9/</url>
      
        <content type="html"><![CDATA[<h1 id="小程序缓存操作-本地、同步、异步"><a href="#小程序缓存操作-本地、同步、异步" class="headerlink" title="小程序缓存操作(本地、同步、异步)"></a>小程序缓存操作(本地、同步、异步)</h1><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><ol><li>wx.setStorage（wx.setStorageSync）、wx.getStorage（wx.getStorageSync）、wx.clearStorage（wx.clearStorageSync）可以对本地缓存进行设置、获取和清理。本地缓存最大为10MB</li><li>使用localStorage永久存储</li><li>使用uniapp进行开发的时候，可以将wx替换为uni来进行缓存的操作</li></ol><h2 id="异步缓存"><a href="#异步缓存" class="headerlink" title="异步缓存"></a>异步缓存</h2><p>wx.setStorage(object)</p><p>uni.setStorage(object)</p><ul><li>将数据存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>:<span class="string">&quot;key&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>:<span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorage(object)</p><p>uni.getStorage(object)</p><ul><li>从本地缓存中异步获取指定 key 对应的内容。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.getStorageInfo(object)</p><p>uni.getStorageInfo(object)</p><ul><li>异步获取当前storage的相关信息</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">getStorageInfo</span>(&#123;</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">keys</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">currentSize</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">limitSize</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>wx.removeStorage(object)</p><p>uni.removeStorage(object)</p><ul><li>从本地缓存中异步移除指定 key 。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">removeStorage</span>(&#123;</span><br><span class="line">  <span class="attr">key</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">  <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="同步缓存"><a href="#同步缓存" class="headerlink" title="同步缓存"></a>同步缓存</h2><p>wx.setStorageSync(key,value)</p><p>uni.setStorageSync(key,value)</p><ul><li>将 value 存储在本地缓存中指定的 key 中，会覆盖掉原来该 key 对应的内容，这是一个<strong>同步</strong>接口。</li></ul><p>wx.getStorageSync(key)</p><p>uni.getStorageSync(key)</p><ul><li>从本地缓存中<strong>同步获取</strong>指定 key 对应的内容。</li></ul><p>wx.getStorageInfoSync</p><p>uni.getStorageInfoSync</p><ul><li><strong>同步获取</strong>当前storage的相关信息</li></ul><p>wx.removeStorageSync(key)</p><p>uni.removeStorageSync(key)</p><ul><li>从本地缓存中<strong>同步移除</strong>指定 key 。</li></ul><h2 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h2><p>wx.clearStorage()</p><p>uni.clearStorage()</p><ul><li>清理本地数据缓存。</li></ul><p>wx.clearStorageSync()</p><p>uni.clearStorageSync()</p><ul><li>同步清理本地数据缓存</li></ul><h2 id="同步缓存和异步缓存的区别"><a href="#同步缓存和异步缓存的区别" class="headerlink" title="同步缓存和异步缓存的区别"></a>同步缓存和异步缓存的区别</h2><p>以Sync（同步，同时）结尾的都是都是同步缓存，二者的区别是，异步不会阻塞当前任务，同步缓存直到同步方法处理完才能继续往下执行。</p><h3 id="历史搜索"><a href="#历史搜索" class="headerlink" title="历史搜索"></a>历史搜索</h3><ul><li>案例：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;search-icon&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入要搜索的内容&quot;</span>  <span class="attr">bindinput</span>=<span class="string">&quot;searchNameInput&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">bindtap</span>=<span class="string">&quot;setSearchStorage&quot;</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:left;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>历史搜索<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;float:right;&quot;</span> <span class="attr">bindtap</span>=<span class="string">&quot;deleteHistory&quot;</span>&gt;</span>删除搜索历史<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;search-list&quot;</span> <span class="attr">wx:for</span>=<span class="string">&quot;&#123;&#123;searchData&#125;&#125;&quot;</span> <span class="attr">wx:key</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;item == null?&#x27;暂无数据&#x27;:item&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面</p><p>这里有三个绑定事件</p><ul><li>bindinput=”searchNameInput” 获取用户输入的数据</li><li>bindtap=”setSearchStorage” 设置本地存储</li><li>bindtap=”deleteHistory” 删除历史搜索</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用户输入框的值</span></span><br><span class="line">    <span class="attr">searchNameInput</span>:<span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">            <span class="attr">inputValue</span>:e.<span class="property">detail</span>.<span class="property">value</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>e.detail.value就代表了当前输入值</p><p>当点击搜索的时候，bindtap=”setSearchStorage”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将用户输入的内容存入本地缓存,并且将搜索数据放到首页</span></span><br><span class="line"><span class="attr">setSearchStorage</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span> != <span class="string">&#x27;&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//调用API向本地缓存存入数据</span></span><br><span class="line">        <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || [] </span><br><span class="line">        searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)  </span><br><span class="line">        wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br><span class="line"> </span><br><span class="line">        <span class="comment">//读取用户搜索商品</span></span><br><span class="line">        <span class="keyword">var</span> name = <span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span></span><br><span class="line">        wx.<span class="title function_">request</span>(&#123;</span><br><span class="line">          <span class="attr">url</span>: <span class="string">&#x27;www.shop.com/home/product/search&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;<span class="attr">name</span>:name&#125;,</span><br><span class="line">          <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, </span><br><span class="line">          <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">                that.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">goodsList</span>: res.<span class="property">data</span>.<span class="property">info</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>流程这么走：</p><ol><li><p>用户输入数据，点击搜索</p></li><li><p>如果数据不为空，加入（设置）本地缓存</p></li><li><p>去服务器搜索用户想要的数据，赋值给这个页面的变量</p></li><li><p>点击删除，去除本地这个key的value</p></li></ol><ul><li>这里的缓存形式的 key =&gt; value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>) || []</span><br></pre></td></tr></table></figure><p>获取本地名字为’searchData’的缓存，如果’searchData’这个缓存不存在就相当于重新什么一个空数组，赋值给searchData这个变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">searchData.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">inputValue</span>)</span><br></pre></td></tr></table></figure><p>将用户输入的值PUSH进searchData这个变量里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, searchData)</span><br></pre></td></tr></table></figure><p>调用API接口，重新设置key = ‘searchData’的这个缓存的value等于searchData，下面的wx.request是请求数据的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从本地获取历史搜索数据</span></span><br><span class="line">          <span class="keyword">var</span> searchData = wx.<span class="title function_">getStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>)||[]</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setData</span>(&#123;</span><br><span class="line">                <span class="attr">searchData</span>:searchData</span><br><span class="line">            &#125;)</span><br><span class="line"> </span><br><span class="line"> deleteHistory</span><br><span class="line"> </span><br><span class="line"><span class="comment">//删除历史搜索数据</span></span><br><span class="line">    <span class="attr">deleteHistory</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="variable language_">this</span></span><br><span class="line">        wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;提示&#x27;</span>,</span><br><span class="line">        <span class="attr">content</span>: <span class="string">&#x27;是否删除历史搜索&#x27;</span>,</span><br><span class="line">        <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">confirm</span>) &#123;</span><br><span class="line">                wx.<span class="title function_">setStorageSync</span>(<span class="string">&#x27;searchData&#x27;</span>, []);</span><br><span class="line">                wx.<span class="title function_">switchTab</span>(&#123;</span><br><span class="line">                    <span class="attr">url</span>: <span class="string">&#x27;/pages/index/index&#x27;</span>,</span><br><span class="line">                &#125;)</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> uniapp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> uniapp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js实现Cookie的操作</title>
      <link href="/posts/a19e24db/"/>
      <url>/posts/a19e24db/</url>
      
        <content type="html"><![CDATA[<h1 id="Js实现Cookie的操作"><a href="#Js实现Cookie的操作" class="headerlink" title="Js实现Cookie的操作"></a>Js实现Cookie的操作</h1><h2 id="Cookie是什么"><a href="#Cookie是什么" class="headerlink" title="Cookie是什么"></a>Cookie是什么</h2><blockquote><p>cookie其实就是一些数据信息，类型为“小型文本文件”，存储于电脑上的文本文件中。</p></blockquote><p><img src="https://m1.im5i.com/2022/09/27/UFpDbW.png" alt=""></p><h2 id="Cookie有什么用"><a href="#Cookie有什么用" class="headerlink" title="Cookie有什么用"></a>Cookie有什么用</h2><ol><li>在编程领域，Cookie 代表一种小型的文本文件，可以让开发人员在用户计算机上存储少量的数据（大约 4kb）</li><li>记录用户的某些信息，例如用户身份、喜好等，当用户下次访问网站时，网站可以通过检索这些信息来为用户展示个性化页面。</li><li>当我们打开一个网站时，如果这个网站我们曾经登录过，那么当我们再次打开网站时，就不需要再次登录了。例如bilibili，csdn等网站。</li></ol><h2 id="Js创建Cookie"><a href="#Js创建Cookie" class="headerlink" title="Js创建Cookie"></a>Js创建Cookie</h2><p>在 JavaScript 中，您可以通过<code>document.cookie</code>属性来创建、读取、修改和删除 Cookie 信息。</p><p>创建（设置）新的 Cookie 信息，需要以<code>name=value</code>形式的字符串来定义新的 Cookie 信息，如下例所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username = AliveSeven&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;age = 21&quot;</span>;</span><br></pre></td></tr></table></figure><p>假设在A页面中要保存变量username的值(“jack”)到cookie中,key值为name，则相应的JS代码为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span>=<span class="string">&quot;name=&quot;</span>+username;</span><br></pre></td></tr></table></figure><p>注意:</p><blockquote><p>在 cookie 的名称或值中不能使用分号、逗号或空格。如果想存入这些符号，需要使用 escape() 函数进行编码。</p></blockquote><p>例如：</p><p>document.cookie=”str=”+escape(“username=AliveSeven”)，该代码等效于：</p><p>document.cookie=”str=username%3DAliveSeven”，即等号被编码为%3D。</p><p>当使用 escape() 编码后，在取出值以后需要使用 unescape() 进行解码才能得到原来的 cookie 值。</p><p>或者使用encodeURIComponent()函数也可以存储带分号、逗号和空格的数据，同样也要使用对应的decodeURIComponent() 函数来解析 Cookie 数据。如果要编码整个URL，那就用encodeURI方法。</p><h3 id="Cookie的时效性"><a href="#Cookie的时效性" class="headerlink" title="Cookie的时效性"></a>Cookie的时效性</h3><p>Cookie 并不会一直存在，默认情况下，Cookie 的生命周期就是浏览器的会话周期，即用户关闭浏览器后，Cookie 就会失效。</p><p>如果想要延长 Cookie 的生命周期，您可以使用 max-age 属性来指定 Cookie 可以存在的时间（单位为秒），默认为 -1，即关闭浏览器后失效。</p><p>如果将 max-age 设置为一个负数，则表示该 Cookie 为临时 Cookie，关闭浏览器后就会失效。如果设置为 0，则表示删除该 Cookie。若要将 Cookie 的生命周期设置为 30 天的话，则可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br></pre></td></tr></table></figure><p>此外，您也可以使用 expires 属性来指定 Cookie 失效的具体日期（GMT/UTC 格式），如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">today.<span class="title function_">setDate</span>(today.<span class="title function_">getDate</span>()+<span class="number">10</span>); <span class="comment">//访问页面后的10天过期</span></span><br><span class="line"><span class="comment">//设置cookie的有效时间，时间为字符串格式</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&#x27;username = AliveSeven ; expires=&#x27;</span>+ today.<span class="title function_">toGMTString</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; expires=Sun, 28 Oct 2022 12:00:00 UTC;&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Js获取Cookie"><a href="#Js获取Cookie" class="headerlink" title="Js获取Cookie"></a>Js获取Cookie</h2><p>读取（获取） Cookie 同样使用<code>document.cookie</code>即可，该属性会返回一个字符串，字符串中包含除 max-age、expires、path 和 domain 等属性之外的所有 Cookie 信息。</p><p>为了获取单个 Cookie 的值，我们可以通过 split() 函数将包含 Cookie 信息的字符串拆分为数组，然后再获取某个 Cookie 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;username = AliveSeven ; age = 21 ; max-age = &quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;age = 21&quot;</span>;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> str = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line">      <span class="comment">// 拆分 cookie 字符串</span></span><br><span class="line">      <span class="keyword">var</span> array = str.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; array.<span class="property">length</span> ; i++)&#123;</span><br><span class="line"><span class="comment">// console.log(array[i]);</span></span><br><span class="line"><span class="keyword">var</span> array2 = array[i].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">              <span class="keyword">var</span> getCookie = array2[<span class="number">0</span>]+<span class="string">&quot;:&quot;</span>+<span class="built_in">decodeURIComponent</span>(array2[<span class="number">1</span>]) <span class="comment">//解码</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getCookie.<span class="title function_">trim</span>()); <span class="comment">// 去除开头的空格</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Js修改或更新Cookie"><a href="#Js修改或更新Cookie" class="headerlink" title="Js修改或更新Cookie"></a>Js修改或更新Cookie</h2><p>如果要改变一个 cookie 值，只需对它重新赋值，例如：<code>document.cookie=&quot;age=23&quot;;</code>这样就可以修改前面设置的 age=21 的 cookie 值。</p><h2 id="Js删除Cookie"><a href="#Js删除Cookie" class="headerlink" title="Js删除Cookie"></a>Js删除Cookie</h2><p>删除 Cookie 与修改 Cookie 类似，只需要重新将 Cookie 的值设置为空，并将 expires 属性设置为一个过去的日期即可。</p><p>另外，也可通过将 max-age 属性设置为 0 来删除 Cookie。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url = https://AliveSeven.github.io/; path=/; max-age=&quot;</span> + <span class="number">30</span>*<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line"><span class="comment">// 删除这个 Cookie</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span> = <span class="string">&quot;url=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;&quot;</span>;</span><br></pre></td></tr></table></figure><h1 id="使用插件实现Cookie的操作"><a href="#使用插件实现Cookie的操作" class="headerlink" title="使用插件实现Cookie的操作"></a>使用插件实现Cookie的操作</h1><h2 id="Js-cookie-js"><a href="#Js-cookie-js" class="headerlink" title="Js.cookie.js"></a>Js.cookie.js</h2><blockquote><p>js.cookie.js : 一个简单，轻量级的JavaScript API，用于处理cookie;</p></blockquote><p>开源地址：<a href="https://github.com/js-cookie/js-cookie">https://github.com/js-cookie/js-cookie</a></p><p>下载：<a href="https://github.com/js-cookie/js-cookie/releases">https://github.com/js-cookie/js-cookie/releases</a></p><p>优点：</p><ul><li>适用于所有浏览器；</li><li>接受任何字符；</li><li>没有依赖；</li><li>支持ES模块；</li><li>Unobtrusive JSON support；</li><li>Enable custom encoding/decoding；</li></ul><h3 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h3><p>创建一个cookie，整个站点可用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天，整个站点可用；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>expires的单位默认为“天”，那如何设置有效期小于1天呢？<br>解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效期为15分钟；</span></span><br><span class="line"><span class="keyword">var</span> inFifteenMinutes = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">expires</span>: inFifteenMinutes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天，且只在当前页面所在的路径有效；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><p>读取某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// =&gt; &#x27;value&#x27;</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;nothing&#x27;</span>) <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>读取所有可见cookie：返回的是个json对象；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>() <span class="comment">// =&gt; &#123; name: &#x27;value&#x27; , &quot;name1&quot;:&quot;value1&quot;  &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><p>删除某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><p>删除当前页面所在路径下某个有效的cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;)</span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>) <span class="comment">// fail!</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span> &#125;) <span class="comment">// removed!</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-cookie-js"><a href="#jQuery-cookie-js" class="headerlink" title="jQuery.cookie.js"></a>jQuery.cookie.js</h2><blockquote><p>Jquery.cookie.js - 一个简单，轻量的jquery插件，用于cookie的读取、写入和删除操作；</p></blockquote><p>开源地址：<a href="https://github.com/carhartl/jquery-cookie">https://github.com/carhartl/jquery-cookie</a></p><p>下载地址：<a href="http://plugins.jquery.com/cookie/">http://plugins.jquery.com/cookie/</a></p><blockquote><p>注意：使用之前要引入jquery.js;</p></blockquote><h3 id="创建Cookie-1"><a href="#创建Cookie-1" class="headerlink" title="创建Cookie"></a>创建Cookie</h3><p>创建一个cookie，当前页面路径有效；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>);</span><br></pre></td></tr></table></figure><p>创建一个cookie，全站点有效：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，有效期为7天；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span> &#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br>expires的单位默认为“天”，那如何设置有效期小于1天呢？<br>解决方案如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置cookie有效期为15分钟；</span></span><br><span class="line"><span class="keyword">var</span> inFifteenMinutes = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="number">15</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;cookieName&#x27;</span>, <span class="string">&#x27;cookieValue&#x27;</span>, &#123; <span class="attr">expires</span>: inFifteenMinutes &#125;);</span><br></pre></td></tr></table></figure><p>创建一个cookie，并设置cookie的有效路径：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">expires</span>: <span class="number">4</span>, <span class="attr">path</span>: <span class="string">&#x27;/website1&#x27;</span> &#125;);</span><br></pre></td></tr></table></figure><h3 id="获取Cookie-1"><a href="#获取Cookie-1" class="headerlink" title="获取Cookie"></a>获取Cookie</h3><p>读取某个cookie：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; &quot;value&quot;</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; undefined</span></span><br></pre></td></tr></table></figure><p>读取所有有效的cookie：（json格式）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">cookie</span>(); <span class="comment">// =&gt; &#123; &quot;name&quot;: &quot;value&quot;,&quot;name1&quot;:&quot;value1&quot; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="删除Cookie-1"><a href="#删除Cookie-1" class="headerlink" title="删除Cookie"></a>删除Cookie</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 成功删除返回true，失败返回false；</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; true</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;nothing&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除时，必须使用创建时设置的属性值（path，domain 等）</span></span><br><span class="line">$.<span class="title function_">cookie</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;);</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>); <span class="comment">// =&gt; false</span></span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line">$.<span class="title function_">removeCookie</span>(<span class="string">&#x27;name&#x27;</span>, &#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;); <span class="comment">// =&gt; true</span></span><br></pre></td></tr></table></figure><h3 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h3><h4 id="raw"><a href="#raw" class="headerlink" title="raw"></a>raw</h4><p>cookie是否编码；（using encodeURIComponent/decodeURIComponent）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie.<span class="property">raw</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><h4 id="json"><a href="#json" class="headerlink" title="#json"></a>#json</h4><p>是否以json格式进行存储和读取；（Assumes JSON.stringify and JSON.parse）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.cookie.<span class="property">json</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://www.it610.com/article/1538766788089638912.htm">https://www.it610.com/article/1538766788089638912.htm</a></p><p><a href="https://www.jb51.net/article/182552.htm">https://www.jb51.net/article/182552.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JQuery的基本使用</title>
      <link href="/posts/ecc9d9/"/>
      <url>/posts/ecc9d9/</url>
      
        <content type="html"><![CDATA[<h1 id="JQuery的基本使用"><a href="#JQuery的基本使用" class="headerlink" title="JQuery的基本使用"></a>JQuery的基本使用</h1><h2 id="JQuery是什么"><a href="#JQuery是什么" class="headerlink" title="JQuery是什么"></a>JQuery是什么</h2><p>JQuery是轻量级、快速、简洁的脚本库，它对Js进行了封装，简单来说就是可以用更少的代码做更多的事情。</p><p><strong>中文API手册：</strong><a href="https://jqueryapi.net/">https://jqueryapi.net/</a></p><p><strong>速查表：</strong><a href="https://www.bejson.com/apidoc/jquery/">https://www.bejson.com/apidoc/jquery/</a></p><h2 id="JQuery的下载和安装"><a href="#JQuery的下载和安装" class="headerlink" title="JQuery的下载和安装"></a>JQuery的下载和安装</h2><h3 id="下载-JQuery"><a href="#下载-JQuery" class="headerlink" title="下载 JQuery"></a>下载 JQuery</h3><p>有两个版本的 JQuery 可供下载：</p><ul><li>Production version - 用于实际的网站中，已被精简和压缩。</li><li>Development version - 用于测试和开发（未压缩，是可读的代码）</li></ul><p>以上两个版本都可以从 <a href="http://jquery.com/download/">jquery.com</a> 中下载。</p><p>Juery 库是一个 JavaScript 文件，您可以使用 HTML 的 <code>&lt;script&gt;</code> 标签引用它：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通过-CDN引用JQ"><a href="#通过-CDN引用JQ" class="headerlink" title="通过 CDN引用JQ"></a>通过 CDN引用JQ</h3><ol><li>Staticfile CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/jquery/3.3.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>百度 CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>又拍云 CDN:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="JQuery对象"><a href="#JQuery对象" class="headerlink" title="JQuery对象"></a>JQuery对象</h2><p>JQuery 语法是通过选取 HTML 元素，并对选取的元素执行某些操作。</p><p>基础语法： <strong>$(*selector*).*action*()</strong></p><ul><li>美元符号定义 JQuery</li><li>选择符（selector）”查询”和”查找” HTML 元素，类似于querySelector()</li><li>selector为选择器，比如我要选择id=”test”的元素，那么我可以这样操作，$(“#test”)，又或者我选择class=”wrap”的元素，那么就是$(“.wrap”)</li><li>JQuery 的 action() 执行对元素的操作</li></ul><p>实例:</p><ul><li>$(this).hide() - 隐藏当前元素</li><li>$(“div”).hide() - 隐藏所有 <code>&lt;div&gt;</code> 元素</li><li>$(“div.test”).hide() - 隐藏所有 class=”test” 的<code>&lt;div&gt;</code> 元素</li><li>$(“#test”).hide() - 隐藏 id=”test” 的元素</li></ul><p>JQuery 入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br><span class="line">或者</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>JavaScript 入口函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JQuery 入口函数与 JavaScript 入口函数的区别：</p><ul><li>JQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。</li><li>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</li></ul><h2 id="JQuery选择器"><a href="#JQuery选择器" class="headerlink" title="JQuery选择器"></a>JQuery选择器</h2><ul><li>JQuery 选择器基于元素的 id、类、类型、属性、属性值等”查找”（或选择）HTML 元素。</li><li>它基于已经存在的 CSS 选择器，除此之外，它还有一些自定义的选择器。</li><li>JQuery 中所有选择器都以美元符号开头：$()。</li></ul><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><p>JQuery 使用 CSS 选择器来选取 HTML 元素。</p><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“*”)</td><td style="text-align:left">选取所有元素</td></tr><tr><td style="text-align:left">$(“#test”)</td><td style="text-align:left">选择id值为test的元素，id值是唯一的所以返回单个元素</td></tr><tr><td style="text-align:left">$(“div”)</td><td style="text-align:left">选择所有 <code>&lt;div&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“.myclass”)</td><td style="text-align:left">选择使用myclass类的css的所有元素</td></tr><tr><td style="text-align:left">$(“#test,div,.myclass”)</td><td style="text-align:left">选取多个元素</td></tr><tr><td style="text-align:left">$(“p.intro”)</td><td style="text-align:left">选取所有 class=”intro”的<code>&lt;p&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“p#demo”)</td><td style="text-align:left">选取所有 id=”demo”的<code>&lt;p&gt;</code>元素</td></tr></tbody></table></div><p>实例1：</p><p>当用户点击按钮后，有 id=”test” 属性的元素将被隐藏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;#test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>实例2：</p><p>用户点击按钮后所有带有 class=”test” 属性的元素都隐藏：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    $(<span class="string">&quot;.test&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“div span”)</td><td style="text-align:left">选取<code>&lt;div&gt;</code>里的所有<code>&lt;span&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“div &gt;span”)</td><td style="text-align:left">选取<code>&lt;div&gt;</code>元素下元素名是<code>&lt;span&gt;</code>的子元素</td></tr><tr><td style="text-align:left">$(“#one +div”)</td><td style="text-align:left">选取id为one的元素的下一个<code>&lt;div&gt;</code>同辈元素，等同于$(“#one”).next(“div”)</td></tr><tr><td style="text-align:left">$(“#one~div”)</td><td style="text-align:left">选取id为one的元素的元素后面的所有<code>&lt;div&gt;</code>同辈元素，等同于$(“#one”).nextAll(“div”)</td></tr><tr><td style="text-align:left">$(“#one”).siblings(“div”)</td><td style="text-align:left">获取id为one的元素的所有<code>&lt;div&gt;</code>同辈元素（不管前后）</td></tr><tr><td style="text-align:left">$(“#one”).prev(“div”)</td><td style="text-align:left">获取id为one的元素的前面紧邻的同辈<code>&lt;div&gt;</code>元素</td></tr></tbody></table></div><p><strong>获取元素范围大小顺序依次为：</strong></p><p>$(“#one”).siblings(“div”) &gt; $(“#one~div”) &gt; $(“#one +div”)  </p><p>或是</p><p>$(“#one”).siblings(“div”) &gt; $(“#one”).nextAll(“div”) &gt; $(“#one”).next(“div”)</p><h3 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h3><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“:input”)</td><td style="text-align:left">选取所有<code>&lt;input&gt;</code>，<code>&lt;textarea&gt;</code>，<code>&lt;select&gt;</code> 和 <code>&lt;button&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“:text”)</td><td style="text-align:left">选取所有的单行文本框</td></tr><tr><td style="text-align:left">$(“:password”)</td><td style="text-align:left">选取所有的密码框</td></tr><tr><td style="text-align:left">$(“:radio”)</td><td style="text-align:left">选取所有单的选框</td></tr><tr><td style="text-align:left">$(“:checkbox”)</td><td style="text-align:left">选取所有的多选框</td></tr><tr><td style="text-align:left">$(“:submit”)</td><td style="text-align:left">选取所有的提交按钮</td></tr><tr><td style="text-align:left">$(“:image”)</td><td style="text-align:left">选取所有的图像按钮</td></tr><tr><td style="text-align:left">$(“:reset”)</td><td style="text-align:left">选取所有的重置按钮</td></tr><tr><td style="text-align:left">$(“:button”)</td><td style="text-align:left">选取所有的按钮</td></tr><tr><td style="text-align:left">$(“:file”)</td><td style="text-align:left">选取所有的上传域</td></tr><tr><td style="text-align:left">$(“:hidden”)</td><td style="text-align:left">选取所有不可见元素</td></tr></tbody></table></div><h3 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h3><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(“div:first”)</td><td style="text-align:left">选取所有<code>&lt;div&gt;</code>元素中第1个<code>&lt;div&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“div:last”)</td><td style="text-align:left">选取所有<code>&lt;div&gt;</code>元素中最后一个<code>&lt;div&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:not(.myClass)”)</td><td style="text-align:left">选取class不是myClass的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:even”)</td><td style="text-align:left">选取索引是偶数的<code>&lt;input&gt;</code>元素(索引从0开始)</td></tr><tr><td style="text-align:left">$(“input:odd”)</td><td style="text-align:left">选取索引是基数的<code>&lt;input&gt;</code>元素(索引从0开始)</td></tr><tr><td style="text-align:left">$(“input:eq(2)”)</td><td style="text-align:left">选取索引等于2的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:gt(4)”)</td><td style="text-align:left">选取索引大于4的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“input:lt(4)”)</td><td style="text-align:left">选取索引小于4的<code>&lt;input&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“:header”)</td><td style="text-align:left">过滤掉所有标题元素，例如：h1、h2、h3等</td></tr><tr><td style="text-align:left">$(“div:animated”)</td><td style="text-align:left">选取正在执行动画的<code>&lt;div&gt;</code>元素</td></tr><tr><td style="text-align:left">$(“:focus”)</td><td style="text-align:left">选取当前获取焦点的元素</td></tr></tbody></table></div><h3 id="更多选择器"><a href="#更多选择器" class="headerlink" title="更多选择器"></a>更多选择器</h3><p>除了上述几个选择器外，JQuery还有其他常用的选择器和过滤选择器，下面列举几个。</p><div class="table-container"><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">$(this)</td><td style="text-align:left">当前 HTML 元素</td></tr><tr><td style="text-align:left">$(“[href]”)</td><td style="text-align:left">选取带有 href 属性的元素</td></tr><tr><td style="text-align:left">$(“[href$=’.jpg’]”)</td><td style="text-align:left">所有带有以 “.jpg” 结尾的属性值的 href 属性</td></tr><tr><td style="text-align:left">$(“div#intro .head”)</td><td style="text-align:left">id=”intro” 的 <code>&lt;div&gt;</code> 元素中的所有 class=”head” 的元素</td></tr><tr><td style="text-align:left">$(“a[target=’_blank’]”)</td><td style="text-align:left">选取所有 target 属性值等于 “_blank” 的 <code>&lt;a&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“a[target!=’_blank’]”)</td><td style="text-align:left">选取所有 target 属性值不等于 “_blank” 的 <code>&lt;a&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“tr:even”)</td><td style="text-align:left">选取偶数位置的 <code>&lt;tr&gt;</code> 元素</td></tr><tr><td style="text-align:left">$(“tr:odd”)</td><td style="text-align:left">选取奇数位置的 <code>&lt;tr&gt;</code> 元素</td></tr></tbody></table></div><h2 id="JQuery事件"><a href="#JQuery事件" class="headerlink" title="JQuery事件"></a>JQuery事件</h2><p>JQuery 事件处理方法是 jQuery 中的核心函数。</p><h3 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h3><h4 id="click"><a href="#click" class="headerlink" title="click()"></a>click()</h4><p>click() 方法是当按钮点击事件被触发时会调用一个函数。</p><p>该函数在用户点击 HTML 元素时执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当点击事件在某个 &lt;p&gt; 元素上触发时，隐藏当前的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="dblclick"><a href="#dblclick" class="headerlink" title="dblclick()"></a>dblclick()</h4><p>当双击元素时，会发生 dblclick 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当双击事件在某个 &lt;p&gt; 元素上触发时，隐藏当前的 &lt;p&gt; 元素</span></span><br><span class="line">$(<span class="string">&quot;p&quot;</span>).<span class="title function_">dblclick</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseenter"><a href="#mouseenter" class="headerlink" title="mouseenter()"></a>mouseenter()</h4><p>当鼠标指针穿过元素时，会发生 mouseenter 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouseenter() 方法触发 mouseenter 事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseenter</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;您的鼠标移到了 id=&quot;p1&quot; 的元素上!&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseleave"><a href="#mouseleave" class="headerlink" title="mouseleave()"></a>mouseleave()</h4><p>当鼠标指针离开元素时，会发生 mouseleave 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mouseleave() 方法触发 mouseleave 事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseleave</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;您的鼠标离开了 id=&quot;</span>p1<span class="string">&quot; 的元素上!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mousedown"><a href="#mousedown" class="headerlink" title="mousedown()"></a>mousedown()</h4><p>当鼠标指针移动到元素上方，并按下鼠标按键时，会发生 mousedown 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下了id为p1的元素</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mousedown</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;鼠标在 id=&quot;</span>p1<span class="string">&quot; 的元素上按下！&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="mouseup"><a href="#mouseup" class="headerlink" title="mouseup()"></a>mouseup()</h4><p>当在元素上松开鼠标按钮时，会发生 mouseup 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 鼠标按下了id为p1的元素之后，松开了鼠标触发事件</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">mouseup</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;鼠标在段落上松开。&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="hover"><a href="#hover" class="headerlink" title="hover()"></a>hover()</h4><p>hover()方法用于模拟光标悬停事件。</p><p>当鼠标移动到元素上时，会触发指定的第一个函数(mouseenter);当鼠标移出这个元素时，会触发指定的第二个函数(mouseleave)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">$( selector ).<span class="title function_">hover</span>( handlerIn, handlerOut )</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>inFunction</em></td><td style="text-align:left">必需。规定 mouseenter 事件发生时运行的函数。</td></tr><tr><td style="text-align:left"><em>outFunction</em></td><td style="text-align:left">可选。规定 mouseleave 事件发生时运行的函数。</td></tr></tbody></table></div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例，鼠标进入触发第一个函数，离开触发第二个函数</span></span><br><span class="line">$(<span class="string">&quot;#p1&quot;</span>).<span class="title function_">hover</span>(</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;你进入了 p1!&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;拜拜! 现在你离开了 p1!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="focus"><a href="#focus" class="headerlink" title="focus()"></a>focus()</h4><p>当元素获得焦点时，发生 focus 事件。</p><p>当通过鼠标点击选中元素或通过 tab 键定位到元素时，该元素就会获得焦点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入框获取焦点，发生focus事件</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;blue&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="blur"><a href="#blur" class="headerlink" title="blur()"></a>blur()</h4><p>当元素失去焦点时，发生 blur 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 输入框失去焦点，发生blur事件</span></span><br><span class="line">$(<span class="string">&quot;input&quot;</span>).<span class="title function_">blur</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  $(<span class="variable language_">this</span>).<span class="title function_">css</span>(<span class="string">&quot;background-color&quot;</span>,<span class="string">&quot;#ffffff&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="keypress"><a href="#keypress" class="headerlink" title="keypress()"></a>keypress()</h4><p>与 keypress 事件相关的事件顺序：</p><ol><li>keydown- 键按下的过程</li><li>keypress - 键被按下</li><li>keyup - 键被松开</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发被选元素的 keypress 事件</span></span><br><span class="line">$(selector).<span class="title function_">keypress</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加函数到 keypress 事件</span></span><br><span class="line">$(selector).<span class="title function_">keypress</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>function</em></td><td style="text-align:left">可选。规定 keypress 事件触发时运行的函数。</td></tr></tbody></table></div><h4 id="keydown"><a href="#keydown" class="headerlink" title="keydown()"></a>keydown()</h4><p>当键盘键被按下时发生 keydown 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">keydown</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure><h4 id="keyup"><a href="#keyup" class="headerlink" title="keyup()"></a>keyup()</h4><p>当键盘键被松开时发生 keyup 事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).<span class="title function_">keyup</span>(<span class="keyword">function</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5之Canvas标签</title>
      <link href="/posts/5de0b8dd/"/>
      <url>/posts/5de0b8dd/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML5之Canvas标签"><a href="#HTML5之Canvas标签" class="headerlink" title="HTML5之Canvas标签"></a>HTML5之Canvas标签</h1><h2 id="Canvas简介"><a href="#Canvas简介" class="headerlink" title="Canvas简介"></a>Canvas简介</h2><p><code>&lt;canvas&gt;</code> 是 <code>HTML5</code> 新增的，一个可以使用脚本(通常为<code>JavaScript</code>)在其中绘制图像的 <code>HTML</code> 元素。它可以用来制作照片集或者制作简单(也不是那么简单)的动画，甚至可以进行实时视频处理和渲染。</p><h2 id="Canvas基本使用"><a href="#Canvas基本使用" class="headerlink" title="Canvas基本使用"></a>Canvas基本使用</h2><p><code>&lt;canvas&gt;</code>看起来和<code>&lt;img&gt;</code>标签一样，只是 <code>&lt;canvas&gt;</code> 只有两个可选的属性 <code>width、heigth</code> 属性，而没有 <code>src、alt</code> 属性。</p><p> 如果不给<code>&lt;canvas&gt;</code>设置<code>widht、height</code>属性时，则默认 <code>width</code>为300、<code>height</code>为150,单位都是<code>px</code>。也可以使用<code>css</code>属性来设置宽高，但是如宽高属性和初始比例不一致，他会出现扭曲。所以，建议永远不要使用<code>css</code>属性来设置<code>&lt;canvas&gt;</code>的宽高。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><p>某些较老的浏览器（尤其是IE9之前的IE浏览器）或者浏览器不支持HTML元素<code>&lt;canvas&gt;</code>，然后可以用替代内容来渲染。</p><blockquote><p>用文本替换：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">    你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用 <code>&lt;img&gt;</code> 替换：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./404.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结束标签<code>&lt;/canvas&gt;</code>不可省</p></blockquote><p>与 <code>&lt;img&gt;</code>元素不同，<code>&lt;canvas&gt;</code>元素<strong>需要</strong>结束标签(<code>&lt;/canvas&gt;</code>)。如果结束标签不存在，则文档的其余部分会被认为是替代内容，将不会显示出来。</p><h2 id="渲染"><a href="#渲染" class="headerlink" title="渲染"></a>渲染</h2><p> <code>&lt;canvas&gt;</code>会创建一个固定大小的画布，会公开一个或多个 <strong>渲染上下文</strong>(画笔)，使用 <strong>渲染上下文</strong>来绘制和处理要展示的内容。</p><h3 id="获取渲染上下文"><a href="#获取渲染上下文" class="headerlink" title="获取渲染上下文"></a><strong>获取渲染上下文</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span></span><br><span class="line">        你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获得 2d 上下文对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="颜色、样式和阴影"><a href="#颜色、样式和阴影" class="headerlink" title="颜色、样式和阴影"></a>颜色、样式和阴影</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_fillstyle.asp">fillStyle</a></td><td style="text-align:left">设置或返回用于填充绘画的颜色、渐变或模式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_strokestyle.asp">strokeStyle</a></td><td style="text-align:left">设置或返回用于笔触的颜色、渐变或模式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowcolor.asp">shadowColor</a></td><td style="text-align:left">设置或返回用于阴影的颜色</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowblur.asp">shadowBlur</a></td><td style="text-align:left">设置或返回用于阴影的模糊级别</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsetx.asp">shadowOffsetX</a></td><td style="text-align:left">设置或返回阴影距形状的水平距离</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_shadowoffsety.asp">shadowOffsetY</a></td><td style="text-align:left">设置或返回阴影距形状的垂直距离</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createlineargradient.asp">createLinearGradient()</a></td><td style="text-align:left">创建线性渐变（用在画布内容上）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createpattern.asp">createPattern()</a></td><td style="text-align:left">在指定的方向上重复指定的元素</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createradialgradient.asp">createRadialGradient()</a></td><td style="text-align:left">创建放射状/环形的渐变（用在画布内容上）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_addcolorstop.asp">addColorStop()</a></td><td style="text-align:left">规定渐变对象中的颜色和停止位置</td></tr></tbody></table></div><h3 id="线条样式"><a href="#线条样式" class="headerlink" title="线条样式"></a>线条样式</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_linecap.asp">lineCap</a></td><td style="text-align:left">设置或返回线条的结束端点样式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_linejoin.asp">lineJoin</a></td><td style="text-align:left">设置或返回两条线相交时，所创建的拐角类型</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_linewidth.asp">lineWidth</a></td><td style="text-align:left">设置或返回当前的线条宽度</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_miterlimit.asp">miterLimit</a></td><td style="text-align:left">设置或返回最大斜接长度</td></tr></tbody></table></div><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_rect.asp">rect()</a></td><td style="text-align:left">创建矩形</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_fillrect.asp">fillRect()</a></td><td style="text-align:left">绘制“被填充”的矩形</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_strokerect.asp">strokeRect()</a></td><td style="text-align:left">绘制矩形边框（无填充）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_clearrect.asp">clearRect()</a></td><td style="text-align:left">在给定的矩形内清除指定的像素</td></tr></tbody></table></div><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_fill.asp">fill()</a></td><td style="text-align:left">填充当前绘图（路径）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_stroke.asp">stroke()</a></td><td style="text-align:left">绘制已定义的路径</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_beginpath.asp">beginPath()</a></td><td style="text-align:left">起始一条路径，或重置当前路径</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_moveto.asp">moveTo()</a></td><td style="text-align:left">把路径移动到画布中的指定点，不创建线条</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_closepath.asp">closePath()</a></td><td style="text-align:left">创建从当前点回到起始点的路径</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_lineto.asp">lineTo()</a></td><td style="text-align:left">添加一个新点，然后在画布中创建从该点到最后指定点的线条</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_clip.asp">clip()</a></td><td style="text-align:left">从原始画布剪切任意形状和尺寸的区域</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_quadraticcurveto.asp">quadraticCurveTo()</a></td><td style="text-align:left">创建二次贝塞尔曲线</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_beziercurveto.asp">bezierCurveTo()</a></td><td style="text-align:left">创建三次方贝塞尔曲线</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_arc.asp">arc()</a></td><td style="text-align:left">创建弧/曲线（用于创建圆形或部分圆）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_arcto.asp">arcTo()</a></td><td style="text-align:left">创建两切线之间的弧/曲线</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_ispointinpath.asp">isPointInPath()</a></td><td style="text-align:left">如果指定的点位于当前路径中，则返回 true，否则返回 false</td></tr></tbody></table></div><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_scale.asp">scale()</a></td><td style="text-align:left">缩放当前绘图至更大或更小</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_rotate.asp">rotate()</a></td><td style="text-align:left">旋转当前绘图</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_translate.asp">translate()</a></td><td style="text-align:left">重新映射画布上的 (0,0) 位置</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_transform.asp">transform()</a></td><td style="text-align:left">替换绘图的当前转换矩阵</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_settransform.asp">setTransform()</a></td><td style="text-align:left">将当前转换重置为单位矩阵。然后运行 transform()</td></tr></tbody></table></div><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_font.asp">font</a></td><td style="text-align:left">设置或返回文本内容的当前字体属性</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_textalign.asp">textAlign</a></td><td style="text-align:left">设置或返回文本内容的当前对齐方式</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_textbaseline.asp">textBaseline</a></td><td style="text-align:left">设置或返回在绘制文本时使用的当前文本基线</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_filltext.asp">fillText()</a></td><td style="text-align:left">在画布上绘制“被填充的”文本</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_stroketext.asp">strokeText()</a></td><td style="text-align:left">在画布上绘制文本（无填充）</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_measuretext.asp">measureText()</a></td><td style="text-align:left">返回包含指定文本宽度的对象</td></tr></tbody></table></div><h3 id="图像绘制"><a href="#图像绘制" class="headerlink" title="图像绘制"></a>图像绘制</h3><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_drawimage.asp">drawImage()</a></td><td style="text-align:left">向画布上绘制图像、画布或视频</td></tr></tbody></table></div><h3 id="像素操作"><a href="#像素操作" class="headerlink" title="像素操作"></a>像素操作</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_width.asp">width</a></td><td style="text-align:left">返回 ImageData 对象的宽度</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_height.asp">height</a></td><td style="text-align:left">返回 ImageData 对象的高度</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_imagedata_data.asp">data</a></td><td style="text-align:left">返回一个对象，其包含指定的 ImageData 对象的图像数据</td></tr></tbody></table></div><hr><div class="table-container"><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_createimagedata.asp">createImageData()</a></td><td style="text-align:left">创建新的、空白的 ImageData 对象</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_getimagedata.asp">getImageData()</a></td><td style="text-align:left">返回 ImageData 对象，该对象为画布上指定的矩形复制像素数据</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_putimagedata.asp">putImageData()</a></td><td style="text-align:left">把图像数据（从指定的 ImageData 对象）放回画布上</td></tr></tbody></table></div><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><div class="table-container"><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_globalalpha.asp">globalAlpha</a></td><td style="text-align:left">设置或返回绘图的当前 alpha 或透明值</td></tr><tr><td style="text-align:left"><a href="https://www.w3school.com.cn/tags/canvas_globalcompositeoperation.asp">globalCompositeOperation</a></td><td style="text-align:left">设置或返回新图像如何绘制到已有的图像上</td></tr></tbody></table></div><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><blockquote><p><code>canvas</code> 提供了三种方法绘制矩形：</p></blockquote><ol><li><p><code>fillRect(x, y, width, height)</code></p><p>绘制一个填充的矩形</p></li><li><p><code>strokeRect(x, y, width, height)</code></p><p>绘制一个矩形的边框</p></li><li><p><code>clearRect(x, y, widh, height)</code></p><p>清除指定的矩形区域，然后这块区域会变的完全透明。</p></li></ol><p><strong>案例：绘制两个矩形</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Canvas的基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;myCanvas&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;150px&quot;</span>&gt;</span></span><br><span class="line">        你的浏览器不支持canvas,请升级你的浏览器</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取canvas对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获得 2d 上下文对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置或返回用于填充绘画的颜色、渐变或模式</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgb(200,0,0)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// fillRect(x,y,width,height) 绘制一个填充的矩形</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillRect</span> (<span class="number">10</span>, <span class="number">10</span>, <span class="number">55</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 设置或返回用于笔触的颜色、渐变或模式</span></span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillStyle</span> = <span class="string">&quot;rgba(0, 0, 200, 0.5)&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        ctx.<span class="property">fillRect</span> (<span class="number">50</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">50</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">draw</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLO1p.png" alt=""></p><h2 id="绘制路径-path"><a href="#绘制路径-path" class="headerlink" title="绘制路径(path)"></a>绘制路径(<code>path</code>)</h2><p>图形的基本元素是路径。</p><p> 路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。</p><p>一个路径，甚至一个子路径，都是闭合的。</p><blockquote><p>使用路径绘制图形需要一些额外的步骤：</p></blockquote><ol><li>创建路径起始点</li><li>调用绘制方法去绘制出路径</li><li>把路径封闭</li><li>一旦路径生成，通过描边或填充路径区域来渲染图形。</li></ol><blockquote><p>下面是需要用到的方法：</p></blockquote><ol><li><p><code>beginPath()</code></p><p>新建一条路径，路径一旦创建成功，图形绘制命令被指向到路径上生成路径</p></li><li><p><code>moveTo(x, y)</code></p><p>把画笔移动到指定的坐标<code>(x, y)</code>。相当于设置路径的起始点坐标。</p></li><li><p><code>closePath()</code></p><p>闭合路径之后，图形绘制命令又重新指向到上下文中</p></li><li><p><code>stroke()</code></p><p>通过线条来绘制图形轮廓</p></li><li><p><code>fill()</code></p><p>通过填充路径的内容区域生成实心的图形</p></li></ol><h2 id="绘制线段"><a href="#绘制线段" class="headerlink" title="绘制线段"></a>绘制线段</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">300</span>, <span class="number">80</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(200, 50)的直线.</span></span><br><span class="line">        <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="绘制三角形"><a href="#绘制三角形" class="headerlink" title="绘制三角形"></a>绘制三角形</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">50</span>, <span class="number">50</span>); <span class="comment">//把画笔移动到指定的坐标</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">150</span>, <span class="number">50</span>);  <span class="comment">//绘制一条从当前位置到指定坐标(150, 50)的直线.</span></span><br><span class="line">        ctx.<span class="title function_">lineTo</span>(<span class="number">150</span>, <span class="number">120</span>); <span class="comment">//绘制一条从当前位置到指定坐标(150, 120)的直线.</span></span><br><span class="line">        <span class="comment">//闭合路径。会拉一条从当前点到path起始点的直线。如果当前点与起始点重合，则什么都不做</span></span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLRgv.png" alt=""></p><h2 id="绘制圆弧"><a href="#绘制圆弧" class="headerlink" title="绘制圆弧"></a>绘制圆弧</h2><blockquote><p> 有两个方法可以绘制圆弧：</p></blockquote><ol><li><code>arc(x, y, r, startAngle, endAngle, anticlockwise)</code>:</li></ol><p>以<code>(x, y)</code>为圆心，以<code>r</code>为半径，从 <code>startAngle</code>弧度开始到<code>endAngle</code>弧度结束。<code>anticlosewise</code>是布尔值，<code>true</code>表示逆时针，<code>false</code>表示顺时针。(默认是顺时针)</p><p>注意：</p><ol><li>这里的度数都是弧度。</li><li><code>0</code>弧度是指的<code>x</code>轴正方形</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">radians=(Math.PI/180)*degrees   //角度转换成弧度</span><br></pre></td></tr></table></figure><ol><li><code>arcTo(x1, y1, x2, y2, radius)</code>:</li></ol><p>根据给定的控制点和半径画一段圆弧，最后再以直线连接两个控制点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">80</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        ctx.<span class="title function_">stroke</span>(); <span class="comment">//绘制路径</span></span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">150</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">0</span>, -<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">true</span>);</span><br><span class="line">        ctx.<span class="title function_">closePath</span>();</span><br><span class="line">        ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">        ctx.<span class="title function_">beginPath</span>();</span><br><span class="line">        ctx.<span class="title function_">arc</span>(<span class="number">30</span>, <span class="number">30</span>, <span class="number">50</span>, -<span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="title class_">Math</span>.<span class="property">PI</span> / <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line">        ctx.<span class="title function_">fill</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/22/UFLBIK.png" alt=""></p><h2 id="绘制贝塞尔曲线"><a href="#绘制贝塞尔曲线" class="headerlink" title="绘制贝塞尔曲线"></a>绘制贝塞尔曲线</h2><h3 id="绘制二次贝塞尔曲线"><a href="#绘制二次贝塞尔曲线" class="headerlink" title="绘制二次贝塞尔曲线"></a>绘制二次贝塞尔曲线</h3><p><code>quadraticCurveTo(cp1x, cp1y, x, y)</code>:</p><p>参数1和2：控制点坐标</p><p> 参数3和4：结束点坐标</p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/94917354.jpg" alt=""></p><p><img src="http://lizhenchao.oss-cn-shenzhen.aliyuncs.com/imgs/17-6-4/35792129.jpg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 获取canvas对象</span></span><br><span class="line">    <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myCanvas&#x27;</span>)</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">draw</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canvas?.<span class="property">getContext</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;不支持getContext&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得 2d 上下文对象</span></span><br><span class="line">        <span class="keyword">var</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">        ctx.<span class="title function_">beginPath</span>(); <span class="comment">//新建一条path</span></span><br><span class="line">        ctx.<span class="title function_">moveTo</span>(<span class="number">120</span>, <span class="number">120</span>); <span class="comment">//起始点</span></span><br><span class="line">        <span class="keyword">var</span> cp1x = <span class="number">60</span>, cp1y = <span class="number">40</span>;  <span class="comment">//控制点</span></span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">120</span>, y = <span class="number">70</span>; <span class="comment">// 结束点</span></span><br><span class="line">        <span class="comment">//绘制二次贝塞尔曲线</span></span><br><span class="line">        ctx.<span class="title function_">quadraticCurveTo</span>(cp1x, cp1y, x, y);</span><br><span class="line">        ctx.<span class="title function_">stroke</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="title function_">draw</span>()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> HTML5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的this指向问题</title>
      <link href="/posts/9170747e/"/>
      <url>/posts/9170747e/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript中的this指向问题"><a href="#JavaScript中的this指向问题" class="headerlink" title="JavaScript中的this指向问题"></a>JavaScript中的this指向问题</h1><ul><li>this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定，<strong>this最终指向调用它的对象。</strong></li></ul><h2 id="全局作用域或函数调用下"><a href="#全局作用域或函数调用下" class="headerlink" title="全局作用域或函数调用下"></a>全局作用域或函数调用下</h2><ul><li><strong>全局作用域或者普通函数中 this 指向全局对象 window。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接打印</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">&#x27;HelloWorld&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>)  <span class="comment">// undefined</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)  <span class="comment">// window</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><h2 id="方法调用下"><a href="#方法调用下" class="headerlink" title="方法调用下"></a>方法调用下</h2><ul><li><strong>方法调用中谁调用了，this 指向谁</strong></li><li>当函数被保存为一个对象的属性时，它就可称为这个对象的方法。当一个方法被调用时，this被绑定到这个对象上</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    sayHi : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hi</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="title function_">sayHi</span>()</span><br></pre></td></tr></table></figure><ul><li>因为是A.b调用的这个函数，所以指向b这个对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello and Hi&#x27;</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        a : <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        sayHello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hello，</span></span><br><span class="line">            <span class="comment">// 这里的this指向的对象是b，因为调用这个sayHello()函数是通过b.sayHello()执行的</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// b : &#123;sayHello: ƒ&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">A.<span class="property">b</span>.<span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure><ul><li>x是<a href="https://so.csdn.net/so/search?q=全局变量&amp;spm=1001.2101.3001.7020">全局变量</a>，在全局环境下执行，this指向window</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello and Hi&#x27;</span></span><br><span class="line"><span class="keyword">var</span> A = &#123;</span><br><span class="line">    a : <span class="string">&#x27;Hi&#x27;</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        a : <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">        sayHello : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">a</span>) <span class="comment">// Hello，</span></span><br><span class="line">            <span class="comment">// 这里的this指向的对象是b，因为调用这个sayHello()函数是通过b.sayHello()执行的</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// b : &#123;sayHello: ƒ&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = A.<span class="property">b</span>.<span class="property">sayHello</span></span><br><span class="line"><span class="comment">// Hello and Hi</span></span><br><span class="line"><span class="comment">// window</span></span><br><span class="line"><span class="title function_">x</span>()</span><br></pre></td></tr></table></figure><h2 id="构造函数调用下"><a href="#构造函数调用下" class="headerlink" title="构造函数调用下"></a>构造函数调用下</h2><ul><li>如果在一个函数前面<strong>加上new关键字</strong>来调用，那么就会创建一个连接到该函数的prototype成员的新对象，同时，<strong>this会被绑定到这个新对象上</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// fn()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li>在构造函数，new出一个对象时，this指向这个构造函数，new关键字会改变this的指向</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hello</span></span><br></pre></td></tr></table></figure><ul><li>当用new关键字，返回的是一个对象，this指向的就是那个返回的对象；</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">fn</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><ul><li>如果返回的不是对象，this还是指向函数的实例，<strong>虽然null属于对象，但是返回null依然指向函数实例。</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="string">&#x27;Hi&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> fn;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">a</span>) <span class="comment">// Hi</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数下"><a href="#箭头函数下" class="headerlink" title="箭头函数下"></a><strong>箭头函数下</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">bar</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">foo</span>() <span class="comment">// &#123;foo: ƒ, bar: ƒ&#125;</span></span><br><span class="line">obj.<span class="title function_">bar</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css之animation的使用和介绍</title>
      <link href="/posts/76841e30/"/>
      <url>/posts/76841e30/</url>
      
        <content type="html"><![CDATA[<h1 id="css之animation的使用和介绍"><a href="#css之animation的使用和介绍" class="headerlink" title="css之animation的使用和介绍"></a>css之animation的使用和介绍</h1><h2 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h2><p>animation 属性是一个简写属性，用于设置六个动画属性：</p><ul><li>animation-name</li><li>animation-duration</li><li>animation-timing-function</li><li>animation-delay</li><li>animation-iteration-count</li><li>animation-direction</li></ul><p><strong>注释：</strong>请始终规定 animation-duration 属性，否则时长为 0，就不会播放动画了。</p><div class="table-container"><table><thead><tr><th>默认值：</th><th>none 0 ease 0 1 normal</th></tr></thead><tbody><tr><td>继承性：</td><td>no</td></tr><tr><td>版本：</td><td>CSS3</td></tr><tr><td>JavaScript 语法：</td><td><em>object</em>.style.animation=”mymove 5s infinite”</td></tr></tbody></table></div><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th><th>值</th></tr></thead><tbody><tr><td>@keyframes</td><td>使用@keyframes可以规定动画</td><td></td></tr><tr><td>animation-name</td><td>规定动画的名称</td><td>keyframename</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期花费的秒或毫秒</td><td>time</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线</td><td>linear / ease / ease-in / ease-out / ease-in-out</td></tr><tr><td>animation-delay</td><td>规定动画在启动前的延迟间隔</td><td>time</td></tr><tr><td>animation-iteration-count</td><td>规定动画的播放次数</td><td>n / infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一个周期反向播放</td><td>normal / reverse / alternate / alternate-reverse</td></tr><tr><td>animation-fill-mode</td><td>规定当动画不播放时，要应用到元素的样式</td><td>none / forwards / backwards / both</td></tr><tr><td>animation-play-state</td><td>规定动画播放状态，正在运行或暂停</td><td>running / paused</td></tr></tbody></table></div><h3 id="animation-name"><a href="#animation-name" class="headerlink" title="animation-name"></a>animation-name</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>keyframename</em></td><td style="text-align:left">规定需要绑定到选择器的 keyframe 的名称。</td></tr><tr><td style="text-align:left">none</td><td style="text-align:left">规定无动画效果（可用于覆盖来自级联的动画）。</td></tr></tbody></table></div><h3 id="animation-duration"><a href="#animation-duration" class="headerlink" title="animation-duration"></a>animation-duration</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>time</em></td><td style="text-align:left">规定完成动画所花费的时间。默认值是 0，意味着没有动画效果。</td></tr></tbody></table></div><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th><th style="text-align:left">测试</th></tr></thead><tbody><tr><td style="text-align:left">linear</td><td style="text-align:left">动画从头到尾的速度是相同的。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function">测试</a></td></tr><tr><td style="text-align:left">ease</td><td style="text-align:left">默认。动画以低速开始，然后加快，在结束前变慢。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=2">测试</a></td></tr><tr><td style="text-align:left">ease-in</td><td style="text-align:left">动画以低速开始。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=3">测试</a></td></tr><tr><td style="text-align:left">ease-out</td><td style="text-align:left">动画以低速结束。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=4">测试</a></td></tr><tr><td style="text-align:left">ease-in-out</td><td style="text-align:left">动画以低速开始和结束。</td><td style="text-align:left"><a href="https://www.w3school.com.cn/tiy/c.asp?f=css_animation-timing-function&amp;p=5">测试</a></td></tr><tr><td style="text-align:left">cubic-bezier(<em>n</em>,<em>n</em>,<em>n</em>,<em>n</em>)</td><td style="text-align:left">在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr></tbody></table></div><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>time</em></td><td style="text-align:left">可选。定义动画开始前等待的时间，以秒或毫秒计。默认值是 0。</td></tr></tbody></table></div><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>n</em></td><td style="text-align:left">定义动画播放次数的数值。</td></tr><tr><td style="text-align:left">infinite</td><td style="text-align:left">规定动画应该无限次播放。</td></tr></tbody></table></div><h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">normal</td><td style="text-align:left">默认值。动画按正常播放。</td></tr><tr><td style="text-align:left">reverse</td><td style="text-align:left">动画反向播放。</td></tr><tr><td style="text-align:left">alternate</td><td style="text-align:left">动画在奇数次（1、3、5…）正向播放，在偶数次（2、4、6…）反向播放。</td></tr><tr><td style="text-align:left">alternate-reverse</td><td style="text-align:left">动画在奇数次（1、3、5…）反向播放，在偶数次（2、4、6…）正向播放。</td></tr></tbody></table></div><h3 id="animation-fill-mode"><a href="#animation-fill-mode" class="headerlink" title="animation-fill-mode"></a>animation-fill-mode</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:left">默认值。动画在动画执行之前和之后不会应用任何样式到目标元素。</td></tr><tr><td style="text-align:left">forwards</td><td style="text-align:left">在动画结束后（由 animation-iteration-count 决定），动画将应用该属性值。</td></tr><tr><td style="text-align:left">backwards</td><td style="text-align:left">动画将应用在 animation-delay 定义期间启动动画的第一次迭代的关键帧中定义的属性值。这些都是 from 关键帧中的值（当 animation-direction 为 “normal” 或 “alternate” 时）或 to 关键帧中的值（当 animation-direction 为 “reverse” 或 “alternate-reverse” 时）。</td></tr><tr><td style="text-align:left">both</td><td style="text-align:left">动画遵循 forwards 和 backwards 的规则。也就是说，动画会在两个方向上扩展动画属性。</td></tr></tbody></table></div><h3 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h3><div class="table-container"><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">paused</td><td style="text-align:left">指定暂停动画</td></tr><tr><td style="text-align:left">running</td><td style="text-align:left">指定正在运行的动画</td></tr></tbody></table></div><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;circle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cube&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.circle</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move <span class="number">1s</span> ease-in <span class="number">0s</span> infinite alternate;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cube</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation</span>: move-x <span class="number">2s</span> ease-in <span class="number">0s</span> infinite alternate-reverse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 鼠标经过动画停止 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cube</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">animation-play-state</span>: paused;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 规定动画move是由上到下 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move&#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span> , <span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span> , <span class="number">400px</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 规定动画move-x是由左到右 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@keyframes</span> move-x &#123;</span></span><br><span class="line"><span class="language-css">        <span class="number">0%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="number">100%</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">400px</span>,<span class="number">0</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/18/U8monh.gif" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础2</title>
      <link href="/posts/c3df6b2a/"/>
      <url>/posts/c3df6b2a/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript基础2"><a href="#TypeScript基础2" class="headerlink" title="TypeScript基础2"></a>TypeScript基础2</h1><h2 id="生成tsconfig-json-文件"><a href="#生成tsconfig-json-文件" class="headerlink" title="生成tsconfig.json 文件"></a>生成tsconfig.json 文件</h2><p>这个文件是通过<code>tsc --init</code>命令生成的</p><p>配置详解</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;incremental&quot;</span>: <span class="literal">true</span>, <span class="comment">// TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度</span></span><br><span class="line">  <span class="string">&quot;tsBuildInfoFile&quot;</span>: <span class="string">&quot;./buildFile&quot;</span>, <span class="comment">// 增量编译文件的存储位置</span></span><br><span class="line">  <span class="string">&quot;diagnostics&quot;</span>: <span class="literal">true</span>, <span class="comment">// 打印诊断信息 </span></span><br><span class="line">  <span class="string">&quot;target&quot;</span>: <span class="string">&quot;ES5&quot;</span>, <span class="comment">// 目标语言的版本</span></span><br><span class="line">  <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span>, <span class="comment">// 生成代码的模板标准</span></span><br><span class="line">  <span class="string">&quot;outFile&quot;</span>: <span class="string">&quot;./app.js&quot;</span>, <span class="comment">// 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置&quot;module&quot;: &quot;AMD&quot;,</span></span><br><span class="line">  <span class="string">&quot;lib&quot;</span>: [<span class="string">&quot;DOM&quot;</span>, <span class="string">&quot;ES2015&quot;</span>, <span class="string">&quot;ScriptHost&quot;</span>, <span class="string">&quot;ES2019.Array&quot;</span>], <span class="comment">// TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入&quot;ES2019.Array&quot;,</span></span><br><span class="line">  <span class="string">&quot;allowJS&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许编译器编译JS，JSX文件</span></span><br><span class="line">  <span class="string">&quot;checkJs&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许在JS文件中报错，通常与allowJS一起使用</span></span><br><span class="line">  <span class="string">&quot;outDir&quot;</span>: <span class="string">&quot;./dist&quot;</span>, <span class="comment">// 指定输出目录</span></span><br><span class="line">  <span class="string">&quot;rootDir&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 指定输出文件目录(用于输出)，用于控制输出目录结构</span></span><br><span class="line">  <span class="string">&quot;declaration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成声明文件，开启后会自动生成声明文件</span></span><br><span class="line">  <span class="string">&quot;declarationDir&quot;</span>: <span class="string">&quot;./file&quot;</span>, <span class="comment">// 指定生成声明文件存放目录</span></span><br><span class="line">  <span class="string">&quot;emitDeclarationOnly&quot;</span>: <span class="literal">true</span>, <span class="comment">// 只生成声明文件，而不会生成js文件</span></span><br><span class="line">  <span class="string">&quot;sourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成目标文件的sourceMap文件</span></span><br><span class="line">  <span class="string">&quot;inlineSourceMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中</span></span><br><span class="line">  <span class="string">&quot;declarationMap&quot;</span>: <span class="literal">true</span>, <span class="comment">// 为声明文件生成sourceMap</span></span><br><span class="line">  <span class="string">&quot;typeRoots&quot;</span>: [], <span class="comment">// 声明文件目录，默认时node_modules/@types</span></span><br><span class="line">  <span class="string">&quot;types&quot;</span>: [], <span class="comment">// 加载的声明文件包</span></span><br><span class="line">  <span class="string">&quot;removeComments&quot;</span>:<span class="literal">true</span>, <span class="comment">// 删除注释 </span></span><br><span class="line">  <span class="string">&quot;noEmit&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不输出文件,即编译后不会生成任何js文件</span></span><br><span class="line">  <span class="string">&quot;noEmitOnError&quot;</span>: <span class="literal">true</span>, <span class="comment">// 发送错误时不输出任何文件</span></span><br><span class="line">  <span class="string">&quot;noEmitHelpers&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用</span></span><br><span class="line">  <span class="string">&quot;importHelpers&quot;</span>: <span class="literal">true</span>, <span class="comment">// 通过tslib引入helper函数，文件必须是模块</span></span><br><span class="line">  <span class="string">&quot;downlevelIteration&quot;</span>: <span class="literal">true</span>, <span class="comment">// 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现</span></span><br><span class="line">  <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span>, <span class="comment">// 开启所有严格的类型检查</span></span><br><span class="line">  <span class="string">&quot;alwaysStrict&quot;</span>: <span class="literal">true</span>, <span class="comment">// 在代码中注入&#x27;use strict&#x27;</span></span><br><span class="line">  <span class="string">&quot;noImplicitAny&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许隐式的any类型</span></span><br><span class="line">  <span class="string">&quot;strictNullChecks&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许把null、undefined赋值给其他类型的变量</span></span><br><span class="line">  <span class="string">&quot;strictFunctionTypes&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许函数参数双向协变</span></span><br><span class="line">  <span class="string">&quot;strictPropertyInitialization&quot;</span>: <span class="literal">true</span>, <span class="comment">// 类的实例属性必须初始化</span></span><br><span class="line">  <span class="string">&quot;strictBindCallApply&quot;</span>: <span class="literal">true</span>, <span class="comment">// 严格的bind/call/apply检查</span></span><br><span class="line">  <span class="string">&quot;noImplicitThis&quot;</span>: <span class="literal">true</span>, <span class="comment">// 不允许this有隐式的any类型</span></span><br><span class="line">  <span class="string">&quot;noUnusedLocals&quot;</span>: <span class="literal">true</span>, <span class="comment">// 检查只声明、未使用的局部变量(只提示不报错)</span></span><br><span class="line">  <span class="string">&quot;noUnusedParameters&quot;</span>: <span class="literal">true</span>, <span class="comment">// 检查未使用的函数参数(只提示不报错)</span></span><br><span class="line">  <span class="string">&quot;noFallthroughCasesInSwitch&quot;</span>: <span class="literal">true</span>, <span class="comment">// 防止switch语句贯穿(即如果没有break语句后面不会执行)</span></span><br><span class="line">  <span class="string">&quot;noImplicitReturns&quot;</span>: <span class="literal">true</span>, <span class="comment">//每个分支都会有返回值</span></span><br><span class="line">  <span class="string">&quot;esModuleInterop&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许export=导出，由import from 导入</span></span><br><span class="line">  <span class="string">&quot;allowUmdGlobalAccess&quot;</span>: <span class="literal">true</span>, <span class="comment">// 允许在模块中全局变量的方式访问umd模块</span></span><br><span class="line">  <span class="string">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>, <span class="comment">// 模块解析策略，ts默认用node的解析策略，即相对的方式导入</span></span><br><span class="line">  <span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;./&quot;</span>, <span class="comment">// 解析非相对模块的基地址，默认是当前目录</span></span><br><span class="line">  <span class="string">&quot;paths&quot;</span>: &#123; <span class="comment">// 路径映射，相对于baseUrl</span></span><br><span class="line">    <span class="comment">// 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置</span></span><br><span class="line">    <span class="string">&quot;jquery&quot;</span>: [<span class="string">&quot;node_modules/jquery/dist/jquery.min.js&quot;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;rootDirs&quot;</span>: [<span class="string">&quot;src&quot;</span>,<span class="string">&quot;out&quot;</span>], <span class="comment">// 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错</span></span><br><span class="line">  <span class="string">&quot;listEmittedFiles&quot;</span>: <span class="literal">true</span>, <span class="comment">// 打印输出文件</span></span><br><span class="line">  <span class="string">&quot;listFiles&quot;</span>: <span class="literal">true</span><span class="comment">// 打印编译的文件(包括引用的声明文件)</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）</span></span><br><span class="line"><span class="string">&quot;include&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;src/**/*&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 指定一个排除列表（include的反向操作）</span></span><br><span class="line"> <span class="string">&quot;exclude&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="comment">// 指定哪些文件使用该配置（属于手动一个个指定文件）</span></span><br><span class="line"> <span class="string">&quot;files&quot;</span>: [</span><br><span class="line">   <span class="string">&quot;demo.ts&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h2><p>我们在工作中无法避免<a href="https://so.csdn.net/so/search?q=全局变量&amp;spm=1001.2101.3001.7020">全局变量</a>造成的污染，TypeScript提供了namespace 避免这个问题出现。</p><ul><li>内部模块，主要用于组织代码，避免命名冲突。</li><li>命名空间内的类默认私有</li><li>通过 <code>export</code> 暴露</li><li>通过 <code>namespace</code> 关键字定义</li></ul><p>TypeScript与ECMAScript 2015一样，任何包含顶级<code>import</code>或者<code>export</code>的文件都被当成一个模块。相反地，如果一个文件不带有顶级的<code>import</code>或者<code>export</code>声明，那么它的内容被视为全局可见的（因此对模块也是可见的）</p><p>命名空间（namespace）中通过<code>export</code>将想要暴露的部分导出</p><p>如果不用export 导出是无法读取其值的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">a</span>: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">namespace</span> B &#123;</span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">b</span>: <span class="built_in">number</span> = <span class="number">1000</span></span><br><span class="line">     <span class="keyword">export</span> <span class="keyword">const</span> fn = &lt;T&gt;(<span class="attr">arg</span>: T): <span class="function"><span class="params">T</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">A.<span class="property">a</span></span><br><span class="line">B.<span class="property">b</span></span><br></pre></td></tr></table></figure><h3 id="嵌套命名空间"><a href="#嵌套命名空间" class="headerlink" title="嵌套命名空间"></a>嵌套命名空间</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> B &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Alive</span> &#123;</span><br><span class="line">            <span class="attr">params</span>: <span class="built_in">string</span></span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">params: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">params</span> = params</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> x = A.<span class="property">B</span>.<span class="property">Alive</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title function_">x</span>(<span class="string">&#x27;AA&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="抽离命名空间"><a href="#抽离命名空间" class="headerlink" title="抽离命名空间"></a>抽离命名空间</h3><p>a.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">namespace</span> A &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>b.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;A&#125; <span class="keyword">from</span> <span class="string">&#x27;../observer/index&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(A);</span><br></pre></td></tr></table></figure><h3 id="简化命名空间"><a href="#简化命名空间" class="headerlink" title="简化命名空间"></a>简化命名空间</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> A  &#123;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">namespace</span> B &#123;</span><br><span class="line">        <span class="keyword">export</span> <span class="keyword">const</span> C = <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> X = A.<span class="property">B</span>.<span class="property">C</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(X);</span><br></pre></td></tr></table></figure><h3 id="合并命名空间"><a href="#合并命名空间" class="headerlink" title="合并命名空间"></a>合并命名空间</h3><ul><li>重名的命名空间会合并</li></ul><p><img src="https://m1.im5i.com/2022/09/17/U8mJws.png" alt=""></p><h2 id="三斜线指令"><a href="#三斜线指令" class="headerlink" title="三斜线指令"></a>三斜线指令</h2><ol><li>三斜线指令是包含单个XML标签的单行注释。 注释的内容会做为编译器指令使用。</li><li><code>/// &lt;reference path=&quot;...&quot; /&gt;</code>指令是三斜线指令中最常见的一种。 它用于声明文件间的 <em>依赖</em>。</li><li>类似import，它可以告诉编译器在编译过程中要引入的额外的文件</li><li>三斜线指令仅可放在包含它的文件的<strong>最顶端</strong>。 一个三斜线指令的<strong>前面</strong>只能出现单行或多行注释，这包括其它的三斜线指令</li></ol><h2 id="Mixins混入"><a href="#Mixins混入" class="headerlink" title="Mixins混入"></a>Mixins混入</h2><p>TypeScript混入 Mixins 其实vue也有mixins这个东西 你可以把他看作为合并。</p><h3 id="对象混入"><a href="#对象混入" class="headerlink" title="对象混入"></a>对象混入</h3><p>可以使用es6的Object.assign 合并多个对象。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Name</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Age</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">people1</span>: <span class="title class_">Name</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;AliveSeven&quot;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people2</span>: <span class="title class_">Age</span> = &#123; <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">people3</span>: <span class="title class_">Sex</span> = &#123; <span class="attr">sex</span>: <span class="number">1</span> &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> people = <span class="title class_">Object</span>.<span class="title function_">assign</span>(people1,people2,people3)</span><br></pre></td></tr></table></figure><h3 id="类的混入"><a href="#类的混入" class="headerlink" title="类的混入"></a>类的混入</h3><p>首先声明两个mixins类 （严格模式要关闭不然编译不过）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">changeType</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">type</span> = !<span class="variable language_">this</span>.<span class="property">type</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;七海&#x27;</span>;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面创建一个类，结合了这两个mixins</p><p>首先应该注意到的是，没使用<code>extends</code>而是使用<code>implements</code>。 把类当成了接口</p><p>我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。 这样就能使用mixin带来的便利，虽说需要提前定义一些占位属性</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> A,B&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="built_in">boolean</span></span><br><span class="line">    <span class="attr">changeType</span>:<span class="function">()=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">getName</span>:<span class="function">()=&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，创建这个帮助函数，帮我们做混入操作。 它会遍历mixins上的所有属性，并复制到目标上去，把之前的占位属性替换成真正的实现代码。</p><p><strong>Object.getOwnPropertyNames()可以获取对象自身的属性，除去他继承来的属性，对它所有的属性遍历，它是一个数组，遍历一下它所有的属性名</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Mixins</span>(C, [A, B])</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Mixins</span>(<span class="params">curCls: <span class="built_in">any</span>, itemCls: <span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">    itemCls.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(item.<span class="property"><span class="keyword">prototype</span></span>).<span class="title function_">forEach</span>(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            curCls.<span class="property"><span class="keyword">prototype</span></span>[name] = item.<span class="property"><span class="keyword">prototype</span></span>[name]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="装饰器Decorator"><a href="#装饰器Decorator" class="headerlink" title="装饰器Decorator"></a>装饰器Decorator</h2><h3 id="什么是装饰器"><a href="#什么是装饰器" class="headerlink" title="什么是装饰器"></a>什么是装饰器</h3><ul><li>装饰器是一种特殊类型的声明，它能够被附加到类声明，方法， 访问符，属性或参数上。</li><li>它类似于Java中的那个注解，它会在运行时被调用，被装饰的声明信息做为参数传入。</li></ul><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><p>首先在在 <code>tsconfig.json</code>中开启 <code>experimentalDecorators</code>编译器选项</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;compilerOptions&quot;: &#123;</span><br><span class="line">        &quot;target&quot;: &quot;ES6&quot;,</span><br><span class="line">        &quot;experimentalDecorators&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装饰器可以应用在如下几处地方</p><ol><li>Class</li><li>函数</li><li>函数参数</li><li>属性</li><li>get set 访问器</li></ol><p>案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decorator : <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target : <span class="built_in">Function</span></span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(target)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [class A]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decorator : <span class="title class_">ClassDecorator</span> = <span class="function">(<span class="params">target : <span class="built_in">Function</span></span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在目标函数的原型上面定义一个HelloWorld的函数</span></span><br><span class="line">    <span class="comment">// 函数参数为&lt;T&gt;(str : T):T</span></span><br><span class="line">    target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">HelloWorld</span> = &lt;T&gt;(str : T):<span class="function"><span class="params">T</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@decorator</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&lt;any&gt;a).<span class="title class_">HelloWorld</span>(<span class="string">&#x27;helloworld&#x27;</span>));   <span class="comment">// helloworld</span></span><br></pre></td></tr></table></figure><p>装饰器高阶使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 装饰器传入一个string参数</span></span><br><span class="line"><span class="comment">// 返回一个方法，方法是在类的原型上定义了HelloWorld函数</span></span><br><span class="line"><span class="comment">// HelloWorld返回装饰器传入的参数值</span></span><br><span class="line"><span class="keyword">let</span> decorator = (str : string) : <span class="function"><span class="params">ClassDecorator</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">target : <span class="built_in">Function</span></span>) =&gt;</span> &#123;</span><br><span class="line">        target.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">HelloWorld</span> = <span class="function">() =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> str</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="title function_">decorator</span>(<span class="string">&#x27;AliveSeven&#x27;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((&lt;any&gt;a).<span class="title class_">HelloWorld</span>()) <span class="comment">// AliveSeven</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原生Js手写轮播图</title>
      <link href="/posts/56df3763/"/>
      <url>/posts/56df3763/</url>
      
        <content type="html"><![CDATA[<h1 id="原生Js手写轮播图"><a href="#原生Js手写轮播图" class="headerlink" title="原生Js手写轮播图"></a>原生Js手写轮播图</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然现在网上有很多组件库都有轮播图组件，但是我觉得这个东西还是需要自己动手写下好，里面其实有很多有用的知识点的，而且老是用组件库也不好，万一组件库中的轮播图不符合项目的要求或者UI不合适，诸如此类很多情况，还是自己写一个适合自己的最好。</p><h2 id="功能分析"><a href="#功能分析" class="headerlink" title="功能分析"></a>功能分析</h2><ul><li><p>初级轮播图功能介绍：</p><p>①左右两端有左右按钮；</p><p>②下方有小球指示当前是第几张图片；</p><p>③无切换效果；</p><p>④如果两秒中用户没有点击轮播图，则从左到右自动播放。</p></li></ul><p><img src="https://img.jbzj.com/file_images/article/202208/20228492020984.gif?20227492029" alt=""></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>HTML中需要包括一个大盒子class=wrap，为轮播图的盒子。一张一张的图片可以用无序列表存储，左右按钮使用button，下方圆点也用无序列表，并为每一个圆点设置计数器data-index。</p><h3 id="HTML部分"><a href="#HTML部分" class="headerlink" title="HTML部分"></a><strong>HTML部分</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span>0<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pointList&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- data-index是自定义属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point active&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;point&quot;</span> <span class="attr">data-index</span>=<span class="string">&quot;4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;leftBtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;rightBtn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a><strong>CSS部分</strong></h3><ol><li>给wrap盒子一个宽高，list盒子和它同宽同高</li><li>每一张图片充满盒子，并且都用绝对定位固定在wrap盒子里，让他们有不同的颜色，初始透明度都是0即全透明</li><li>哪个需要展示，哪个的z-index就变大，并且透明度改为1</li><li>左右按钮直接使用定位固定在左右两端，小圆点内部使用浮动，再用定位固定在下端</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 轮播图大盒子 */</span></span><br><span class="line">    <span class="selector-class">.wrap</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*  */</span></span><br><span class="line">    <span class="selector-class">.list</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 每张图片 */</span></span><br><span class="line">    <span class="selector-class">.item</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* 透明度设为0 */</span></span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 被激活的图片透明度设为1，且增大z-index */</span></span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 不同的图片不同的颜色 */</span></span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: yellowgreen</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(<span class="number">5</span>)&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 按钮设置 */</span></span><br><span class="line">    <span class="selector-class">.btn</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">200</span>;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>,-<span class="number">50%</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#leftBtn</span>&#123;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#rightBtn</span>&#123;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 小圆点的设置 */</span></span><br><span class="line">    <span class="selector-class">.pointList</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: fit-content;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">bottom</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.point</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="comment">/* 边框圆的程度 */</span></span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="comment">/* 边框长度 */</span></span><br><span class="line">        <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">        <span class="comment">/* 实现边框 */</span></span><br><span class="line">        <span class="attribute">border-style</span>: solid;</span><br><span class="line">        <span class="comment">/* 圆圈边框颜色 */</span></span><br><span class="line">        <span class="attribute">border-color</span>: slategray;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.point</span><span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>: cadetblue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="Js部分"><a href="#Js部分" class="headerlink" title="Js部分"></a><strong>Js部分</strong></h3><ol><li>获取元素：包括图片、圆点、按钮、轮播图大盒子</li><li>需要一个变量index记录当前图片的索引，并且在每次点击的时候要先将样式清空，再根据索引重新赋值（排他思想）</li><li>点击左右按钮的时候，只需要判断是否为第一张或者最后一张，然后进行+1 -1操作即可</li><li>点击小圆点时，需要记录点击的圆点的data-index，赋值给Index，然后再执行</li><li>定义计时器，当鼠标在wrap内，就取消计时，不在wrap内，就开始计时，两秒以后自动播放</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 轮播图图片</span></span><br><span class="line">    <span class="keyword">let</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.item&#x27;</span>)</span><br><span class="line">    <span class="comment">// 下方圆点</span></span><br><span class="line">    <span class="keyword">let</span> points = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.point&#x27;</span>)</span><br><span class="line">    <span class="comment">// 左右的按钮</span></span><br><span class="line">    <span class="keyword">let</span> leftBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#leftBtn&#x27;</span>)</span><br><span class="line">    <span class="keyword">let</span> rightBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#rightBtn&#x27;</span>)</span><br><span class="line">    <span class="comment">// 轮播图盒子</span></span><br><span class="line">    <span class="keyword">let</span> wrap = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.wrap&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要一个变量index记录当前图片的索引，并且在每次点击的时候要先将样式清空，再根据索引重新赋值（排他思想）</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 移除所有的active</span></span><br><span class="line">    <span class="keyword">var</span> removeActive = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            items[i].<span class="property">className</span> = <span class="string">&quot;item&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; points.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            points[i].<span class="property">className</span> = <span class="string">&quot;point&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若当前处于index时，赋予active</span></span><br><span class="line">    <span class="keyword">var</span> setActive = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">removeActive</span>()</span><br><span class="line">        items[index].<span class="property">className</span> = <span class="string">&quot;item active&quot;</span></span><br><span class="line">        points[index].<span class="property">className</span> = <span class="string">&quot;point active&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点击左边按钮改变index</span></span><br><span class="line">    <span class="keyword">var</span> goLeft = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 处于第一张的时候，按下跳到第五张</span></span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">4</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            index--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置active</span></span><br><span class="line">        <span class="title function_">setActive</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 点击右边按钮</span></span><br><span class="line">    <span class="keyword">var</span> goRight = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">4</span>)&#123;</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置active</span></span><br><span class="line">        <span class="title function_">setActive</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给按钮设置监听事件</span></span><br><span class="line">    leftBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">goLeft</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    rightBtn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">goRight</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 点击小圆点时，需要记录点击的圆点的data-index，赋值给Index，然后再执行</span></span><br><span class="line">    <span class="comment">// 给五个圆点都增加监听事件，用for循环进行一次</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; points.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        points[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> pointIndex = <span class="variable language_">this</span>.<span class="title function_">getAttribute</span>(<span class="string">&#x27;data-index&#x27;</span>)</span><br><span class="line">            index = pointIndex;</span><br><span class="line">            <span class="title function_">setActive</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 定义计时器，当鼠标在wrap内，就取消计时，不在wrap内，就开始计时，两秒以后自动播放。</span></span><br><span class="line">    <span class="keyword">var</span> timer</span><br><span class="line">    <span class="comment">// 设置一个定时器，每两秒触发一次goRight()函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">autoPlay</span>(<span class="params"></span>) &#123;</span><br><span class="line">        timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">goRight</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">autoPlay</span>()</span><br><span class="line">    <span class="comment">// 鼠标移入wrap清除计时器</span></span><br><span class="line">    wrap.<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;清除计时器&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 鼠标移出wrap加入计时器</span></span><br><span class="line">    wrap.<span class="property">onmouseleave</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">autoPlay</span>()</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;加入计时器&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/15/U8Ag1d.gif" alt=""></p><p>参考：<a href="https://www.jb51.net/article/257977.htm">https://www.jb51.net/article/257977.htm</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题</title>
      <link href="/posts/20802113/"/>
      <url>/posts/20802113/</url>
      
        <content type="html"><![CDATA[<h1 id="前端面试题"><a href="#前端面试题" class="headerlink" title="前端面试题"></a>前端面试题</h1><h2 id="HTML5部分"><a href="#HTML5部分" class="headerlink" title="HTML5部分"></a>HTML5部分</h2><h3 id="HTML5新特性有哪些"><a href="#HTML5新特性有哪些" class="headerlink" title="HTML5新特性有哪些"></a>HTML5新特性有哪些</h3><ol><li>Canvas绘图以及SVG绘图</li><li>语义化标签（header、nav、footer、article、section）</li><li>音频、视频（audio、video）API</li><li>拖放（Drag and drop）API</li><li>地理定位（Geolocation）</li><li>本地离线存储（localStorage），长期存储数据，关闭浏览器后不丢失。</li><li>会话储存（sessionStorage），数据在关闭浏览器后自动删除。</li></ol><h3 id="cookie与sessionStorage和localStorage的区别"><a href="#cookie与sessionStorage和localStorage的区别" class="headerlink" title="cookie与sessionStorage和localStorage的区别"></a>cookie与sessionStorage和localStorage的区别</h3><ol><li><p><strong>保存方式</strong></p><p>cookie存放在客户的浏览器上。</p><p>session都在客户端中保存，不参与服务器通讯。</p></li><li><p><strong>生命周期</strong></p><p>cookie可设置失效时间</p><p>localStorage除非手动清除否则永久保存</p><p>sessionStorage关闭当前页面或浏览器关闭后失效</p></li><li><p><strong>存储的大小</strong></p><p>cookie 4kb</p><p>session 5M</p></li><li><p><strong>共同点</strong></p><p>不能存储其他数据类型，只能存储<strong>字符串</strong>数据类型</p><p>如果一定要存储其他数据类型，转成 <strong>json 格式</strong>存储</p></li><li><p><strong>使用方法</strong></p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = <span class="literal">null</span>;</span><br><span class="line">storage.<span class="title function_">setItem</span>(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>)   <span class="comment">//调用setItem方法存储数据</span></span><br><span class="line">storage.<span class="title function_">getItem</span>(<span class="string">&quot;key&quot;</span>)            <span class="comment">//调用getItem方法获取key的值</span></span><br><span class="line">stroage.<span class="title function_">removeItem</span>(<span class="string">&quot;key&quot;</span>)        <span class="comment">//删除key对应的值</span></span><br><span class="line">stroage.<span class="title function_">clear</span>()                   <span class="comment">//清空数据</span></span><br></pre></td></tr></table></figure><h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><p><code>BFC</code>（Block Formatting Context），即块级格式化上下文，它是页面中一个独立的容器，容器中的元素不会影响到外面的元素。</p><h2 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a><strong>触发条件</strong></h2><p>触发<code>BFC</code>的条件包含不限于：</p><ul><li>根元素，即HTML元素</li><li>浮动元素：float值为left、right</li><li>overflow值不为 visible，为 auto、scroll、hidden</li><li>display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid</li><li>position的值为absolute或fixed</li></ul><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><h3 id="CSS选择器的优先级排序"><a href="#CSS选择器的优先级排序" class="headerlink" title="CSS选择器的优先级排序"></a>CSS选择器的优先级排序</h3><h4 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h4><div class="table-container"><table><thead><tr><th>选择器</th><th>表现形式</th></tr></thead><tbody><tr><td>id</td><td>#id，例如：id=“name”，id=“password”</td></tr><tr><td>class</td><td>.class，例如：class=“name”，class=“password”</td></tr><tr><td>标签</td><td>例如：body、div、p、ul、li</td></tr><tr><td>属性</td><td>[type=‘text’]</td></tr><tr><td>伪类</td><td>:hover，例如：链接样式，a元素的伪类，有4种不同的状态：link、visited、active、hover。</td></tr><tr><td>相邻选择器、子代选择器</td><td>+、&gt;，例如：div &gt; p，带大于号 ’&gt;’</td></tr><tr><td>通配符选择器</td><td>*</td></tr></tbody></table></div><p>!important &gt; 行内样式 &gt; id选择器 &gt; 类选择器 || 伪类选择器 || 属性选择器 &gt; 标签选择器 || 伪元素选择器 &gt; 通配符选择器 || 子选择器 || 相邻选择器 &gt; 继承样式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 第零等：!important，大过了其它任何设置。</span><br><span class="line">* 第一等：代表内联样式，如：style=&#x27;&#x27;，权值为1000。</span><br><span class="line">* 第二等：代表ID选择器，如：#content，权值为0100。</span><br><span class="line">* 第三等：代表类、伪类和属性选择器，如.content，权值为0010。</span><br><span class="line">* 第四等：代表标签选择器和伪元素选择器，如&lt;div&gt; &lt;p&gt;，权值为0001。</span><br><span class="line">* 第五等：通配符、子选择器、相邻选择器等的。如*、&gt;、+，权值为0000。</span><br><span class="line">* 第六等：继承的样式没有权值，通配选择器定义的规则优先级高于元素继承过来的规则的优先级。</span><br></pre></td></tr></table></figure><h3 id="垂直居中DIV"><a href="#垂直居中DIV" class="headerlink" title="垂直居中DIV"></a>垂直居中DIV</h3><p>请看这里<a href="https://aliveseven.github.io/posts/2566378a/">css之div盒子居中常用方法</a></p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><ol><li><p><strong>父级盒子添加overflow方法</strong></p><p><strong>优点：</strong>简单、代码少、浏览器支持好</p><p><strong>缺点：</strong>内容被隐藏掉，无法显示需要溢出的元素，不能和position配合使用</p></li><li><p><strong>使用after伪元素清除浮动：</strong></p><p><strong>用法：</strong>给浮动元素父级增加 <code>.clearfix::after（content: ‘’; display: table; clear: both;）</code></p><p><strong>优点：</strong> 符合闭合浮动思想，结构语义化正确，不容易出现怪问题</p><p><strong>缺点：</strong> 由于IE6-7不支持<code>:after</code>，使用<code>zoom:1</code></p></li><li><p><strong>父级盒子定义height：</strong></p><p><strong>优点：</strong> 简单、代码少。</p><p><strong>缺点：</strong>只适合高度固定的布局，要给出精确的高度</p></li><li><p><strong>额外标签法：</strong></p><p><strong>用法：</strong> 在浮动元素后使用一个空元素，并在 CSS 中赋予<code>.clear&#123;clear:both;&#125;</code>属性即可清理浮动。</p><p><strong>优点：</strong> 通俗易懂，书写方便。</p><p><strong>缺点：</strong> 添加许多无意义的标签，结构化比较差。</p></li></ol><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><ol><li><p>盒模型由内容(content)、内边距(padding)、边框(border)、外边距(margin)组成。</p></li><li><p>盒模型分为IE盒模型和W3C标准盒模型。</p></li><li><p>W3C标准盒模型又叫content-box，元素宽度/高度由border+padding+content组成。</p><p>（属性width,height只包含内容content，<strong>不包含</strong>border和padding）</p></li><li><p>IE盒模型又叫border-box，元素宽度/高度由content组成。</p><p>（属性width,height<strong>包含</strong>border和padding，指的是content+padding+border。）</p></li></ol><h3 id="padding和margin的区别"><a href="#padding和margin的区别" class="headerlink" title="padding和margin的区别"></a>padding和margin的区别</h3><ul><li>margin是盒子的外边距，即盒子与盒子之间的距离，而padding是内边距，是盒子的边与盒子内部元素的距离。</li><li>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔</li><li>margin用于布局，可以分开元素，使元素与元素互不相干；padding用于设置元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段“呼吸距离”。</li></ul><p><img src="https://m1.im5i.com/2022/09/22/UFL47H.png" alt=""></p><h3 id="有哪些方式可以隐藏页面元素？区别"><a href="#有哪些方式可以隐藏页面元素？区别" class="headerlink" title="有哪些方式可以隐藏页面元素？区别?"></a>有哪些方式可以隐藏页面元素？区别?</h3><p>通过<code>css</code>实现隐藏元素方法有如下：</p><ul><li>display:none</li><li>visibility:hidden</li><li>opacity:0</li><li>设置height、width模型属性为0</li><li>position:absolute</li><li>clip-path</li></ul><div class="table-container"><table><thead><tr><th style="text-align:left"></th><th style="text-align:left">display: none</th><th style="text-align:left">visibility: hidden</th><th style="text-align:left">opacity: 0</th></tr></thead><tbody><tr><td style="text-align:left">页面中</td><td style="text-align:left">不存在</td><td style="text-align:left">存在</td><td style="text-align:left">存在</td></tr><tr><td style="text-align:left">重排</td><td style="text-align:left">会</td><td style="text-align:left">不会</td><td style="text-align:left">不会</td></tr><tr><td style="text-align:left">重绘</td><td style="text-align:left">会</td><td style="text-align:left">会</td><td style="text-align:left">不一定</td></tr><tr><td style="text-align:left">自身绑定事件</td><td style="text-align:left">不触发</td><td style="text-align:left">不触发</td><td style="text-align:left">可触发</td></tr><tr><td style="text-align:left">transition</td><td style="text-align:left">不支持</td><td style="text-align:left">支持</td><td style="text-align:left">支持</td></tr><tr><td style="text-align:left">子元素可复原</td><td style="text-align:left">不能</td><td style="text-align:left">能</td><td style="text-align:left">不能</td></tr><tr><td style="text-align:left">被遮挡的元素可触发事件</td><td style="text-align:left">能</td><td style="text-align:left">能</td><td style="text-align:left">不能</td></tr></tbody></table></div><h3 id="重绘和重排是什么？如何避免？"><a href="#重绘和重排是什么？如何避免？" class="headerlink" title="重绘和重排是什么？如何避免？"></a>重绘和重排是什么？如何避免？</h3><ol><li><strong>重排</strong>：当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。</li><li><strong>重绘</strong>：当一个元素的外观发生改变，但没有改变布局，重新把元素外观绘制出来的过程，所以重绘跳过了创建布局树和分层的阶段。</li><li>重排需要重新计算布局树，重绘不需要，<strong>重排必定发生重绘</strong>，但是涉及到<strong>重绘不一定要重排</strong>。</li><li><strong>触发重排的方法</strong>： 页面初始渲染、添加/删除可见的DOM元素、改变元素位置、改变元素尺寸、改变元素内容、改变元素字体大小、改变浏览器窗口尺寸、设置 style 属性的值等。</li><li><strong>避免重排的方式</strong>：样式集中改变、使用 absolute 或 fixed 脱离文档流。</li></ol><h3 id="CSS中有哪些长度单位？"><a href="#CSS中有哪些长度单位？" class="headerlink" title="CSS中有哪些长度单位？"></a>CSS中有哪些长度单位？</h3><ol><li>绝对长度单位：<strong>px</strong></li><li>百分比: <strong>%</strong></li><li>相对父元素字体大小单位: <strong>em</strong></li><li>相对于根元素字体大小的单位: <strong>rem</strong></li><li>相对于视口<em>宽度的百分比（100vw即视窗宽度的100%）: <em>*vw</em></em></li><li>相对于视口<em>高度的百分比（100vh即视窗高度的100%）: <em>*vh</em></em></li></ol><h2 id="JavaScript和ES6部分"><a href="#JavaScript和ES6部分" class="headerlink" title="JavaScript和ES6部分"></a>JavaScript和ES6部分</h2><h3 id="ES6新特性？"><a href="#ES6新特性？" class="headerlink" title="ES6新特性？"></a>ES6新特性？</h3><ol><li>新增块级作用域，<strong>let</strong>定义变量和<strong>const</strong>定义常量</li><li>变量的解构赋值</li><li>箭头函数（=&gt;）</li><li>扩展运算符（…）</li><li>模块（import/export）</li><li>类（class/extends）</li><li>Promise</li><li>Proxy</li><li>Symbol</li><li>Set数据结构，类似于数组，但是成员的值都是唯一的，没有重复的值</li><li>includes（）<strong>用于判断数组是否包含给定的值</strong> 返回一个布尔值</li><li>find（）<strong>用于找出第一个符合条件的数组成员</strong></li><li>findindex（）<strong>返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</strong></li></ol><h3 id="Set和Map的区别"><a href="#Set和Map的区别" class="headerlink" title="Set和Map的区别"></a>Set和Map的区别</h3><ol><li>Map是键值对，Set是值的集合，键和值可以是任何的值</li><li>Map可以通过get方法获取值，而Set不能因为它只有值，Set只能用has来判断，返回一个布尔值</li><li>Set的值是唯一的可以做数组去重，Map由于没有格式限制，可以做数据存储</li></ol><h3 id="闭包的理解和使用场景"><a href="#闭包的理解和使用场景" class="headerlink" title="闭包的理解和使用场景"></a>闭包的理解和使用场景</h3><ol><li><strong>理解：</strong>闭包就是函数中包含另一个函数，可以让你在函数外部读取到内部的变量（就是在函数内部再定义一个函数），让这些变量的值始终保持在内存中，可以达到延长变量生命周期的效果，过多使用会导致内存泄漏的问题。</li><li><strong>优点：</strong>可以避免全局变量造成污染。</li><li><strong>缺点：</strong>闭包会常驻内存，增加内存使用量，使用不当会造成内存泄漏。</li><li><strong>特征：</strong>（1）函数嵌套函数。（2）在函数内部可以引用外部的参数和变量。（3）参数和变量不会以垃圾回收机制回收。</li><li><strong>使用场景：</strong>（在创建私有变量和想延长变量的生命周期时会用到闭包）</li></ol><h3 id="JS获取HTML-DOM元素的方法"><a href="#JS获取HTML-DOM元素的方法" class="headerlink" title="JS获取HTML DOM元素的方法"></a>JS获取HTML DOM元素的方法</h3><ul><li>通过ID获取（getElementById）</li><li>通过name属性（getElementsByName）</li><li>通过标签名（getElementsByTagName）</li><li>通过类名（getElementsByClassName）</li><li>获取html的方法（document.documentElement）</li><li>获取body的方法（document.body）</li><li>通过选择器获取一个元素（querySelector）</li><li>通过选择器获取一组元素（querySelectorAll）</li></ul><h3 id="事件捕获和事件冒泡"><a href="#事件捕获和事件冒泡" class="headerlink" title="事件捕获和事件冒泡"></a>事件捕获和事件冒泡</h3><ol><li><strong>事件捕获：</strong>事件从文档根节点流向目标节点，途中会经过目标节点的各个父级节点，并在这些节点上触发捕获事件，直至到达事件的目标节点。</li><li><strong>事件冒泡：</strong>与事件捕获相反，事件会从目标节点流向文档根节点，途中会经过目标节点的各个父级节点，并在这些节点上触发捕获事件，直至到达文档的根节点。整个过程就像水中的气泡一样，从水底向上运动。</li><li>event.stopPropagation() 可以阻止事件流的进一步传播。</li></ol><p><img src="https://m1.im5i.com/2022/09/14/U83Q6v.png" alt=""></p><blockquote><p>注意：stopPropagation()会阻止事件捕获和事件冒泡，但是无法阻止标签的默认行为，例如点击链接任然可以打开对应网页。</p></blockquote><h3 id="Var、-let-、const-区别"><a href="#Var、-let-、const-区别" class="headerlink" title="Var、 let 、const 区别?"></a>Var、 let 、const 区别?</h3><ol><li><p><strong>变量提升：</strong></p><p><code>var</code>声明的变量存在变量提升，即变量可以在声明之前调用，值为<strong>undefined</strong></p><p><code>let</code>和<code>const</code>不存在变量提升，即它们所声明的变量一定要在声明后使用，否则<strong>报错</strong></p></li><li><p><strong>暂时性死区：</strong></p><p><code>var</code>不存在暂时性死区</p><p><code>let</code>和<code>const</code>存在暂时性死区，只有等到声明变量的那一行代码出现，才可以获取和使用该变量</p></li><li><p><strong>块级作用域：</strong></p><p><code>var</code>不存在块级作用域</p><p><code>let</code>和<code>const</code>存在块级作用域</p></li><li><p><strong>重复声明：</strong></p><p><code>var</code>允许重复声明变量</p><p><code>let</code>和<code>const</code>在同一作用域不允许重复声明变量</p></li><li><p><strong>修改声明的变量：</strong></p><p><code>var</code>和<code>let</code>可以</p><p><code>const</code>声明一个只读的变量，一旦声明，就不能改变了</p></li><li><p><strong>使用：</strong></p><p>能用<code>const</code>的情况尽量使用<code>const</code>，其他情况下大多数使用<code>let</code>，避免使用<code>var</code></p></li></ol><h3 id="和-区别"><a href="#和-区别" class="headerlink" title="== 和 ===区别"></a>== 和 ===区别</h3><ul><li>相等操作符（==）会做类型转换，再进行值的比较，全等运算符(===)不会做类型转换</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;123&quot;</span> === <span class="number">123</span>); <span class="comment">// false，不相等，因为数据类型不同</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="number">123</span> === <span class="number">123</span>); <span class="comment">// true，相等，因为数据类型相同值也相同</span></span><br></pre></td></tr></table></figure><ul><li><code>null</code> 和 <code>undefined</code> 比较，相等操作符（==）为 true，全等为 false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = (<span class="literal">null</span> == <span class="literal">undefined</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="literal">null</span>  === <span class="literal">undefined</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><strong>相同点：</strong>都是判定两个<strong>值</strong>是否相等<br><strong>不同点：</strong>== 只比较<strong>值</strong>不比较<strong>类型</strong>，而 ===会判断<strong>类型</strong></li></ul><h3 id="什么是防抖和节流？"><a href="#什么是防抖和节流？" class="headerlink" title="什么是防抖和节流？"></a>什么是防抖和节流？</h3><ol><li><p><strong>防抖：</strong>n 秒后在执行该事件，若在 n 秒内被重复触发，则重新计时</p><p><strong>应用场景：</strong>提交按钮、用户注册时候的手机号验证、邮箱验证</p></li><li><p><strong>节流：</strong> n 秒内只运行一次，若在 n 秒内重复触发，只有一次生效</p><p><strong>应用场景：</strong>射击游戏中的mousedown、keydown事件，文字输入、自动完成的keyup事件</p></li></ol><p>电梯第一个人进来后，等待15秒。如果过程中又有人进来，15秒等待重新计时，直到15秒后开始运送，这是<strong>防抖</strong></p><p>电梯第一个人进来后，15秒后准时运送一次，这是<strong>节流</strong></p><h3 id="原型，原型链"><a href="#原型，原型链" class="headerlink" title="原型，原型链 ?"></a>原型，原型链 ?</h3><ol><li><p><strong>原型：</strong>每个函数对象都有一个 prototype 属性，这个属性就是函数的<strong>原型对象</strong>。 </p></li><li><p><strong>原型链：</strong>当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的<code>__proto__</code><strong>隐式原型</strong>上查找，即它的<strong>构造函数</strong>的<code>prototype</code>，如果还没有找到就会再在<strong>构造函数</strong>的<code>prototype</code>的<code>__proto__</code>中查找，这样一层一层向上查找就会形成一个链式结构，我们称为<strong>原型链</strong>。</p></li><li><p><strong>注：</strong>原型链的形成是真正是靠<code>__proto__</code>而非prototype</p></li></ol><h3 id="深拷贝浅拷贝的区别？"><a href="#深拷贝浅拷贝的区别？" class="headerlink" title="深拷贝浅拷贝的区别？"></a>深拷贝浅拷贝的区别？</h3><ul><li><p><strong>浅拷贝</strong>：创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。如果属性是基本类型，拷贝的就是基本类型的值，如果属性是引用类型，拷贝的就是内存地址 ，所以如果其中一个对象改变了这个地址，就会影响到另一个对象。</p></li><li><p><strong>深拷贝</strong>：将一个对象从内存中完整的拷贝一份出来,从堆内存中开辟一个新的区域存放新对象,且修改新对象不会影响原对象。</p></li></ul><p>总而言之，<strong>浅拷贝</strong>改动拷贝的数组原数组也会变（慎用！项目中很多地方共用的数组都会变）。<strong>深拷贝</strong>修改新数组不会改到原数组。</p><p><strong>浅拷贝</strong>：</p><ol><li><strong>Object.assign()</strong></li><li>函数库lodash的 <strong>_.clone</strong> 方法</li><li>es6的展开运算符 <strong>…</strong></li><li><strong>Array.prototype.concat()</strong></li><li><strong>Array.prototype.slice()</strong></li></ol><p><strong>深拷贝</strong>：</p><ol><li><strong>JSON.parse(JSON.stringify())</strong></li><li>函数库lodash的 <strong>_.cloneDeep</strong> 方法</li><li>jQuery.extend()方法</li><li><strong>手写递归方法</strong></li></ol><h3 id="JavaScript中的数据类型？"><a href="#JavaScript中的数据类型？" class="headerlink" title="JavaScript中的数据类型？"></a>JavaScript中的数据类型？</h3><ol><li><strong>基本类型</strong></li></ol><ul><li><strong>Number</strong>:数值，包括整型和浮点型。</li><li><strong>String</strong>:字符型。</li><li><strong>Undefined</strong>:未定义，声明变量时未赋值。</li><li><strong>Null</strong>：定义为空或者不存在。</li><li><strong>Boolean</strong>：布尔值，true or false。</li><li><strong>Symbol</strong>：独一无二的值。</li></ul><ol><li><strong>引用数据类型</strong></li></ol><ul><li><strong>Object</strong>：对象。</li><li><strong>Array</strong>：数组。</li><li><strong>Function</strong>：函数。</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ol><li><strong>含义</strong>：<strong>异步编程</strong>的一种解决方案，用来<strong>解决回调地狱</strong>。</li><li><strong>三种状态</strong>：pending（进行中）、fulfilled（已成功）和rejected（已失败）</li><li><strong>resolved函数作用</strong>：将Promise对象的状态从“未完成”变为“成功”（即从 pending 变为 resolved）。</li><li><strong>reject函数的作用</strong>：将Promise对象的状态从“未完成”变为“失败”（即从 pending 变为 rejected）。</li><li>Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数。</li></ol><h3 id="GET和POST的区别"><a href="#GET和POST的区别" class="headerlink" title="GET和POST的区别"></a>GET和POST的区别</h3><ul><li>后退/刷新：GET无害，POST数据会被重新提交。</li><li>数据：GET一般是用来获取数据，POST提交数据。</li><li>数据类型：GET只允许ASCII字符，POST无限制。</li><li>数据大小：GET大小有限制（一般来说1024字节），POST理论上来说没有大小限制。</li><li>安全性：GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>可见性：GET参数通过URL传递对所有人可见，POST数据不可见。</li><li>历史保留：GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>书签：GET产生的URL地址可以被收藏为书签，而POST不可以。</li></ul><h3 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h3><h4 id="增"><a href="#增" class="headerlink" title="增"></a><strong>增</strong></h4><ul><li>push() 接收任意数量的参数，并将它们添加到数组末尾</li><li>unshift() 开头添加</li><li>concat() 方法用于连接两个或多个数组。</li></ul><p><strong>实例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hege = [<span class="string">&quot;Cecilie&quot;</span>, <span class="string">&quot;Lone&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> stale = [<span class="string">&quot;Emil&quot;</span>, <span class="string">&quot;Tobias&quot;</span>, <span class="string">&quot;Linus&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> kai = [<span class="string">&quot;Robin&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> children = hege.<span class="title function_">concat</span>(stale,kai);</span><br></pre></td></tr></table></figure><p><strong><code>children</code>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cecilie,Lone,Emil,Tobias,Linus,Robin</span><br></pre></td></tr></table></figure><h4 id="删"><a href="#删" class="headerlink" title="删"></a><strong>删</strong></h4><ul><li>pop() 删除数组的<strong>最后一项</strong></li><li>shift() 删除数组的<strong>第一项</strong></li><li>splice() 传入两个参数，分别是开始位置，删除元素的数量</li><li>slice() 可以用来从数组中提取元素，该方法<strong>不会改变元素数组</strong>，而是将截取到的元素封装到一个新数组返回</li></ul><h4 id="改"><a href="#改" class="headerlink" title="改"></a><strong>改</strong></h4><ul><li>splice() 方法用于添加或删除数组中的元素。</li></ul><p><strong>实例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;Lemon&quot;</span>,<span class="string">&quot;Kiwi&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong><code>fruits</code> 的输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Banana,Orange,Lemon,Kiwi,Apple,Mango</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><em>index</em></td><td style="text-align:left">必需。规定从何处添加/删除元素。 该参数是开始插入和（或）删除的数组元素的下标，必须是数字。</td></tr><tr><td style="text-align:left"><em>howmany</em></td><td style="text-align:left">可选。规定应该删除多少元素。必须是数字，但可以是 “0”。 如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td></tr><tr><td style="text-align:left"><em>item1</em>, …, <em>itemX</em></td><td style="text-align:left">可选。要添加到数组的新元素</td></tr></tbody></table></div><h4 id="查"><a href="#查" class="headerlink" title="查"></a><strong>查</strong></h4><ul><li>indexOf() 返回要查找的元素在数组中的位置，如果没找到则返回 -1</li><li>includes() 返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></li><li>find() 返回第一个匹配的元素</li></ul><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><ol><li>利用ES6的<strong>…new Set()</strong>去重，最方便最简单</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">    <span class="comment">// 利用ES6 Set去重，最简单最方便</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(...<span class="keyword">new</span> <span class="title class_">Set</span>(A))  <span class="comment">// 1 2 3 6 8 9</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>利用双重循环和splice()来去重</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 利用for循环和splice去重</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; A.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; A.<span class="property">length</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(A[i] === A[j])&#123;</span><br><span class="line">                A.<span class="title function_">splice</span>(j,<span class="number">1</span>)</span><br><span class="line">                <span class="comment">// 删除之后，元素少了一个了，要减去1，重新遍历</span></span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(A)  <span class="comment">// (6) [1, 2, 3, 6, 8, 9]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol><li>利用indexOf去重，indexOf() 返回要查找的元素在数组中的位置，如果没找到则返回 -1。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>]</span><br><span class="line">    <span class="comment">// 利用indexOf来去重</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">        <span class="comment">// 判断传过来的数据是不是数组，如果不是，控制台输出错误信息</span></span><br><span class="line">        <span class="comment">// 如果不是数组，Array.isArray(arr)为false，用反号把它变为true</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr))&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;类型错误，不是数组&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是数组，新建一个新的数组来作为去重的数组</span></span><br><span class="line">        <span class="keyword">var</span> array = []</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 如果arr[i]不在新建的数组中，把它加进去，在就不加</span></span><br><span class="line">            <span class="keyword">if</span>(array.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>)&#123;</span><br><span class="line">                array.<span class="title function_">push</span>(arr[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将去重后的数组返回出去</span></span><br><span class="line">        <span class="keyword">return</span> array</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">unique</span>(A)) <span class="comment">// (6) [1, 2, 3, 6, 8, 9]</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：利用<strong>includes()</strong>也和<strong>indexOf()</strong>的方法差不多，includes() 返回要查找的元素在数&gt;组中的位置，找到返回<code>true</code>，否则<code>false</code></p></blockquote><h3 id="JS中new操作符有什么用？"><a href="#JS中new操作符有什么用？" class="headerlink" title="JS中new操作符有什么用？"></a>JS中new操作符有什么用？</h3><ul><li>创建临时对象，并将this指向临时对象</li><li>将构造函数的<strong>原型属性</strong>和<strong>方法</strong>挂载到新对象的<strong>proto</strong>(原型指针)上</li><li>return 临时对象</li></ul><h3 id="排序方式"><a href="#排序方式" class="headerlink" title="排序方式"></a>排序方式</h3><ol><li><strong>冒泡排序</strong>：比较所有相邻元素,如果第一个比第二个大，则交换它们。</li><li><strong>选择排序</strong>：找到数组中的最小值，选中它并将其放置在第一位。</li><li><strong>插入排序</strong>：从第二个数开始往前比，比它大就往后排。</li><li><strong>归并排序</strong>：把数组劈成两半，再递归地对数组进行“分”操作，直到分成一个个单独的数。</li><li><strong>快速排序</strong>：从数组中任意选择一个基准，所有比基准小的元素放到基准前面，比基准大的元素放到基准的后面。</li></ol><h2 id="Vue部分"><a href="#Vue部分" class="headerlink" title="Vue部分"></a>Vue部分</h2><h3 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h3><ul><li>通过数据劫持结合发布-订阅模式，通过Object.defineProperty()为各个属性定义get、set方法，在数据发生改变时，给订阅者发布消息，触发相应的事件回调</li></ul><h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><ul><li>从创建、初始化数据、编译模板、挂载DOM、渲染-更新-渲染、卸载等一系列过程，称为为Vue 实例的生命周期。</li></ul><h3 id="Vue导航守卫的钩子函数有哪些"><a href="#Vue导航守卫的钩子函数有哪些" class="headerlink" title="Vue导航守卫的钩子函数有哪些"></a>Vue导航守卫的钩子函数有哪些</h3><p>全局守卫：</p><ul><li>router.beforeEach：全局前置守卫，进入路由之前</li><li>router.beforeResolve：全局解析守卫，在beforeRouteEnter调用之后调用</li><li>router.afterEach：全局后置钩子，进入路由之后</li></ul><p>路由守卫：</p><ul><li>beforeRouteEnter()：进入路由前</li><li>beforeRouteUpdate()：路由复用同一个组件时</li><li>beforeRouteLeave()：离开当前路由时</li></ul><h3 id="组件之间如何传值"><a href="#组件之间如何传值" class="headerlink" title="组件之间如何传值"></a>组件之间如何传值</h3><ol><li>Vue父子组件之间传值</li></ol><ul><li>子组件通过props来接受数据和通过<code>$emit</code>来触发父组件的自定义事件；</li></ul><ol><li>兄弟组件之间的传值</li></ol><ul><li>建一个公共组件bus.js.。传递方通过事件触发<code>bus.$emit</code>。接收方通过在mounted（）{}生命周期里触发<code>bus.$on</code>。</li></ul><ol><li>可以通过VUEX 来跨组件传参。</li></ol><h3 id="MVVM是什么"><a href="#MVVM是什么" class="headerlink" title="MVVM是什么"></a>MVVM是什么</h3><p>Model-View-ViewModel的缩写，把MVC中的Controller层变成ViewModel层，Model代表数据模型，View代表UI组件，MVVM实现了View层和Model层的自动同步，也即是我们不用手动操纵哦Dom元素</p><p>MVVM与MVC的区别有：</p><p><strong>MVVM与MVC的最大区别就是：它实现了View和Model的自动同步，也就是当Model的数据改变时，我们不用再自己手动操作Dom元素，来改变View的显示，而是改变数据后该数据对应View层显示会自动改变。MVVM并不是用VM完全取代了C，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现</strong></p><h3 id="路由之间如何传参"><a href="#路由之间如何传参" class="headerlink" title="路由之间如何传参"></a>路由之间如何传参</h3><ul><li>通过router-link路由导航跳转传递</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=`/a/$&#123;id&#125;`&gt;routerlink传参&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><ul><li>跳转时使用push方法拼接携带参数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">        path: `/index/$&#123;id&#125;`,</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><ul><li>通过路由属性中的name来确定匹配的路由，通过params来传递参数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">          name: &#x27;index&#x27;,</span><br><span class="line">          params: &#123;</span><br><span class="line">            id: id</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><ul><li>使用path来匹配路由，然后通过query来传递参数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.$router.push(&#123;</span><br><span class="line">          path: &#x27;/index&#x27;,</span><br><span class="line">          query: &#123;</span><br><span class="line">            id: id</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h3 id="Route和router的区别"><a href="#Route和router的区别" class="headerlink" title="Route和router的区别"></a>Route和router的区别</h3><ol><li>router是VueRouter的一个对象，通过Vue.use(VueRouter)和VueRouter构造函数得到一个router的实例对象，这个对象中是一个全局的对象，包含了所有的路由包含了许多关键的对象和属性。例如history对象。</li></ol><ul><li>$router.push({path:’/path’}); 本质是向history栈中添加一个路由，在我们看来是 切换路由，但本质是在添加一个history记录</li><li>$router.replace({path:’/path’}); 替换路由，没有历史记录</li></ul><ol><li>route是一个跳转的路由对象，每一个路由都会有一个route对象，是一个局部的对象，可以获取对应的name,path,params,query等。</li></ol><ul><li>$route.path<br>字符串，等于当前路由对象的路径，会被解析为绝对路径，如 “/index/” 。</li><li>$route.params<br>对象，包含路由中的动态片段和全匹配片段的键值对</li><li>$route.query<br>对象，包含路由中查询参数的键值对。例如，对于 /index?id=1 ，会得到 $route.query.id == 1。</li></ul><h3 id="Vue-路由跳转方式"><a href="#Vue-路由跳转方式" class="headerlink" title="Vue 路由跳转方式"></a>Vue 路由跳转方式</h3><ul><li><strong>router-link 标签跳转</strong></li><li><strong>this.$router.push()</strong></li><li><strong>this.$router.replace()</strong></li><li><strong>this.$router.go(n)</strong>：（0：当前页，-1上一页，+1下一页，n代表整数）</li></ul><h3 id="Vue中key是用来做什么的？为什么不推荐使用index作为key？"><a href="#Vue中key是用来做什么的？为什么不推荐使用index作为key？" class="headerlink" title="Vue中key是用来做什么的？为什么不推荐使用index作为key？"></a>Vue中key是用来做什么的？为什么不推荐使用index作为key？</h3><ol><li>key的作用主要就是为了高效的更新虚拟DOM，使用key值，它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素。它也可以用于强制替换元素/组件而不是重复的使用它。</li><li>当以数组的下标index作为index值时，其中一个元素（如增删改查）发生了变化就有可能导致所有元素的key值发生变化。</li></ol><h3 id="说出至少vue-3个常用事件修饰符"><a href="#说出至少vue-3个常用事件修饰符" class="headerlink" title="说出至少vue 3个常用事件修饰符?"></a>说出至少vue 3个常用事件修饰符?</h3><p>.stop 阻止点击事件冒泡</p><p>.prevent 阻止默认事件</p><p>.once 只执行一次</p><p>.self 只在元素本身触发</p><h3 id="vuex有哪几种属性"><a href="#vuex有哪几种属性" class="headerlink" title="vuex有哪几种属性"></a>vuex有哪几种属性</h3><ol><li>state：vuex的基本数据，用来存储变量。</li><li>mutation：提交更改数据，同步更新状态。</li><li>action：提交mutations，异步操作。</li><li>getter：是store的计算属性。</li><li>modules：模块化vuex，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML5 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中watch和computed的区别</title>
      <link href="/posts/a6899595/"/>
      <url>/posts/a6899595/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中watch和computed的区别"><a href="#Vue中watch和computed的区别" class="headerlink" title="Vue中watch和computed的区别"></a>Vue中watch和computed的区别</h1><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><ol><li>computed 是基于响应性依赖来进行缓存的。<strong>只有依赖数据发生改变</strong>，才会重新进行计算，<strong>computed是计算属性的意思，watch是监听的意思。</strong></li><li><strong>不支持异步</strong>，当 computed 内有异步操作时无效，无法监听数据的变化的值。</li><li>如果函数所依赖的属性没有发生变化，从缓存中读取。</li><li>必须有return返回。</li><li>使用方法和data中的数据一样，但是类似一个执行方法。</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;div id=&quot;app&quot; class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;fullName&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;</span><br><span class="line">        el : &quot;.app&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName : &#x27;Alive&#x27;,</span><br><span class="line">            lastName : &#x27;Seven&#x27;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // 计算属性</span><br><span class="line">        computed : &#123;</span><br><span class="line">            // 定义一个fullName属性用于计算firstName+lastName，并且return出来</span><br><span class="line">            fullName()&#123;</span><br><span class="line">                return this.firstName + this.lastName</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="实例结果："><a href="#实例结果：" class="headerlink" title="实例结果："></a>实例结果：</h3><ul><li>最左边的是firstName，中间的是lastName，最后的是经过computed计算return出来fullName</li></ul><p><img src="https://m1.im5i.com/2022/09/13/U8Jnmv.gif" alt=""></p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><ol><li>只会监听数据的值是否发生改变，而不会去监听数据的地址是否发生改变，要深度监听需要配合deep：true属性使用</li><li>不支持缓存，数据变，直接会触发相应的操作</li><li>watch<strong>可以没有return</strong></li><li>watch中的函数是不需要调用的</li><li><strong>watch支持异步</strong></li><li>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；</li><li>监听数据必须是data中<strong>声明过</strong>或者父组件传递过来的props中的数据</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><strong>computed 是计算属性</strong>，依赖其他属性计算值，并且 computed 的值有缓存，只有当计算值变化才会返回内容。 <strong>watch 监听到值的变化就会执行回调</strong>，在回调中可以进行一些逻辑操作。</li><li>computed函数不能有异步；watch可以</li><li>computed必须有return；watch可以没有</li><li>watch监听的数据要在data中声明过，computed可以不用</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2和Vue3的区别</title>
      <link href="/posts/94db3a18/"/>
      <url>/posts/94db3a18/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue2和Vue3的区别"><a href="#Vue2和Vue3的区别" class="headerlink" title="Vue2和Vue3的区别"></a>Vue2和Vue3的区别</h1><h2 id="数据双向绑定原理"><a href="#数据双向绑定原理" class="headerlink" title="数据双向绑定原理"></a>数据双向绑定原理</h2><ol><li><strong>Vue2</strong>使用的是<strong>Object.defineProperty()</strong>进行数据劫持，结合<strong>发布订阅</strong>的方式实现。</li><li><strong>Vue3</strong>使用的是<strong>Proxy代理</strong>，使用<strong>ref或者reactive</strong>将数据转化为响应式数据</li></ol><h3 id="使用proxy代理的优势"><a href="#使用proxy代理的优势" class="headerlink" title="使用proxy代理的优势"></a>使用proxy代理的优势</h3><ol><li>defineProperty只能监听某个属性，不能对全对象监听</li><li>可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）</li><li>可以监听数组，不用再去单独的对数组做特异性操作，通过Proxy可以直接拦截所有对象类型数据的操作。</li></ol><h2 id="数据和方法的定义"><a href="#数据和方法的定义" class="headerlink" title="数据和方法的定义"></a>数据和方法的定义</h2><ol><li><p>Vue2使用的是选项类型API（Options API），Vue3使用的是合成型API（Composition API）</p></li><li><p>Vue2：</p><p>data() { return {}; }, methods:{ }</p></li><li><p>Vue3：</p><p>数据和方法都定义在setup中，并return出来，在vue3中this是undefined，所以在setup中不能用this</p></li></ol><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><div class="table-container"><table><thead><tr><th>vue2</th><th>vue3</th><th>说明</th></tr></thead><tbody><tr><td>beforeCreate</td><td>setup()</td><td>组件创建之前</td></tr><tr><td>created</td><td>setup()</td><td>组件创建完成</td></tr><tr><td>beforeMount</td><td>onBeforeMount</td><td>组件挂载之前</td></tr><tr><td>mounted</td><td>onMounted</td><td>组件挂载完成</td></tr><tr><td>beforeUpdate</td><td>onBeforeUpdate</td><td>数据更新，虚拟DOM打补丁之前</td></tr><tr><td>updated</td><td>onUpdated</td><td>数据更新，虚拟DOM渲染完成</td></tr><tr><td>beforeDestroy</td><td>onBeforeUnmount</td><td>组件销毁之前</td></tr><tr><td>destroyed</td><td>onUnmounted</td><td>组件销毁后</td></tr><tr><td>activated</td><td>onActivated</td><td></td></tr><tr><td>deactivated</td><td>onDeactivated</td></tr></tbody></table></div><h2 id="指令与插槽"><a href="#指令与插槽" class="headerlink" title="指令与插槽"></a>指令与插槽</h2><ol><li>vue2中使用slot可以直接使用slot,而vue3中必须使用v-slot的形式</li><li>v-for与v-if在vue2中优先级高的是v-for指令，vue3中v-if优先级更高</li><li>vue3中移除keyCode作为v-on的修饰符，当然也不支持config.keyCodes</li><li>vue3中移除v-on.native修饰符</li><li><strong>vue3中移除过滤器filter</strong></li><li>vue3在组件模板<code>&lt;template/&gt;</code>中，不需要跟根节点<code>&lt;div/&gt;</code>，就是说在组件可以拥有多个根节点。</li></ol><h2 id="Composition-API-组合API"><a href="#Composition-API-组合API" class="headerlink" title="Composition API (组合API)"></a>Composition API (组合API)</h2><p>Vue2和Vue3最大的区别就是Vue3使用了Composition API (组合api)</p><p>Vue2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">// 数据</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;&#125;,</span><br><span class="line">    // 方法</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    components:&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;h</span><br></pre></td></tr></table></figure><p>Vue3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">这样代码会更加简洁和整洁。</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">        // 数据 和 方法都在setup里面使用</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="全局API改动"><a href="#全局API改动" class="headerlink" title="全局API改动"></a>全局API改动</h2><div class="table-container"><table><thead><tr><th>2.x 全局 API</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config</td><td>app.config</td></tr><tr><td>Vue.config.productionTip</td><td><em>removed</em> 已移除</td></tr><tr><td>Vue.config.ignoredElements</td><td>app.config.isCustomElement</td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.version</td><td>app.version</td></tr><tr><td>Vue.filter</td><td><em>removed</em> 已移除</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr><tr><td>Vue.extend</td><td><em>removed</em> 已移除</td></tr></tbody></table></div><blockquote><p><code>app</code>通过<code>createApp</code>方法创建。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createApp &#125; from &quot;vue&quot;;</span><br><span class="line"></span><br><span class="line">const app = createApp(App);</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>vue经历从2.0到3.0更新之后，简而言之就是变得更轻，更快，有更好的TypeScript支持，使用起来更加方便</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android Fragment（底部导航）的使用</title>
      <link href="/posts/f8b76465/"/>
      <url>/posts/f8b76465/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-Fragment（底部导航）的使用"><a href="#Android-Fragment（底部导航）的使用" class="headerlink" title="Android Fragment（底部导航）的使用"></a>Android Fragment（底部导航）的使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>Fragment 是 activity 的界面中的一部分或一种行为。</li><li>你可以把多个 Fragment 们组合到一个activity中来创建一个多面界面并且你可以在多个 activity 中重用一个Fragment。</li><li>你可以把 Fragment 认为模块化的一段activity，它具有自己的生命周期，接收它自己的事件，并可以在 activity 运行时被添加或删除。同时，使用 Fragment 可以 轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸，从手机到平板电脑。 Fragment 替代 TabActivity 做导航，性能更好。</li></ul><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><h3 id="开启viewBinding"><a href="#开启viewBinding" class="headerlink" title="开启viewBinding"></a>开启viewBinding</h3><ol><li>首先新建好项目之后，在<strong>build.gradle</strong>文件里面加入一行东西</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开启viewBinding</span></span><br><span class="line">buildFeatures &#123;</span><br><span class="line">    viewBinding <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/08/UqGgOh.png" alt=""></p><ul><li>在设置这个之后，通过<strong>View Binding替换findViewById。</strong>，可以更好地进行视图绑定</li></ul><h3 id="新建底部导航选项"><a href="#新建底部导航选项" class="headerlink" title="新建底部导航选项"></a>新建底部导航选项</h3><ol><li>在res文件夹里面新建一个名叫<strong>menu</strong>的文件夹，再新建一个<strong>Menu Resource File</strong>，填好菜单名之后即可</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqejXy.png" alt=""></p><ol><li>再在res文件夹里面新建一个名叫<strong>navigation</strong>的文件夹，然后新建一个<strong>Navigation Resource File</strong>，填好新建文件名即可，这里我填了：mobile_navigation</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeZjh.png" alt=""></p><p><img src="https://m1.im5i.com/2022/09/10/Uqeh9X.png" alt=""></p><ol><li>新建好文件之后，关掉再重新双击mobile_navigation，应该会弹出个警告，我们点OK就行了，弄好之后页面应该是下面这样的。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqecnM.png" alt=""></p><h3 id="新建导航页面"><a href="#新建导航页面" class="headerlink" title="新建导航页面"></a>新建导航页面</h3><ol><li>这里我们新建三个空页面作为底部导航要切换的Fragment页面</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqeq53.png" alt=""></p><ol><li>对三个空页面加个text元素作区别</li></ol><p><img src="https://m1.im5i.com/2022/09/10/Uqe8w7.png" alt=""></p><ol><li>点击menu，增加底部导航选项item，<strong>注意：item的id必须与导航图mobile_navigation.xml中对应节点（fragment）的id一致（相同）</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeVip.png" alt=""></p><ol><li>返回主页面，找到<strong>NavHostFragment</strong>控件，增加，作为导航切换的地方。增加<strong>BottomNavigationView</strong>控件，增加，作为导航切换的底部选项栏。</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqeWcv.png" alt=""></p><ol><li>选择对应的导航xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJTvf.png" alt=""></p><ol><li>回到menu.xml文件，给每个item增加导航icon和id，注意：id必须与导航图<strong>mobile_navigation.xml</strong>中对应节点（fragment）的id一致（相同），<strong>id的格式为 @+id 加上导航页面节点的id</strong></li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ39h.png" alt=""></p><ol><li>回到主页面，点击<strong>BottomNavigationView</strong>，找到<strong>menu</strong>选项，加入我们刚刚配置好的menu.xml文件</li></ol><p><img src="https://m1.im5i.com/2022/09/10/UqJ41X.png" alt=""></p><p><img src="https://m1.im5i.com/2022/09/10/UqJX5M.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux、MySQL、Git常用命令</title>
      <link href="/posts/f3b9a43e/"/>
      <url>/posts/f3b9a43e/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux、MySQL、Git常用命令"><a href="#Linux、MySQL、Git常用命令" class="headerlink" title="Linux、MySQL、Git常用命令"></a>Linux、MySQL、Git常用命令</h1><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a>目录和文件</h3><ol><li><strong>pwd</strong> //显示当前工作目录</li><li><strong>mkdir</strong> mydir  //创建工作目录</li><li><strong>cd</strong> mydir  //更改工作目录</li><li><strong>rmdir</strong> mydir //删除工作目录</li><li><strong>touch</strong> myfile  //创建文件</li><li><strong>mv</strong> myfile mydir  //移动目录或文件</li><li><strong>cp</strong> myfile myfir  //复制目录或文件</li><li><strong>rm</strong> -rf mydir  //删除目录或文件</li><li><strong>ls</strong> //列出所有文件和目录</li><li><strong>ls -a</strong> //查看所有文件</li><li><strong>ls -l</strong> //详细显示</li></ol><h3 id="文件内容显示和处理"><a href="#文件内容显示和处理" class="headerlink" title="文件内容显示和处理"></a>文件内容显示和处理</h3><ol><li><strong>cat</strong> &gt; myfile  //创建文件并编辑内容（ctrl+D结束编辑）</li><li><strong>cat -n</strong> myfile  //查看文件</li><li><strong>sort</strong> myfile  //对文件内容进行排序</li><li><strong>sort -r</strong> myfile  //逆序</li><li><strong>uniq</strong> myfile  //检查文件中的重复内容</li><li><strong>cut</strong> -b(-c)(-d) 2(3) myfile  //对文件内容进行剪切</li><li><strong>paste</strong> myfile02 myfile01 //对文件内容进行粘贴 02-）01</li></ol><h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><ol><li><strong>zip</strong> myfile.zip myfile  //压缩</li><li><strong>zip -d</strong> myfile.zip myfile  //添加</li><li><strong>zip -m</strong> myfile.zip myfile  //删除</li><li><strong>unzip -o</strong> myfile.zip  //解压（覆盖）</li><li><strong>unzip -n</strong> myfile.zip  //解压（不覆盖）</li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ol><li><strong>create</strong> database name  //创建数据库</li><li><strong>use</strong> database name  // 选择数据库</li><li><strong>drop</strong> database name // 直接删除数据库，不提醒</li><li><p><strong>insert into</strong> 表名(列1，列2，列3，列4，…) values(值，值，值)  // 增 Insert</p><ul><li>例子 ：insert into student(name,sex,age) values(‘张三’，18，’男’)</li></ul></li><li><strong>delete from</strong> 表名 <strong>where</strong> 列=值                                           <strong>// 删delete</strong><ul><li>例子 ：<strong>delete from</strong> student where id=1</li></ul></li><li><strong>update</strong> 表名 set 列=值，列=值，…. where…                    <strong>// 改 update</strong><ul><li>例子 ：<strong>update</strong> student <strong>set</strong> name = ‘张三’ <strong>where</strong> id=1 </li></ul></li><li><strong>select</strong> <em> from 表名                                                                 <em>*// 查询所有</em></em><ul><li>例子：<strong>select</strong> * from student(查询student表中所有列)</li><li>例子2  ：<strong>select</strong> * from student where id =1(表示查询student表中id=1的学生的所有列)</li><li>#去重查询 <strong>DISTINCT</strong>。例子：查询出表当中有哪些性别  SELECT <strong>DISTINCT</strong> sex FROM student</li><li>模糊查询，使用<strong>like</strong>。select <em> from student where name <em>*like</em></em> ‘%王’ 表示模糊查询name以王结束的</li><li>排序查询 <strong>ORDER BY</strong> 倒序关键字<strong>DESC</strong></li></ul></li></ol><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ol><li>git init  // 初始化</li><li>git add // 在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动</li><li>git commit -m “提交的备注信息”  // 提交到仓库</li><li>git remote add origin git@github.com:帐号名/仓库名.git  //  远程仓库</li><li>git push -u origin master  //  将本地分支的更新内容，全部推送至远程仓库 master 分支</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript基础</title>
      <link href="/posts/dc8ffbe9/"/>
      <url>/posts/dc8ffbe9/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript基础"><a href="#TypeScript基础" class="headerlink" title="TypeScript基础"></a>TypeScript基础</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>TS是JS的超集，所以JS基础的类型都包含在内</p><ul><li><strong>首先安装 npm install typescript -g</strong></li></ul><p>安装完之后，运行<strong>tsc -v</strong>可以看到当前ts的版本号</p><ul><li>nodejs环境执行ts文件</li><li><strong>npm i @types/node —save-dev </strong>（node环境支持的依赖必装）</li><li><strong>npm i ts-node —g</strong></li></ul><h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>基础类型：Boolean、Number、String、<code>null</code>、<code>undefined</code> 以及 ES6 的 Symbol 和 ES10 的 BigInt。</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><ul><li>用string来定义，其中可以用`来定义ES6中的模板字符串，${expr}用来表示在模板字符串中的嵌入表达式。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str : <span class="built_in">string</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 : <span class="built_in">string</span> = <span class="string">`web <span class="subst">$&#123;str&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul><li>支持十六<a href="https://so.csdn.net/so/search?q=进制&amp;spm=1001.2101.3001.7020">进制</a>、十进制、八进制和二进制；</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notANumber : <span class="built_in">number</span> = <span class="title class_">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> num : <span class="built_in">number</span> = <span class="number">1234</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> infinityNumber : <span class="built_in">number</span> = <span class="title class_">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> decimal : <span class="built_in">number</span> = <span class="number">8</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> hex : <span class="built_in">number</span> = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> binary : <span class="built_in">number</span> = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> octal : <span class="built_in">number</span> = <span class="number">0o744</span>;<span class="comment">//八进制s</span></span><br></pre></td></tr></table></figure><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> b : <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b2 : <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b3 : <span class="built_in">boolean</span> = <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个Boolean对象</span></span><br><span class="line"><span class="keyword">let</span> b4 : <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br></pre></td></tr></table></figure><h3 id="空值类型"><a href="#空值类型" class="headerlink" title="空值类型"></a>空值类型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n : <span class="built_in">void</span> = <span class="literal">undefined</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> m : <span class="built_in">void</span> = <span class="literal">null</span> <span class="comment">// 严格模式下不允许</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n,m) <span class="comment">// undefined,null</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 空类型函数，不需要return</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) : <span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>) <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><ul><li><code>void</code> 类型的用法，主要是用在我们<strong>不希望</strong>调用者关心函数返回值的情况下，比如通常的<strong>异步回调函数</strong></li></ul><h4 id="void和undefined和null的区别"><a href="#void和undefined和null的区别" class="headerlink" title="void和undefined和null的区别"></a>void和undefined和null的区别</h4><ul><li>void类型不能赋值为undefined</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写会报错 void类型不可以分给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样是没问题的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br><span class="line"> </span><br><span class="line"><span class="comment">//或者这样的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">str = test</span><br></pre></td></tr></table></figure><hr><p>注意：如果你配置了tsconfig.json 开启了严格模式，<strong>null 不能 赋予 void 类型</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;compilerOptions&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;strict&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意类型"><a href="#任意类型" class="headerlink" title="任意类型"></a>任意类型</h3><ul><li>没有特定要哪个类型的时候，可以用any进行声明，而且可以随意切换类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">any</span> = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;AliveSeven&#x27;</span></span><br><span class="line">a = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>声明变量的时候没有指定任意类型默认为any</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line">a = <span class="number">123</span></span><br><span class="line">a = <span class="string">&#x27;Aliving&#x27;</span></span><br><span class="line">a = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注意：如果使用any 就失去了TS类型检测的作用</p><p>TypeScript 3.0中引入的 <strong>unknown</strong> 类型，它是<strong>any</strong>类型对应的安全类型，比<strong>any</strong>更安全。</p><ul><li>unknown类型比any更加严格当你要使用any 的时候可以尝试使用unknow</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span>;</span><br><span class="line"> </span><br><span class="line">value = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">value = [];               <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br><span class="line"><span class="comment">//unknown类型不能赋值给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样就没问题 any类型是可以的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">any</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>:<span class="built_in">string</span> = a   </span><br><span class="line"> </span><br><span class="line"><span class="comment">//unknown可赋值对象只有unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bbb</span>:<span class="built_in">unknown</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aaa</span>:<span class="built_in">any</span>= <span class="string">&#x27;456&#x27;</span></span><br><span class="line"> </span><br><span class="line">aaa = bbb</span><br></pre></td></tr></table></figure><h2 id="接口和对象类型"><a href="#接口和对象类型" class="headerlink" title="接口和对象类型"></a>接口和对象类型</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul><li>在ts中，我们定义对象的方式要用<strong>interface</strong>（接口）。</li><li>接口的作用：在面向对象的编程中，接口是一种规范的定义，它定义了行为和动作的规范，在程序设计里面，接口起到一种<strong>限制和规范</strong>的作用。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性</span></span><br><span class="line"><span class="comment">//使用接口约束的时候不能多一个属性也不能少一个属性</span></span><br><span class="line"><span class="comment">//必须与接口保持一致</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;213&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同名的接口，会合并</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名interface  可以合并</span></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    age : <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj) <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,age : 20&#125;</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ul><li>B接口继承了A接口，那么B接口的对象要有A接口的变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="keyword">interface</span> A&#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> B <span class="keyword">extends</span> A&#123;</span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> obj : B = &#123;</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line">    name : <span class="string">&quot;AliveSeven&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)  <span class="comment">// &#123; age: 20, name: &#x27;AliveSeven&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="可选属性：-操作符"><a href="#可选属性：-操作符" class="headerlink" title="可选属性：?操作符"></a>可选属性：?操作符</h3><ul><li>?操作符用于声明<strong>可有可无的</strong>变量</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性的含义是该属性可以不存在</span></span><br><span class="line"><span class="comment">//所以说这样写也是没问题的</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="built_in">string</span>,</span><br><span class="line">    b?:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span>  = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="任意属性-propName-string"><a href="#任意属性-propName-string" class="headerlink" title="任意属性 [propName: string]"></a>任意属性 [propName: string]</h3><p>注意：<strong>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</strong>：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在这个例子当中我们看到接口中并没有定义sex但是并没有报错</span></span><br><span class="line"><span class="comment">//应为我们定义了[propName: string]: any;</span></span><br><span class="line"><span class="comment">//允许添加新的任意属性</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name : &#x27;AliveSeven&#x27;,sex : &#x27;boy&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="只读属性-readonly"><a href="#只读属性-readonly" class="headerlink" title="只读属性 readonly"></a>只读属性 readonly</h3><ul><li>readonly 只读属性是不允许被赋值的只能读取</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写是会报错的</span></span><br><span class="line"><span class="comment">//因为sex是只读的不允许重新赋值</span></span><br><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">a.<span class="property">sex</span> = <span class="string">&#x27;girl&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="增加函数"><a href="#增加函数" class="headerlink" title="增加函数"></a>增加函数</h3><ul><li>接口里面可以声明函数</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A  &#123;</span><br><span class="line">    [propName : <span class="built_in">string</span>] : <span class="built_in">any</span></span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age? : <span class="built_in">number</span></span><br><span class="line">    <span class="keyword">readonly</span> sex : <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">    <span class="title function_">exam</span>() : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = &#123;</span><br><span class="line">    name : <span class="string">&#x27;AliveSeven&#x27;</span>,</span><br><span class="line">    sex : <span class="string">&#x27;boy&#x27;</span>,</span><br><span class="line">    <span class="attr">exam</span>:<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)  <span class="comment">// &#123; name: &#x27;AliveSeven&#x27;, sex: &#x27;boy&#x27;, exam: [Function: exam] &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h2><ul><li>常见的声明数组方法👇</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a : <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   <span class="comment">// 数字类型数组</span></span><br><span class="line"><span class="keyword">let</span> b : <span class="built_in">string</span>[] = [<span class="string">&#x27;Alive&#x27;</span>,<span class="string">&#x27;Seven&#x27;</span>]  <span class="comment">//字符串类型数组</span></span><br><span class="line"><span class="keyword">let</span> c : <span class="built_in">boolean</span>[] = [<span class="literal">true</span> , <span class="literal">false</span>]  <span class="comment">// 布尔类型数组</span></span><br><span class="line"><span class="keyword">let</span> d : <span class="built_in">any</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="string">&#x27;Love&#x27;</span>,<span class="literal">true</span>]   <span class="comment">// 任意类型数组</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a,b,c,d)  <span class="comment">// [ 1, 2, 3 ] [ &#x27;Alive&#x27;, &#x27;Seven&#x27; ] [ true, false ] [ 1, 2, &#x27;Love&#x27;, true ]</span></span><br></pre></td></tr></table></figure><ul><li>数组泛型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr : <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">66</span> , <span class="number">77</span> , <span class="number">88</span>]</span><br><span class="line"><span class="keyword">let</span> str : <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;Love&#x27;</span> , <span class="string">&#x27;You&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> x : <span class="title class_">Array</span>&lt;<span class="built_in">boolean</span>&gt; = [<span class="literal">true</span> , <span class="literal">false</span>]</span><br><span class="line"><span class="keyword">let</span> y : <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt; = [<span class="number">1</span> , <span class="literal">true</span> , <span class="string">&#x27;Fly&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多维数组</span></span><br><span class="line"><span class="keyword">let</span> z : <span class="title class_">Array</span>&lt;<span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;&gt; = [[<span class="number">1</span> , <span class="number">2</span> , <span class="string">&#x27;Alive&#x27;</span>] , [<span class="number">66</span> , <span class="string">&#x27;Seven&#x27;</span> , <span class="string">&#x27;77&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr,str,x,y) <span class="comment">//  [ 66, 77, 88 ] [ &#x27;Love&#x27;, &#x27;You&#x27; ] [ true, false ] [ 1, true, &#x27;Fly&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(z)  <span class="comment">// [ [ 1, 2, &#x27;Alive&#x27; ], [ 66, &#x27;Seven&#x27;, &#x27;77&#x27; ] ]</span></span><br></pre></td></tr></table></figure><h3 id="用接口表示数组"><a href="#用接口表示数组" class="headerlink" title="用接口表示数组"></a>用接口表示数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    [index : <span class="built_in">number</span>] : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : A = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// [ 1,2,3,4 ]</span></span><br></pre></td></tr></table></figure><h3 id="arguments类数组"><a href="#arguments类数组" class="headerlink" title="arguments类数组"></a>arguments类数组</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="comment">//错误的arguments 是类数组不能这样定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="built_in">number</span>[] = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Arr</span>(<span class="params">...args:<span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) </span><br><span class="line">    <span class="comment">//ts内置对象IArguments 定义</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">IArguments</span> = <span class="variable language_">arguments</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Arr</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArguments</span> &#123;</span><br><span class="line">[<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">any</span>;</span><br><span class="line"><span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line"><span class="attr">callee</span>: <span class="title class_">Function</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数扩展"><a href="#函数扩展" class="headerlink" title="函数扩展"></a>函数扩展</h2><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><ul><li>fn = (函数变量1 , 函数变量2 …) : 函数类型 =&gt; { 函数返回值 }</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn = (函数变量1 , 函数变量2 , 可选函数变量3 ) : 函数类型 =&gt; &#123; 函数返回值 &#125;</span></span><br><span class="line"><span class="keyword">const</span> fn = (name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex? : <span class="built_in">string</span>) : <span class="function"><span class="params">string</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (name + age + sex)  <span class="comment">// 返回name+age+sex组合字符串</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a : <span class="built_in">string</span> = <span class="title function_">fn</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// AliveSeven20undefined</span></span><br></pre></td></tr></table></figure><ul><li>可以接口来约束方法变量和类型</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    age : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = (a : A) : <span class="function"><span class="params">A</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x : A = &#123; name : <span class="string">&#x27;步君&#x27;</span> , age : <span class="number">21</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>( x ) <span class="comment">// &#123; name: &#x27;步君&#x27;, age: 21 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><ul><li>重载是<strong>方法名字相同</strong>，而<strong>参数不同</strong>，返回类型可以相同也可以不同。</li><li>参数类型不同时，应设置为 <strong>any</strong>。</li><li>参数数量不同时，可以将不同的参数设置为<strong>可选</strong>。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">string</span>, params2: <span class="built_in">number</span></span>): <span class="built_in">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: <span class="built_in">any</span>, params2?: <span class="built_in">any</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params2)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>,<span class="number">456</span>)</span><br></pre></td></tr></table></figure><h2 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机</span></span><br><span class="line"><span class="comment">//所以我们就可以使用联合类型支持座机字符串</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写是会报错的因为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: <span class="built_in">number</span> | <span class="built_in">string</span>  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>函数使用联合类型：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="attr">something</span>:<span class="built_in">number</span> | <span class="built_in">boolean</span>):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> !!something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h2><ul><li><p>多种类型的集合，联合对象将具有所联合类型的所有成员</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Boy</span>&#123;</span><br><span class="line">    <span class="attr">sex</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">AliveSeven</span> = (<span class="params">boy: People &amp; Boy</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">age</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">height</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boy.<span class="property">sex</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AliveSeven</span>(&#123;<span class="attr">age</span>: <span class="number">21</span>,<span class="attr">height</span>: <span class="number">180</span>,<span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">// 21</span></span><br><span class="line"><span class="comment">// 180 </span></span><br><span class="line"><span class="comment">// male</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">       <span class="attr">run</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">       <span class="attr">build</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (<span class="keyword">type</span> <span class="keyword">as</span> A).<span class="property">run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以使用类型断言来推断他传入的是A接口的值</span></span><br></pre></td></tr></table></figure><h3 id="使用any临时断言"><a href="#使用any临时断言" class="headerlink" title="使用any临时断言"></a>使用any临时断言</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> <span class="built_in">any</span>).<span class="property">abc</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span></span><br></pre></td></tr></table></figure><h2 id="as-const"><a href="#as-const" class="headerlink" title="as const"></a>as const</h2><ul><li><p>是对字面值的<strong>断言</strong>，与const直接定义常量是有区别的</p></li><li><p>如果是普通类型跟直接const 声明是一样的</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="string">&#x27;AliveSeven&#x27;</span></span><br><span class="line">A = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> B = <span class="string">&#x27;AliveSeven&#x27;</span> <span class="keyword">as</span> <span class="keyword">const</span></span><br><span class="line">B = <span class="string">&#x27;aa&#x27;</span> <span class="comment">//无法修改</span></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> a1 = [<span class="number">10</span>, <span class="number">20</span>] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">const</span> a2 = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">a1.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 错误，此时已经断言字面量为[10, 20],数据无法做任何修改</span></span><br><span class="line">a2.<span class="title function_">unshift</span>(<span class="number">30</span>); <span class="comment">// 通过，没有修改指针</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><h3 id="ECMAScript-的内置对象"><a href="#ECMAScript-的内置对象" class="headerlink" title="ECMAScript 的内置对象"></a>ECMAScript 的内置对象</h3><ul><li>Boolean、Number、String、RegExp、Date、Error</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;我是步君&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;错误!&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br></pre></td></tr></table></figure><h3 id="DOM-和-BOM-的内置对象"><a href="#DOM-和-BOM-的内置对象" class="headerlink" title="DOM 和 BOM 的内置对象"></a>DOM 和 BOM 的内置对象</h3><p>Document、HTMLElement、Event、NodeList等</p><h3 id="定义Promise"><a href="#定义Promise" class="headerlink" title="定义Promise"></a>定义Promise</h3><p>如果我们不指定<strong>返回类型</strong>TS是推断不出来返回的是什么类型</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mq14ec5uj30wd09vtew.jpg" alt=""></p><p>指定返回的类型，这里指定为Number</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mr6jocakj30xg09w44u.jpg" alt=""></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">promise</span>(<span class="params"></span>) : <span class="title class_">Promise</span>&lt;<span class="title class_">Number</span>&gt;  &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>&lt;<span class="title class_">Number</span>&gt;(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="title function_">reject</span>(<span class="number">0</span>)    </span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><h3 id="在Ts中定义类"><a href="#在Ts中定义类" class="headerlink" title="在Ts中定义类"></a>在Ts中定义类</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 运行函数</span></span><br><span class="line">    run () &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明</li></ul><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 默认为public，内外部都能访问</span></span><br><span class="line">    <span class="keyword">public</span> name : <span class="built_in">string</span></span><br><span class="line">    <span class="comment">// private修饰符，代表定义的变量私有的只能在内部访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">private</span> age : <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// protected修饰符，代表定义的变量私有的只能在内部和继承的子类中访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">protected</span> sex : <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 静态属性不需要new，可以直接通过类名调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">GPA</span> : <span class="built_in">number</span> = <span class="number">3.5</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex : <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AliveSeven</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">name</span>)</span><br><span class="line"><span class="comment">// age只能在Person内部访问，这样写会报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">age</span>)</span><br><span class="line"><span class="comment">// sex只能在Person类或者其子类里面访问，同样报错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">sex</span>)</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mr6t15kyj30ms05v77b.jpg" alt=""></p><h3 id="静态属性static"><a href="#静态属性static" class="headerlink" title="静态属性static"></a>静态属性static</h3><ul><li>在类中用static关键字声明的变量是静态属性，在constructor不能直接用this去访问，只能通过类名去调用。</li><li>同样用static声明的函数也不能用this去调用，也是通过类名调用</li><li>如果两个函数都是static 静态的是可以通过this互相调用</li></ul><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mseoj38rj30i3052gn0.jpg" alt=""></p><p><strong>完整代码：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="comment">// 默认为public，内外部都能访问</span></span><br><span class="line">    <span class="keyword">public</span> name : <span class="built_in">string</span></span><br><span class="line">    <span class="comment">// private修饰符，代表定义的变量私有的只能在内部访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">private</span> age : <span class="built_in">number</span></span><br><span class="line">    <span class="comment">// protected修饰符，代表定义的变量私有的只能在内部和继承的子类中访问，不能在外部访问</span></span><br><span class="line">    <span class="keyword">protected</span> sex : <span class="built_in">any</span></span><br><span class="line">    <span class="comment">// 静态属性不需要new，可以直接通过类名调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">GPA</span> : <span class="built_in">number</span> = <span class="number">3.5</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name : <span class="built_in">string</span> , age : <span class="built_in">number</span> , sex : <span class="built_in">any</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sex</span> = sex</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果两个函数都是static 静态的是可以通过this互相调用</span></span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">A</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am Aliving&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;Alive7&#x27;</span>,<span class="number">22</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">        <span class="comment">// 子类可以访问protected的属性</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;继承子类：&#x27;</span>,<span class="variable language_">this</span>.<span class="property">sex</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">AliveSeven</span> = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;AliveSeven&#x27;</span>,<span class="number">21</span>,<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">AliveSeven</span>.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">GPA</span>)</span><br></pre></td></tr></table></figure><h3 id="interface-定义类"><a href="#interface-定义类" class="headerlink" title="interface 定义类"></a>interface 定义类</h3><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mscf457tj30lv0aon13.jpg" alt=""></p><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="keyword">type</span> : <span class="built_in">boolean</span>) :<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="title function_">set</span>():<span class="built_in">void</span></span><br><span class="line">    <span class="variable constant_">AI</span> : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;Alive&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类D继承类C，并且实现接口A和B</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_ inherited__">C</span> <span class="keyword">implements</span> A,B&#123;</span><br><span class="line">    <span class="comment">// 接口B需要AI属性</span></span><br><span class="line">    <span class="attr">AI</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">AI</span> = <span class="string">&#x27;Aliving&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接口A有get方法需要实现</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"><span class="keyword">type</span>: <span class="built_in">boolean</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 接口B有set方法需要实现</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params"></span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类</p><p>下面这段代码会<strong>报错</strong>抽象类无法被实例化</p><p><strong>实例1：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>()</span><br></pre></td></tr></table></figure><p><strong>实例2：</strong></p><p>我们在A类定义了 getName 抽象方法但为实现</p><p>我们B类实现了A定义的抽象方法，如不实现就不报错，<strong>我们定义的抽象方法必须在派生类实现</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">print</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">getName</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(<span class="string">&#x27;AliveSeven&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">getName</span>()); <span class="comment">// AliveSeven</span></span><br></pre></td></tr></table></figure><h2 id="元组类型"><a href="#元组类型" class="headerlink" title="元组类型"></a>元组类型</h2><ul><li><strong>元组（Tuple）是固定数量的不同类型的元素的组合</strong></li><li>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[<span class="built_in">number</span>,<span class="built_in">string</span>] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: <span class="keyword">readonly</span> [<span class="built_in">number</span>,<span class="built_in">boolean</span>,<span class="built_in">string</span>,<span class="literal">undefined</span>] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">&#x27;sring&#x27;</span>,<span class="literal">undefined</span>]</span><br><span class="line"><span class="comment">// arr[0]的类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">typeof</span>(arr[<span class="number">0</span>]))  <span class="comment">// number</span></span><br><span class="line"><span class="comment">// arr[1]的长度</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">1</span>].<span class="property">length</span>)  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h2><h3 id="数字枚举"><a href="#数字枚举" class="headerlink" title="数字枚举"></a>数字枚举</h3><p>例如：红绿蓝 Red = 0，Green = 1，Blue= 2，分别代表红色0，绿色为1，蓝色为2</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认就是从0开始的 可以不写值</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="增长枚举"><a href="#增长枚举" class="headerlink" title="增长枚举"></a>增长枚举</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">Green</span>,</span><br><span class="line">   <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，我们定义了一个数字枚举， Red使用初始化为 <code>1</code>。 其余的成员会从 <code>1</code>开始自动增长。 换句话说， Type.<code>Red</code>的值为 <code>1</code>， <code>Green</code>为 <code>2</code>， <code>Blue</code>为 <code>3</code>。</p><h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><ul><li>字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。</li></ul><h3 id="异构枚举"><a href="#异构枚举" class="headerlink" title="异构枚举"></a>异构枚举</h3><ul><li>枚举可以混合字符串和数字成员</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口枚举"><a href="#接口枚举" class="headerlink" title="接口枚举"></a>接口枚举</h3><p>定义一个枚举Types，定义一个接口A，他有一个属性<code>red</code>值为<code>Types.yyds</code></p><p>声明对象的时候要遵循这个规则</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">   yyds,</span><br><span class="line">   dddd</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:A = &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">yyds</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const枚举"><a href="#const枚举" class="headerlink" title="const枚举"></a>const枚举</h3><p>let 和 var 都是不允许声明枚举enum的，只能使用const。</p><p>大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格，这时我们可以用const枚举</p><ul><li>const 声明的枚举会被编译成常量</li><li>普通声明的枚举编译完后是个对象</li></ul><h3 id="反向映射"><a href="#反向映射" class="headerlink" title="反向映射"></a>反向映射</h3><p>它包含了正向映射（ <code>name</code> -&gt; <code>value</code>）和反向映射（ <code>value</code> -&gt; <code>name</code>）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">    A = <span class="number">1</span>,</span><br><span class="line">    B = <span class="number">2</span>,</span><br><span class="line">    C = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据枚举的值name映射得到value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Types</span>.<span class="property">A</span>)  <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 根据枚举的value映射得到name</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Types</span>[<span class="number">1</span>])  <span class="comment">// C</span></span><br></pre></td></tr></table></figure><h2 id="类型推论-类型别名"><a href="#类型推论-类型别名" class="headerlink" title="类型推论 | 类型别名"></a>类型推论 | 类型别名</h2><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>我声明了一个变量但是没有定义类型。</p><p>TypeScript 会在没有明确的指定类型的时候推测出一个类型，这就是类型推论。</p><p>比如我声明一个str变量是’Alive’，所以TS帮我推断出来这是一个string类型。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6mscxvdeuj309402374j.jpg" alt=""></p><p>我们在后面不能再给这个str赋值给别的类型的值。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfe9xz0j30eo041jsj.jpg" alt=""></p><p>如果你声明变量没有定义类型也没有赋值这时候TS会推断成any类型可以进行任何操作。</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfmofrsj30lv07sgnf.jpg" alt=""></p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p><code>type</code> 关键字（可以给一个类型定义一个名字）多用于符合类型</p><p>定义<strong>类型</strong>别名：</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfs5yhfj30ki091jub.jpg" alt=""></p><p> 定义<strong>函数</strong>别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="function">() =&gt;</span> <span class="string">&quot;AliveSeven&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s); <span class="comment">// [Function: s]</span></span><br></pre></td></tr></table></figure><p> 定义<strong>联合类型</strong>别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: str = <span class="number">123</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">s2</span>: str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,s2);  <span class="comment">// 123  123</span></span><br></pre></td></tr></table></figure><p>定义<strong>值</strong>的别名</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | <span class="string">&#x27;123&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//变量A的值  只能是上面value定义的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">A</span>:value = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="never类型"><a href="#never类型" class="headerlink" title="never类型"></a>never类型</h2><p>TypeScript 将使用 never 类型来表示不应该存在的状态</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msfxgc2qj30je0dejv7.jpg" alt=""></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A同时为number和string，这是不可能发生的事情，所以A为never</span></span><br><span class="line"><span class="keyword">type</span> A = <span class="built_in">number</span> &amp; <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) : <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="never-与-void-的差异"><a href="#never-与-void-的差异" class="headerlink" title="never 与 void 的差异"></a>never 与 void 的差异</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void类型只是没有返回值 但本身不会出错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Void</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;空&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只会抛出异常没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Never</span>(<span class="params"></span>):<span class="built_in">never</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;NEVER&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>比如当我们新增了一个C接口，我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG。</p><p>而且这将是一个“隐蔽型”的BUG，如果回归面不够广，很难发现此类BUG。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;A类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;B类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> C &#123;</span><br><span class="line">    <span class="keyword">type</span> : <span class="string">&#x27;C类&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">All</span> = A | B</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handle</span>(<span class="params">val : All</span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span> ( val.<span class="property">type</span> )&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;A类&#x27;</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;B类&#x27;</span> :</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">default</span> :</span><br><span class="line">            <span class="comment">// 一般进不来这一步，进来就是程序异常了</span></span><br><span class="line">            <span class="keyword">const</span> check : <span class="built_in">never</span> = val</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于任何类型都不能赋值给 <code>never</code> 类型的变量，所以当存在进入 <code>default</code> 分支的可能性时，TS的类型检查会及时帮我们发现这个问题。</p><h2 id="Symbol类型"><a href="#Symbol类型" class="headerlink" title="Symbol类型"></a>Symbol类型</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>自ECMAScript 2015起，<code>symbol</code>成为了一种新的原生类型，就像<code>number</code>和<code>string</code>一样。</p><p><code>symbol</code>类型的值是通过<code>Symbol</code>构造函数创建的。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>); <span class="comment">// 可选的字符串key</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sym2) <span class="comment">// Symbol(key)</span></span><br></pre></td></tr></table></figure><h3 id="Symbols是不可改变且唯一的。"><a href="#Symbols是不可改变且唯一的。" class="headerlink" title="Symbols是不可改变且唯一的。"></a>Symbols是不可改变且唯一的。</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> sym3 = <span class="title class_">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">sym2 === sym3; <span class="comment">// false, symbols是唯一的</span></span><br></pre></td></tr></table></figure><h3 id="用做对象属性的键"><a href="#用做对象属性的键" class="headerlink" title="用做对象属性的键"></a>用做对象属性的键</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sym]: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]); <span class="comment">// &quot;value&quot;</span></span><br></pre></td></tr></table></figure><h3 id="symbol属性，不能通过如下方式遍历拿到"><a href="#symbol属性，不能通过如下方式遍历拿到" class="headerlink" title="symbol属性，不能通过如下方式遍历拿到"></a>symbol属性，不能通过如下方式遍历拿到</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symbol1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> symbol2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;456&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> obj= &#123;</span><br><span class="line">   [symbol1]: <span class="string">&#x27;Aliving&#x27;</span>,</span><br><span class="line">   [symbol2]: <span class="string">&#x27;Seven&#x27;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">21</span>,</span><br><span class="line">   <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 for in 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">   <span class="comment">// 注意在console看key,是不是没有遍历到symbol1</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 Object.keys 遍历</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))</span><br><span class="line"><span class="comment">// 3 getOwnPropertyNames</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj))</span><br><span class="line"><span class="comment">// 4 JSON.stringfy</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>遍历结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">age</span><br><span class="line">sex</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27; ]</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27; ]</span><br><span class="line">&#123;&quot;age&quot;:21,&quot;sex&quot;:&quot;male&quot;&#125;</span><br></pre></td></tr></table></figure><p><strong>如何拿到：</strong></p><ol><li>Object.getOwnPropertySymbols方法</li><li>es6 的 Reflect 拿到对象的所有属性</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj))</span><br><span class="line"><span class="comment">// 2 es6 的 Reflect 拿到对象的所有属性</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj))</span><br></pre></td></tr></table></figure><p><strong>输出结果：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ Symbol(123), Symbol(456) ]</span><br><span class="line">[ &#x27;age&#x27;, &#x27;sex&#x27;, Symbol(123), Symbol(456) ]</span><br></pre></td></tr></table></figure><h3 id="Symbol-iterator-迭代器"><a href="#Symbol-iterator-迭代器" class="headerlink" title="Symbol.iterator 迭代器"></a>Symbol.iterator 迭代器</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 3, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: 4, done: false &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());  <span class="comment">//&#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">    age : <span class="built_in">number</span>,</span><br><span class="line">    name : <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明只读数组array</span></span><br><span class="line"><span class="keyword">const</span> array : <span class="title class_">Array</span>&lt;A&gt; = [&#123; age : <span class="number">21</span>, name : <span class="string">&#x27;AliveSeven&#x27;</span> &#125;, &#123; age : <span class="number">22</span> , name : <span class="string">&#x27;Alive&#x27;</span> &#125;, &#123; age : <span class="number">23</span>, name : <span class="string">&#x27;Seven&#x27;</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义类型</span></span><br><span class="line"><span class="keyword">type</span> mapTypes = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> map : <span class="title class_">Map</span>&lt;mapTypes , mapTypes&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;1&#x27;</span> , <span class="string">&#x27;步君&#x27;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span> , <span class="string">&#x27;七海&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    a : <span class="number">123</span>,</span><br><span class="line">    b : <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> set : <span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fn = ( arg : <span class="built_in">any</span> ) : <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> it : <span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; = arg[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">    <span class="keyword">let</span> next : <span class="built_in">any</span>= &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    <span class="keyword">while</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">        next =  it.<span class="title function_">next</span>()</span><br><span class="line">        <span class="keyword">if</span> (!next.<span class="property">done</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>(array)</span><br><span class="line"><span class="comment">// &#123; age: 21, name: &#x27;AliveSeven&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 22, name: &#x27;Alive&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#123; age: 23, name: &#x27;Seven&#x27; &#125;</span></span><br></pre></td></tr></table></figure><p>以下为这些symbols的列表：</p><p><strong>Symbol.hasInstance</strong><br>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</p><p><strong>Symbol.isConcatSpreadable</strong><br>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</p><p><strong>Symbol.iterator</strong><br>方法，被for-of语句调用。返回对象的默认迭代器。</p><p><strong>Symbol.match</strong><br>方法，被String.prototype.match调用。正则表达式用来匹配<a href="https://so.csdn.net/so/search?q=字符串&amp;spm=1001.2101.3001.7020">字符串</a>。</p><p><strong>Symbol.replace</strong><br>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</p><p><strong>Symbol.search</strong><br>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</p><p><strong>Symbol.species</strong><br>函数值，为一个构造函数。用来创建派生对象。</p><p><strong>Symbol.split</strong><br>方法，被String.prototype.split调用。正则表达式来用分割字符串。</p><p><strong>Symbol.toPrimitive</strong><br>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</p><p><strong>Symbol.toStringTag</strong><br>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</p><p><strong>Symbol.unscopables</strong><br>对象，它自己拥有的属性会被with作用域排除在外。</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="函数泛型"><a href="#函数泛型" class="headerlink" title="函数泛型"></a>函数泛型</h3><p>语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T。</p><p>当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数泛型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Alive</span>(<span class="params"> A : <span class="built_in">string</span> , B : <span class="built_in">number</span> </span>) : <span class="title class_">Array</span>&lt;<span class="built_in">string</span> | <span class="built_in">number</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> [A , B]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型优化，动态泛型，X,Y为动态类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Fn</span>&lt;X,Y&gt;( a : X , b : Y ) : <span class="title class_">Array</span>&lt;X | Y&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> [a , b]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Alive</span>(<span class="string">&#x27;我是步君&#x27;</span>,<span class="number">7</span>)</span><br><span class="line"><span class="title class_">Fn</span>&lt;<span class="built_in">string</span> , <span class="built_in">number</span>&gt;(<span class="string">&#x27;七海&#x27;</span>,<span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li>声明接口的时候 在名字后面加一个&lt;参数&gt;</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A&lt;T&gt;&#123;</span><br><span class="line">    (arg : T) : T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title class_">Fn</span>&lt;T&gt;(args : T) : T &#123;</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result : A&lt;<span class="built_in">string</span>&gt; = <span class="title class_">Fn</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">result</span>(<span class="string">&#x27;Aliving&#x27;</span>))  <span class="comment">// Aliving</span></span><br></pre></td></tr></table></figure><h3 id="对象字面量泛型"><a href="#对象字面量泛型" class="headerlink" title="对象字面量泛型"></a>对象字面量泛型</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> A : &#123; &lt;T&gt;(arg : T) : T &#125;</span><br><span class="line"></span><br><span class="line">A = <span class="keyword">function</span> &lt;T&gt;(arg : T)  : T&#123;</span><br><span class="line">    <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">A</span>(<span class="string">&#x27;天选国V&#x27;</span>)) <span class="comment">// 天选国V</span></span><br></pre></td></tr></table></figure><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>我们期望在一个泛型的变量上面，获取其<code>length</code>参数，但是，有的数据类型是没有<code>length</code>属性的</p><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msg6op10j30fn06275f.jpg" alt=""></p><p>于是，我们就得对使用的泛型进行约束，我们约束其为具有<code>length</code>属性的类型，这里我们会用到<code>interface</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Len</span> &#123;</span><br><span class="line">    length : <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getLegnth&lt;T <span class="keyword">extends</span> <span class="title class_">Len</span>&gt;(<span class="attr">arg</span>:T) &#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(getLegnth&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;七海小姐姐&#x27;</span>)) <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h3 id="使用keyof-约束对象"><a href="#使用keyof-约束对象" class="headerlink" title="使用keyof 约束对象"></a>使用keyof 约束对象</h3><ol><li>首先定义了T类型并使用extends关键字继承object类型的子类型，</li><li>然后使用keyof操作符获取T类型的所有键，它的返回类型是联合类型</li><li>最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> prop&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> <span class="title class_">All</span> = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="title function_">prop</span>(<span class="title class_">All</span>, <span class="string">&#x27;a&#x27;</span>) </span><br><span class="line"><span class="title function_">prop</span>(<span class="title class_">All</span>, <span class="string">&#x27;d&#x27;</span>) <span class="comment">//此时就会报错发现找不到，</span></span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/008oCS7vgy1h6msghsn54j30ks0600uz.jpg" alt=""></p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>声明方法跟函数类似名称后面定义&lt;类型&gt;</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Alive</span>&lt;T&gt;&#123;</span><br><span class="line">    a : T[] = [];</span><br><span class="line">    <span class="title function_">add</span>(a : T) : T[] &#123;</span><br><span class="line">        <span class="keyword">return</span> [a]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> <span class="title class_">Alive</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line">x.<span class="property">a</span> = [<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;Alive&#x27;</span>,<span class="string">&#x27;Seven&#x27;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="title function_">add</span>(<span class="string">&#x27;ABC&#x27;</span>)) <span class="comment">// [&#x27;ABC&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = <span class="keyword">new</span> <span class="title class_">Alive</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line">y.<span class="property">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="title function_">add</span>(<span class="number">123</span>)) <span class="comment">// [ 123 ]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css开发中一些常用的文本规划</title>
      <link href="/posts/5e549d65/"/>
      <url>/posts/5e549d65/</url>
      
        <content type="html"><![CDATA[<h1 id="css开发中一些常用的文本规划"><a href="#css开发中一些常用的文本规划" class="headerlink" title="css开发中一些常用的文本规划"></a>css开发中一些常用的文本规划</h1><h2 id="文本限制行数，超出后显示为省略号"><a href="#文本限制行数，超出后显示为省略号" class="headerlink" title="文本限制行数，超出后显示为省略号"></a>文本限制行数，超出后显示为省略号</h2><p>主要把装着文字的盒子设为-webkit-box布局，然后设置以下的属性即可，主要-webkit-line-clamp是为限制的行数。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box; <span class="comment">/* 对象作为伸缩盒子模型显示 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>; <span class="comment">/* 显示的行数，这里限制为两行 */</span></span><br><span class="line">-webkit-box-orient: vertical; <span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式，这里为向下排 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden; <span class="comment">/* 超出盒子部分隐藏 */</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;  <span class="comment">/* 文字超出两行的部分为省略号 */</span></span><br><span class="line"><span class="attribute">word-break</span>: break-all;  <span class="comment">/* break-all(允许在单词内换行。) */</span>  </span><br></pre></td></tr></table></figure><h2 id="文本识别’-n’换行符"><a href="#文本识别’-n’换行符" class="headerlink" title="文本识别’\n’换行符"></a>文本识别’\n’换行符</h2><ul><li>将文本盒子<strong>white-space</strong>设为pre-wrap</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// pre-wrap保留空白符序列，但是正常地进行换行。</span><br><span class="line">text&#123;</span><br><span class="line">   <span class="attribute">white-space</span>: pre-wrap; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里讲一下<strong>white-space</strong>这个属性</li></ul><p><img src="https://m1.im5i.com/2022/09/08/UqG043.png" alt=""></p><div class="table-container"><table><thead><tr><th>white-space属性</th><th>源码空格</th><th>源码换行</th><th><br>换行</th><th>容器边界换行</th></tr></thead><tbody><tr><td>normal</td><td>合并</td><td>忽略</td><td>换行</td><td>换行</td></tr><tr><td>nowrap</td><td>合并</td><td>忽略</td><td>换行</td><td>不换行</td></tr><tr><td>pre</td><td>保留</td><td>换行</td><td>换行</td><td>不换行</td></tr><tr><td>pre-wrap</td><td>保留</td><td>换行</td><td>换行</td><td>换行</td></tr><tr><td>pre-line</td><td>合并</td><td>换行</td><td>换行</td><td>换行</td></tr></tbody></table></div><h2 id="灵活运用rem单位实现文字大小自适应"><a href="#灵活运用rem单位实现文字大小自适应" class="headerlink" title="灵活运用rem单位实现文字大小自适应"></a>灵活运用rem单位实现文字大小自适应</h2><ul><li><strong>rem是一种相对长度单位，通过这个长度单位可以实现元素宽高等比例缩放，从而完成不同宽度屏幕的适配。</strong></li></ul><blockquote><p>rem 主要是为了解决字体随屏幕变化，flex上的高度问题，实现高度和宽度等比例缩放</p></blockquote><ul><li><strong>css3规定：1rem的大小就是根元素<code>&lt;html&gt;</code>的font-size的值。</strong></li></ul><p>​    使用rem单位的好处呢，就是我们如果相对页面的文字大小作修改，那么我们只需要改<code>&lt;html&gt;</code>的font-size值就行了，其它的用了rem单位的文本就会相对的一起作出改变。</p><h3 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        我是AliveSeven</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">1.5rem</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">980px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">880px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">780px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">680px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span> : <span class="number">580px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">html</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h3><p><img src="https://m1.im5i.com/2022/09/08/UqGM07.gif" alt="rem演示"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android RecyclerView的简单使用</title>
      <link href="/posts/6c6b2a18/"/>
      <url>/posts/6c6b2a18/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-RecyclerView的简单使用"><a href="#Android-RecyclerView的简单使用" class="headerlink" title="Android RecyclerView的简单使用"></a>Android RecyclerView的简单使用</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>RecyclerView 是如何经过测量、布局，最终绘制到屏幕上</li><li>RecycleView 是在 Android 5.0 版本作为 support-v7 的一个组件出现，高效替代了最初的 ListView 等列表 组件。使用上实现了视图代码解耦，功能上具备强大的 item 复用机制，并且提供默认 多种 LayoutMananger 用来处理多种布局。</li><li>RecyclerView 使用了 ViewHolder 模式，这 样做可以提高性能，因为它无需频繁调用 findViewById()方法即可访问表项的视图。</li><li>在新版的Android开发中，RecyclerView控件被内置到Android Studio中，不需要再去引入依赖项，直接配置即可。</li></ul><h2 id="RecyclerView的基本使用"><a href="#RecyclerView的基本使用" class="headerlink" title="RecyclerView的基本使用"></a>RecyclerView的基本使用</h2><h3 id="RecyclerView组件"><a href="#RecyclerView组件" class="headerlink" title="RecyclerView组件"></a>RecyclerView组件</h3><ol><li>新建一个页面（Activity），在里面引入RecyclerView控件</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWHnv.png" alt=""></p><ol><li>新建一个子组件的item页面，来用作每个组件的展示模板，例如下图这样。</li></ol><p><img src="https://m1.im5i.com/2022/09/06/UqWPGG.png" alt=""></p><h3 id="RecyclerViewHolder类"><a href="#RecyclerViewHolder类" class="headerlink" title="RecyclerViewHolder类"></a>RecyclerViewHolder类</h3><ul><li>RecyclerView中的ViewHolder类主要构造方法将<strong>子组件（单条数据）</strong>的ui和组件对象（Java类）关联起来。</li><li><p>比如上图我的子组件，我要多条展示的这些数据，每条数据的<strong>名字（name），图片（iv），描述（introduce）</strong>是各不相同的，所以要配置它们，将这些组件用Java类关联起来，然后用Java类方法进行<strong>修改和批量展示</strong>。</p></li><li><p><strong>相关代码：</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageView;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewHolder</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.ViewHolder &#123;</span><br><span class="line">    <span class="comment">//展示单条数据的界面组件对象</span></span><br><span class="line">    TextView name;</span><br><span class="line">    ImageView iv;</span><br><span class="line">    TextView introduce;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法：将组件（ui）与组件对象（java类）关联起来</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RecyclerViewHolder</span><span class="params">(View view)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(view);</span><br><span class="line">        <span class="comment">//关联id = name的组件</span></span><br><span class="line">        name = (TextView) view.findViewById(R.id.name);</span><br><span class="line">        <span class="comment">//关联id = iv的组件</span></span><br><span class="line">        iv = (ImageView) view.findViewById(R.id.iv);</span><br><span class="line">        <span class="comment">//关联id = introduce的组件</span></span><br><span class="line">        introduce = (TextView) view.findViewById(R.id.introduce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="RecyclerAdapter类"><a href="#RecyclerAdapter类" class="headerlink" title="RecyclerAdapter类"></a>RecyclerAdapter类</h3><ul><li>RecyclerView中的Adapter是适配器、数据和视图对接的桥梁。</li><li>简单来说，就是新建一个类，在里面设置一些方法，按照item页面的那个模板批量生产子组件，然后将生产的这些子组件塞到一开始新建的那个RecyclerView控件里面，由上往下一个一个排。</li><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewAdapter</span> <span class="keyword">extends</span> <span class="title class_">RecyclerView</span>.Adapter&lt;RecyclerViewHolder&gt;&#123;</span><br><span class="line">    <span class="comment">// 创建两个数组包含要展示的数据图片、姓名和它们的详细介绍</span></span><br><span class="line">    <span class="keyword">private</span> String[] names = &#123; <span class="string">&quot;橘猫&quot;</span>, <span class="string">&quot;葫芦娃&quot;</span>, <span class="string">&quot;小怪兽&quot;</span>, <span class="string">&quot;哆啦COS梦&quot;</span>, <span class="string">&quot;小猪佩奇&quot;</span>, <span class="string">&quot;睡爆emo&quot;</span>, <span class="string">&quot;逗乐表情包&quot;</span>, <span class="string">&quot;小松鼠&quot;</span>, <span class="string">&quot;小鲸鱼&quot;</span>, <span class="string">&quot;兔子&quot;</span>&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] icons = &#123;R.drawable.a1,R.drawable.a2,R.drawable.a3,R.drawable.a4,R.drawable.a5,</span><br><span class="line">            R.drawable.a6,R.drawable.a7,R.drawable.a8,R.drawable.a9,R.drawable.a10&#125;;</span><br><span class="line">    <span class="keyword">private</span> String[] introduces = &#123;</span><br><span class="line">            <span class="string">&quot;橘猫，路边看到的小猫，好像隐藏着什么强大的力量，感觉这不是一只普通的小猫。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;葫芦娃，送头之王，有七兄弟，葫芦娃救爷爷一个一个送&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小怪兽，凹凸曼的好朋友，喜欢和凹凸曼一起去逗乐，特摄节目中的超级猪脚。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;COS哆啦A梦的小朋友，简称哆啦COS梦，可爱，萌，就是没有哆啦A梦那么圆那么胖。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小猪佩奇，一只可爱的粉色小猪，貌似很受小孩子的欢迎，虽然我不知道这有啥好看就是了，说不定很逗乐。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;睡爆emo，上数学课英文课的时候大概就是这样了，梦里什么都有。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;逗乐表情包，一个表情包，挺逗乐的，不过现在估计没什么人用了，时代变了大人。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小松鼠，挺可爱挺萌的，长得还挺像皮卡丘，好想抓一只拿回家里养，就是不知道会不会发电。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;小鲸鱼，能够头上喷水的一种鱼，遭受人类的迫害和捕杀，现在濒临灭绝了。&quot;</span>,</span><br><span class="line">            <span class="string">&quot;兔子，一种胆小的动物，突然喧闹声、生人和陌生动物，如猫狗等都会使它惊慌失措。&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> RecyclerViewHolder <span class="title function_">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="type">int</span> viewType)</span> &#123;</span><br><span class="line">        <span class="comment">//  加载展示单条数据的布局文件recycler_item.xml</span></span><br><span class="line">        <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(parent.getContext()).inflate(R.layout.recycler_item,parent,<span class="literal">false</span>);</span><br><span class="line">        <span class="type">RecyclerViewHolder</span> <span class="variable">holder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecyclerViewHolder</span>(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//展示单条数据,index代表数据在数组中的下标</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onBindViewHolder</span><span class="params">(RecyclerViewHolder holder, <span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//设置数组names[index]为展示的id为name的text组件</span></span><br><span class="line">        holder.name.setText(names[index]);</span><br><span class="line">        <span class="comment">//设置数组icons[index]为展示的id为iv的Image组件</span></span><br><span class="line">        holder.iv.setImageResource(icons[index]);</span><br><span class="line">        <span class="comment">//设置数组introduces[index]为展示的id为introduce的text组件</span></span><br><span class="line">        holder.introduce.setText(introduces[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//  获取所有数据的数量</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getItemCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> names.length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    上面的代码看上去可能有点长，其实一点都不复杂，一开始的新建的三个数组就是要批量生产的子组件的数据。</p><p>​    在onCreateViewHolder里，先加载子组件item的模板布局，然后将模板布局里面的子组件通过RecyclerHolder类匹配到Java对象上。</p><p>​    在onBindViewHolder里，将三个数组里的数据，set到item的模板布局上面，简单来说就是拿一个模板，向里面按格式写入东西。</p><p>​    最后，再设置一个getItemCount()方法，获取要批量生产的子组件数量。</p><h3 id="RecyclerViewActivtiy类"><a href="#RecyclerViewActivtiy类" class="headerlink" title="RecyclerViewActivtiy类"></a>RecyclerViewActivtiy类</h3><ol><li>到需要多条展示数据的页面Activtiy类里面</li><li>新建两个对象，一个是RecyclerView类的对象和适配器RecyclerViewAdapter类的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line"><span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br></pre></td></tr></table></figure><ol><li>布局文件通过findViewById()找到一开始新建的那个Recycler控件</li><li>然后直接按下面的代码一样配置即可</li></ol><ul><li><strong>相关代码：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.applicationtest.recyclerview;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.LinearLayoutManager;</span><br><span class="line"><span class="keyword">import</span> androidx.recyclerview.widget.RecyclerView;</span><br><span class="line"><span class="keyword">import</span> com.example.applicationtest.R;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RecyclerViewActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView mRecyclerView;</span><br><span class="line">    <span class="keyword">private</span> RecyclerViewAdapter mAdapter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 加载布局文件，里面有recyclerview组件</span></span><br><span class="line">        setContentView(R.layout.activity_recycler_view_activity);</span><br><span class="line">        <span class="comment">//建立组件对象与组件的关联</span></span><br><span class="line">        mRecyclerView = (RecyclerView) findViewById(R.id.id_recyclerview);</span><br><span class="line">        <span class="comment">//设置recyclerview中展现多条数据的方式</span></span><br><span class="line">        mRecyclerView.setLayoutManager(<span class="keyword">new</span> <span class="title class_">LinearLayoutManager</span>(<span class="built_in">this</span>));</span><br><span class="line">        <span class="comment">//创建适配器对象</span></span><br><span class="line">        mAdapter = <span class="keyword">new</span> <span class="title class_">RecyclerViewAdapter</span>();</span><br><span class="line">        <span class="comment">//recyclerview组件对象设置适配器对象，显示recyclerview组件</span></span><br><span class="line">        mRecyclerView.setAdapter(mAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/Uq5DNY.gif" alt="Uq5DNY.gif"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）</title>
      <link href="/posts/a4ce3df7/"/>
      <url>/posts/a4ce3df7/</url>
      
        <content type="html"><![CDATA[<h1 id="Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）"><a href="#Js-Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）" class="headerlink" title="Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）"></a>Js/Vue实现点击div区域外隐藏div区域（盒子聚焦和失焦问题）</h1><h2 id="Js"><a href="#Js" class="headerlink" title="Js"></a>Js</h2><ul><li>给整个document添加监听点击事件，隐藏div</li><li>给div添加监听点击事件，阻止冒泡</li></ul><p><strong>HTML代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;Nav&quot;</span>&gt;</span>导肮展开栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Js代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Nav&#x27;</span>)</span><br><span class="line">   <span class="keyword">var</span> menu = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;menu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 点击body触发函数</span></span><br><span class="line">       <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">       menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻止冒泡，即阻止触发点击事件</span></span><br><span class="line">   nav[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">       <span class="title function_">stopMaoPao</span>(e)</span><br><span class="line">       menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">   &#125; , <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 阻止菜单冒泡事件</span></span><br><span class="line">   menu[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span><br><span class="line">       <span class="title function_">stopMaoPao</span>(e)</span><br><span class="line">   &#125;, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 阻止事件向上传递，事件冒泡</span></span><br><span class="line">   <span class="comment">// cancelBubble:设置或获取当前事件是否要在事件句柄中向上冒泡</span></span><br><span class="line">   <span class="comment">// stopPropagation符合w3c标准，是应用于firefox浏览器，而不支持IE浏览器</span></span><br><span class="line">   <span class="comment">// 而cancelBubble则相反，不符合w3c标准，只支持ＩＥ浏览器。</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">stopMaoPao</span>(<span class="params">e</span>) &#123; </span><br><span class="line">       e.<span class="property">stopPropagation</span> ? e.<span class="title function_">stopPropagation</span>() : e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="Js小提示"><a href="#Js小提示" class="headerlink" title="Js小提示"></a>Js小提示</h3><ul><li>使用addEventListener要注意</li><li>getElementsByClassName getElementByTagName()获取到的都是数组，即使满足条件的元素只有一个，也是数组， 因此在事件监听时，必须加[0]，否则会报错误</li><li>getElementById就不需要加[0]</li><li>addEventListener 第三个参数默认是false，false为冒泡事件，true为捕获事件</li></ul><h3 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/UqMoWH.gif" alt="UqMoWH.gif"></p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;Nav&quot;</span>&gt;</span>导肮展开栏<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span>菜单<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> nav = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;Nav&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> menu = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;menu&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击body触发函数</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用addEventListener要注意，</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementsByClassName getElementByTagName()获取到的都是数组，即使满足条件的元素只有一个，也是数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 因此在事件监听时，必须加[0]，否则会报错误</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// getElementById就不需要加[0]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// addEventListener 第三个参数默认是 false false为冒泡事件 true为捕获事件</span></span></span><br><span class="line"><span class="language-javascript">    nav[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 阻止冒泡，即阻止触发点击事件</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">stopMaoPao</span>(e)</span></span><br><span class="line"><span class="language-javascript">        menu[<span class="number">0</span>].<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125; , <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止菜单冒泡事件</span></span></span><br><span class="line"><span class="language-javascript">    menu[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span> , <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">stopMaoPao</span>(e)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 阻止事件向上传递，事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// cancelBubble:设置或获取当前事件是否要在事件句柄中向上冒泡</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// stopPropagation符合w3c标准，是应用于firefox浏览器，而不支持IE浏览器</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 而cancelBubble则相反，不符合w3c标准，只支持ＩＥ浏览器。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">stopMaoPao</span>(<span class="params">e</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">        e.<span class="property">stopPropagation</span> ? e.<span class="title function_">stopPropagation</span>() : e.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.Nav</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#a6a6e3</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.menu</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="number">#cbd9dc</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>最好是采用一个透明的遮罩层进行点击事件从而达到隐藏。</p><p>为什么不采用监听body的监听事件呢，一方面是因为可能会发生点击事故，就是不小心点到其他a标签、跳转标签或者事件触发元素，会直接触发其他函数或者跳转页面；另一方面是因为可维护性不好，假设可以通过点击多个元素关闭，那么需要挨个判断id。</p></blockquote><h2 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h2><ul><li>使用Vue来处理相比Js会灵活很多</li><li>可以在盒子外层加一层固定的遮罩层进行点击事件从而达到隐藏。</li></ul><p><strong>实现代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 采用一个透明的遮罩层进行点击事件从而达到隐藏 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;navPhoneOpen&quot;</span> <span class="attr">id</span>=<span class="string">&quot;menu-mask&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;hideNav()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">NavPhone</span>&gt;</span><span class="tag">&lt;/<span class="name">NavPhone</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用v-show给遮罩层设定展示条件，当<strong>盒子处于显示</strong>时，遮罩层也一起显示，z-index大于body小于盒子即可，点击遮罩层即可触发hideNav()事件，可以<strong>利用vuex定义一个变量用来控制盒子的隐藏和出现</strong></li><li>或者不定义也行，在data()里面定义也可以，方法有很多，反正用一个变量通过v-show来控制盒子的隐藏和显示就行了。</li><li>hideNav()函数就是更改那个控制盒子显示的变量</li></ul><p><img src="https://m1.im5i.com/2022/09/06/UqMtRa.png" alt="UqMtRa.png"></p><h3 id="实现效果-1"><a href="#实现效果-1" class="headerlink" title="实现效果"></a>实现效果</h3><p><img src="https://m1.im5i.com/2022/09/06/UqM1dT.gif" alt="UqM1dT.gif"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JavaScript </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex弹性布局详解</title>
      <link href="/posts/8a0f1987/"/>
      <url>/posts/8a0f1987/</url>
      
        <content type="html"><![CDATA[<h1 id="Flex弹性布局详解"><a href="#Flex弹性布局详解" class="headerlink" title="Flex弹性布局详解"></a>Flex弹性布局详解</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>flex就是flexible box的缩写，意为弹性布局，任何一个容器都可以指定为flex布局</p><p><strong>Webkit</strong>内核的浏览器，必须加上-webkit前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。</p></blockquote><p>🌀<strong><em>Flex布局与传统布局对比：</em></strong></p><p><strong>传统布局：</strong></p><ul><li>兼容性好</li><li>布局繁琐</li><li>局限（不能在移动端很好的布局）</li></ul><p><strong>FLex布局：</strong></p><ul><li>操作方便，布局简单，移动端广泛应用</li><li>PC端浏览器支持较差</li><li>IE11或更低版本不支持或部分支持</li></ul><p>🌀<strong><em>Flex布局原理：</em></strong></p><p>—通过给父元素添加flex属性来控制子元素的位置和排列方式</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>容器默认存在两根轴：水平的<strong>主轴</strong>（main axis）和垂直的<strong>交叉轴</strong>（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code></p><p>项目默认沿主轴排列，单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code></p><p><img src="https://m1.im5i.com/2022/09/03/Uq0A6S.png" alt="Uq0A6S.png"></p><h2 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h2><ol><li><strong>flex-direction：设置主轴方向，一般默认为x轴</strong></li><li><strong>justify-content：设置主轴上的子元素排列方式，一般默认为y轴</strong></li><li><strong>flex-wrap：设置子元素是否换行</strong></li><li><strong>align-items：设置侧轴上子元素排列方式（单行）</strong></li><li><strong>align-content：设置侧轴上子元素排列方式（多行）</strong></li><li><strong>align-self：控制子元素本身在交叉轴上的对齐方式</strong></li><li><strong>flex-flow：复合属性，同时设置了flex-direction和flex-wrap</strong></li></ol><h3 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h3><ul><li><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>row</code>：默认值，主轴为水平方向，起点在左端。</li><li><code>row-reverse</code>：主轴为水平方向，起点在右端。</li><li><code>column</code>：主轴为垂直方向，起点在上沿。</li><li><code>column-reverse</code>：主轴为垂直方向，起点在下沿</li></ul><p><img src="https://m1.im5i.com/2022/09/03/Uq0IH0.png" alt="Uq0IH0.png"></p><h3 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h3><ul><li><p><code>justify-content</code> 是用于控制项目在主轴上的对齐方式。</p></li><li><p>常用属性有以下六个</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>属性值：</strong> </p><ul><li><code>flex-start</code><strong>：默认值，子盒子在主轴方向上排列，一般是在x轴水平方向，从左到右。</strong></li><li><code>flex-end</code><strong>：子盒子在主轴方向上反向排列，一般是在x轴水平方向，从右到左边。</strong></li><li><code>center</code><strong>：子盒子在主轴方向上居中。</strong></li><li><code>space-between</code><strong>：子盒子在主轴方向上，两端对齐，然后项目中间间隔是相等的。</strong></li><li><code>space-around</code><strong>：在主轴方向上，在左右两侧会留下边距。</strong></li><li><code>space-evenly</code><strong>：均匀排列每个元素，每个元素之间的间隔相等</strong></li></ul><p><img src="https://image-static.segmentfault.com/250/241/2502411604-75463c5584aa3aff" alt=""></p><h4 id="space-around和space-evenly的区别"><a href="#space-around和space-evenly的区别" class="headerlink" title="space-around和space-evenly的区别"></a>space-around和space-evenly的区别</h4><p>​                    <img src="https://m1.im5i.com/2022/09/03/Uq0Hez.md.png" alt="Uq0Hez.md.png"></p><h3 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h3><ul><li><strong>flex-wrap：</strong> 控制项目(子元素)是否换行</li></ul><p>它可能取三个值：</p><ul><li>nowrap：（默认值）不换行；</li><li>wrap：换行，第一行在上方；</li><li>wrap-reverse：换行，第一行在下方。</li></ul><blockquote><p><strong>注意：默认情况下是不换行的，如果父元素装不下会缩小所有子元素的宽度，使子元素挤在一起。</strong></p></blockquote><p><img src="https://m1.im5i.com/2022/09/03/Uq0mTB.png" alt="Uq0mTB.png"></p><h3 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h3><ul><li><code>align-items</code> 是控制项目在交叉轴上的对齐方式，一般是垂直方向y轴上面的。</li><li>有常用的五个属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch | flex-start | flex-end | center | baseline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>stretch</code>：默认值，如果项目没有设置固定高度，则会被拉伸填充满交叉轴方向剩余的空间。</li><li><code>flex-start</code>：项目在沿交叉轴起始线位置对齐。</li><li><code>flex-end</code>：项目沿交叉轴终点线位置对齐。</li><li><code>center</code>：项目在交叉轴方向居中对齐。</li><li><code>baseline</code>：项目在交叉轴方向沿项目中第一行文字的基线对齐。</li></ul><p><img src="https://image-static.segmentfault.com/352/840/3528400318-699131d320f31e62" alt=""></p><blockquote><ol><li>stretch 是“拉伸，拉长”的意思，所以项目会被拉伸</li><li>start、end、center 分别的“起始”、“终点”、“中间”的意思，所以项目分别是起始位置、终端位置、居中对齐。</li><li>baseline 是“基线、底线”的意思，这里是沿文字的基线对齐的意思。</li></ol></blockquote><h3 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h3><ul><li><code>align-content</code> 控制多行项目（多根主轴线）对齐方式。类似 <code>justify-content</code> ，只不过，<code>align-content</code> 是控制行与行之间的空间分配，<code>justify-content</code> 是控制子盒子与子盒子之间的空间分配。</li><li>有七个常用的属性</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch | flex-start | flex-end | center | space-between | space-around | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>除了<strong>stretch属性</strong>外，其他的属性功能和性质基本和<strong>justify-content</strong>那里的属性一样</li><li><code>stretch</code><strong>：默认值，交叉轴方向剩余的空间平均分配到每一行，并且行的高度会拉伸，填满整行的空间</strong></li></ul><p><img src="https://image-static.segmentfault.com/719/027/719027543-420f34821a508347" alt=""></p><h3 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h3><ul><li><code>align-self</code> 控制子盒子本身在交叉轴上的对齐方式。优先级高于 <code>align-items</code>。<code>align-items</code> 是容器统一控制容器里的每个子盒子的对齐方式，<code>align-self</code> 则是子盒子控制子盒子本身的对齐方式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>align-self: auto;</code> ，继承容器设置的 <code>align-items</code> 的值。也就是默认是由容器设置 <code>align-items</code> 统一控制项目在交叉轴上的对齐方式。</li><li>除了比 <code>align-items</code> 多一个 <code>auto</code> 选项外，其他选项与 <code>align-items</code> 一致。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  dispaly: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start; // 容器控制所有项目顶部对齐排列</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span><span class="selector-class">.four</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: flex-end; // 第四个项目控制底部对齐</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://image-static.segmentfault.com/110/315/1103156958-4717e400ec943764" alt=""></p><h3 id="flow-grow属性"><a href="#flow-grow属性" class="headerlink" title="flow-grow属性"></a>flow-grow属性</h3><ul><li><code>flex-grow</code> 用于控制子盒子在主轴方向上拉伸放大占剩余空间（如果有的话）的比例。</li><li>grow 的意思是“扩大，使生长”，所以就是让项目放大的意思。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>0</code>，不放大。</li></ul><p><img src="https://image-static.segmentfault.com/114/795/1147952730-93479b1ca8af8f91" alt=""></p><blockquote><p>例子中，容器宽设为 300px，项目宽设为 50px。项目总宽 150px，剩余空间宽 150px</p><p>flex-grow 都设置为 1 的时候，项目拉伸成 100px，剩余空间被按 1:1:1 分配，每个项目各占了 1/3。</p><p>flex-grow 分别设为 33、66、66 的时候，项目分别被拉伸成 87.5px、125px、87.5px，剩余空间被按 1:2:1 分配，项目分别占了剩余空间的 1/4、1/2、1/4。</p><p><strong>可以看到，放大的比例跟数值的大小无关，跟数值的比例有关。</strong></p></blockquote><h3 id="flow-shrink属性"><a href="#flow-shrink属性" class="headerlink" title="flow-shrink属性"></a>flow-shrink属性</h3><ul><li><code>flex-shrink</code> 用于控制项目在主轴方向上缩小的程度。数值越大，收缩越多</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认是 <code>flex-shrink: 1</code> ，同等比例收缩。</li></ul><p><img src="https://image-static.segmentfault.com/153/086/1530865475-13fb240e2cab993d" alt=""></p><blockquote><p>例子中，容器宽为 400px，项目宽为100px。因为项目超过了容器空间，所以自动被缩小了。默认 flex-shrink 是 1，所有项目同等比例缩小成 80px。</p><p>右上，设置 flex-shrink，全部设置为 0，项目保存原来设置的宽度 100px，不缩小，所以溢出容器空间。</p><p>右中，设置 flex-shrink 分别为 6、6、6、默认、默认，项目宽变成 70px、70px、70px、95px、95px，超出的 100px 分成 20 份，按比例缩小。</p><p>右上，设置 flex-shrink 分别为 999、默认、默认、默认、默认，项目宽变成 16px、96px、96px、96px、96px，可以看到这里就不按比例缩小的了。</p></blockquote><h3 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h3><ul><li><code>flex-basis</code> 用于初始化每个项目占据主轴空间的尺寸（main size）</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex-basis: auto</code> , 自动检测尺寸，如果项目有设置尺寸，则取项目设置的值，否则根据项目内容计算出尺寸。</li></ul><h3 id="flex-项目的属性：flex"><a href="#flex-项目的属性：flex" class="headerlink" title="flex 项目的属性：flex"></a>flex 项目的属性：flex</h3><ul><li><code>flex</code> 是上面三个合并的简写。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: &lt;flex-grow&gt; [&lt;flex-shrink&gt;] [&lt;flex-basis&gt;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值：<code>flex: 0 1 auto;</code> 后两个参数为可选参数。</li></ul><ul><li><code>flex: auto</code>：等同于 <code>flex: 1 1 auto</code>。可以拉伸，可以缩小，自动计算项目尺寸，一般情况下会自动拉伸填充满整个容器。</li><li><code>flex: none</code>： 等同于 <code>flex: 0 0 auto</code>。不能拉伸，不能缩小，直接使用获取到项目的 <code>flex-basis</code> 尺寸。</li><li><code>flex: &lt;positive-number&gt;</code>：等同于 <code>flex: &lt;positive-number&gt; 1 0</code> 。positive-number 为正数，例如 <strong><code>flex: 1</code> 等同于 <code>flex: 1 1 0</code>。</strong></li></ul><h3 id="flex-项目的属性：order"><a href="#flex-项目的属性：order" class="headerlink" title="flex 项目的属性：order"></a>flex 项目的属性：order</h3><ul><li><code>order</code> 用于控制项目在主轴上的排列顺序。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item-box</span> &#123;</span><br><span class="line"> <span class="attribute">order</span>: &lt;number&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认值： <code>order: 0;</code> ，参数值正负数都可以，全部项目按主轴方向依次排列。设置后，按数值大小，从小到大排列。</li></ul><p><img src="https://image-static.segmentfault.com/144/234/1442340051-b6045f89bffe1540" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue打包使用CDN优化项目</title>
      <link href="/posts/e42836c1/"/>
      <url>/posts/e42836c1/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue打包使用CDN优化项目"><a href="#Vue打包使用CDN优化项目" class="headerlink" title="Vue打包使用CDN优化项目"></a>Vue打包使用CDN优化项目</h1><h2 id="优化原因"><a href="#优化原因" class="headerlink" title="优化原因"></a>优化原因</h2><p>在没有使用CDN加速的情况下，打包后的js和css文件有时会很大，<strong>甚至有1M或者几M以上</strong>，而且随着项目的越做越大，打包出来的文件就更大了，而在页面加载的时候，会拖慢加载速度，如果有CDN全站加速可能还好，如果托管于GitHub Page上面的话，会让加载速度变得很慢。</p><ul><li>比如下图，在没有使用CDN加速的情况下，可以看出element-ui、vue、vuex、vue-router这些依赖都打进chunk-vendors.js中导致体积很大</li></ul><p><img src="https://m1.im5i.com/2022/09/03/Uq01GH.png" alt="Uq01GH.png"></p><h2 id="查看依赖版本"><a href="#查看依赖版本" class="headerlink" title="查看依赖版本"></a>查看依赖版本</h2><p>首先项目中需要使用依赖项，<strong>打开项目中的vue.config.js</strong>，查看要加速的包的版本，我这里项目中打算将element-ui、vue、vuex、vue-router这些包进行分离，让它们通过cdn加速来载入页面，记录其依赖版本方便后面使用。</p><p><img src="https://m1.im5i.com/2022/09/03/Uq03xT.png" alt="Uq03xT.png"></p><div class="table-container"><table><thead><tr><th>依赖名称</th><th>依赖版本</th></tr></thead><tbody><tr><td>vue</td><td>2.6.14</td></tr><tr><td>vue-router</td><td>3.1.3</td></tr><tr><td>vuex</td><td>3.6.2</td></tr><tr><td>element-ui</td><td>2.15.6</td></tr><tr><td>axios</td><td>0.26.1</td></tr></tbody></table></div><h2 id="配置CDN加速"><a href="#配置CDN加速" class="headerlink" title="配置CDN加速"></a>配置CDN加速</h2><ul><li><strong>打开vue.config.js</strong></li></ul><p>写入下面的代码，externals为要加速的包名和挂载在window上的对象属性名称，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue打包优化-CDN加速</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否为生产环境</span></span><br><span class="line"><span class="keyword">const</span> isProduction = process.<span class="property">env</span>.<span class="property">NODE_ENV</span> !== <span class="string">&#x27;development&#x27;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 本地环境是否需要使用cdn</span></span><br><span class="line"><span class="keyword">const</span> devNeedCdn = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cdn = &#123;</span><br><span class="line">  <span class="comment">// cdn：模块名称和模块作用域命名（对应window里面挂载的变量名称）</span></span><br><span class="line">  <span class="attr">externals</span>: &#123;</span><br><span class="line">      <span class="attr">vue</span>: <span class="string">&#x27;Vue&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;vue-router&#x27;</span>: <span class="string">&#x27;VueRouter&#x27;</span>,</span><br><span class="line">      <span class="attr">vuex</span>: <span class="string">&#x27;Vuex&#x27;</span>,</span><br><span class="line">      <span class="string">&quot;element-ui&quot;</span>: <span class="string">&quot;ELEMENT&quot;</span>,</span><br><span class="line">      <span class="string">&#x27;axios&#x27;</span>: <span class="string">&#x27;axios&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// cdn的css链接</span></span><br><span class="line">  <span class="attr">css</span>: [</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.6/theme-chalk/index.min.css&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// cdn的js链接</span></span><br><span class="line">  <span class="attr">js</span>: [</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vue-router@3.1.3/dist/vue-router.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.jsdelivr.net/npm/vuex@3.6.2/dist/vuex.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcss.com/axios/0.26.1/axios.min.js&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;https://cdn.bootcdn.net/ajax/libs/element-ui/2.15.6/index.min.js&#x27;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">lintOnSave</span>: <span class="literal">false</span>, <span class="comment">// 关闭eslint</span></span><br><span class="line"><span class="attr">publicPath</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? <span class="string">&#x27;&#x27;</span><span class="comment">//这里写展示页面的仓库名称</span></span><br><span class="line">    : <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// ============注入cdn start============</span></span><br><span class="line">config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 生产环境或本地需要cdn时，才注入cdn</span></span><br><span class="line"><span class="keyword">if</span> (isProduction || devNeedCdn) args[<span class="number">0</span>].<span class="property">cdn</span> = cdn</span><br><span class="line"><span class="keyword">return</span> args</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 用cdn方式引入，则构建时要忽略相关资源</span></span><br><span class="line"><span class="keyword">if</span> (isProduction || devNeedCdn) config.<span class="property">externals</span> = cdn.<span class="property">externals</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><ul><li>这里也需要说明一下，这个index.html页面的位置一般在public目录下。<br>需要给index.html的<code>&lt;head&gt;</code>里面加点东西，才能使上面的加速链接载入到head里面。</li><li>写入下面的代码到<code>&lt;head&gt;</code>里面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class="line"> htmlWebpackPlugin.options.cdn.css) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.css[i] %&gt;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;external nofollow&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的CSS文件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br><span class="line">&lt;% for (var i in htmlWebpackPlugin.options.cdn &amp;&amp;</span><br><span class="line"> htmlWebpackPlugin.options.cdn.js) &#123; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;&lt;%= htmlWebpackPlugin.options.cdn.js[i] %&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"><span class="comment">&lt;!-- 使用CDN的JS文件 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/09/03/Uq04qA.png" alt="Uq04qA.png"></p><blockquote><p><strong>注意，CDN的引用必须写在上面</strong></p></blockquote><ul><li>配置好之后，重写执行打包操作即可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CDN </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中的开发环境跨域问题</title>
      <link href="/posts/c99149db/"/>
      <url>/posts/c99149db/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue之axios在开发环境-生产环境中跨域问题的解决"><a href="#Vue之axios在开发环境-生产环境中跨域问题的解决" class="headerlink" title="Vue之axios在开发环境/生产环境中跨域问题的解决"></a>Vue之axios在开发环境/生产环境中跨域问题的解决</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><strong>什么是跨域？</strong></li></ul><p><img src="https://img.jbzj.com/file_images/article/202110/2021102410464313.png"></p><p>​        简单来说就是有上图这样的问题出现，控制台报错。</p><h3 id="为什么会出现跨域？"><a href="#为什么会出现跨域？" class="headerlink" title="为什么会出现跨域？"></a>为什么会出现跨域？</h3><ul><li><p>受到浏览器的同源策略限制，浏览器<strong>从一个域名</strong>的网页去请求<strong>另一个域名</strong>的资源时，<strong>域名、端口、协议</strong>任一不同，都是跨域。</p></li><li><p>跨域问题主要分出现在开发环境（本地运行）中的跨域，以及生产环境（部署于线上的环境）中的跨域</p></li></ul><h2 id="开发环境（即本地运行）"><a href="#开发环境（即本地运行）" class="headerlink" title="开发环境（即本地运行）"></a>开发环境（即本地运行）</h2><h3 id="在Vue2-0中"><a href="#在Vue2-0中" class="headerlink" title="在Vue2.0中"></a><strong>在Vue2.0中</strong></h3><ol><li>先配置好axios的baseURL，即下面代码段中的 axios.defaults.baseURL = ‘/api/‘，作用是我们每次发送的请求都会带一个/api/的前缀。<strong>这段代码可以写在main.js中，也可以写在一个request.js的文件中单独作为axios的配置文件，方便维护。</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置请求的根路径</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api/&#x27;</span></span><br><span class="line"><span class="comment">// 挂载到原型对象之前 先设置拦截器 通过axios请求拦截器添加token，保证拥有获取数据的权限</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//在 request 拦截器中， 展示进度条 NProgress.start() </span></span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>()</span><br><span class="line">  <span class="comment">// 为请求头对象添加Token验证的Authorization字段</span></span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">Authorization</span> = <span class="variable language_">window</span>.<span class="property">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">  <span class="comment">// 最后都必须 return config</span></span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 在 response 拦截器中， 隐藏进度条 NProgress.done()</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>()</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>配置代理</strong>，（配置在vue.config.js文件中的proxyTable字段中）</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">          <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>, <span class="comment">//要解决跨域的接口的域名</span></span><br><span class="line">          <span class="attr">secure</span>:<span class="literal">false</span>,           <span class="comment">//如果是https接口，需要配置这个参数</span></span><br><span class="line">          <span class="attr">ws</span>: <span class="literal">true</span>,  <span class="comment">//如果要代理 websockets，配置这个参数</span></span><br><span class="line">          <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 允许跨域</span></span><br><span class="line">          <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">           <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>   <span class="comment">// 标识替换，使用 &#x27;/api&#x27; 代替真实的接口地址，路径重写</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>target后面的就是需要请求的网址的公共部分，然后用<code>/apis</code>来代理这个，最后重写一些路径，请求的时候使用的我们的代理的apis来作为前缀。</li></ol><p><img src="https://m1.im5i.com/2022/09/01/Uqn3xD.png" alt="Uqn3xD.png"></p><ul><li>简单来说，就是用<code>/apis</code>来代替前面要跨域的接口网站，比如上面要跨域的网站域名是<a href="http://localhost:8080/%EF%BC%8C%E9%82%A3%E4%B9%88%E8%BF%99%E4%B8%AA%60/apis%60%E5%B0%B1%E6%98%AF%E4%BB%A3%E6%9B%BF%E5%AE%83%E7%9A%84%E5%88%AB%E7%A7%B0%EF%BC%8C%E5%B0%B1%E6%98%AF%E6%8D%A2%E4%BA%86%E4%B8%AA%E5%90%8D%E5%AD%97%E8%80%8C%E5%B7%B2%EF%BC%8C%E4%BD%86%E6%98%AF%E5%AE%83%E8%B5%B7%E5%88%B0%E4%BA%86%E4%BB%A3%E7%90%86%E7%9A%84%E4%BD%9C%E7%94%A8%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E3%80%82">http://localhost:8080/，那么这个`/apis`就是代替它的别称，就是换了个名字而已，但是它起到了代理的作用，可以实现跨域请求。</a></li></ul><h3 id="在Vue3-0中"><a href="#在Vue3-0中" class="headerlink" title="在Vue3.0中"></a><strong>在Vue3.0中</strong></h3><ul><li><p>vue-cli3 脚手架搭建完成后，项目目录中没有 vue.config.js 文件，需要手动创建</p><p>新建一个vue.config.js，配置以下信息，同样可以解决。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;   </span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;^/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:8080/&#x27;</span>,<span class="comment">//接口的前缀</span></span><br><span class="line">                <span class="attr">ws</span>:<span class="literal">true</span>,<span class="comment">//代理websocked</span></span><br><span class="line">                <span class="attr">changeOrigin</span>:<span class="literal">true</span>,<span class="comment">//虚拟的站点需要更管origin</span></span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;</span><br><span class="line">                    <span class="string">&#x27;^/api&#x27;</span>:<span class="string">&#x27;&#x27;</span><span class="comment">//重写路径</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a><strong>小结</strong></h3><ul><li><p><strong>changeOrigin: true</strong> ：开启代理：在本地会创建一个虚假服务器，然后发送请求的数据，并同时接收请求的数据，这样服务端和服务端就可以进行数据的交互。</p></li><li><p><code>apis</code>就是接口实际请求的前缀，去代理了我们的实际的接口前缀的公共部分</p></li><li><p>比如 请求接口为<code>localhost:8080/getData</code> 我们只需要传入：getData</p></li></ul><h2 id="withCredentials属性"><a href="#withCredentials属性" class="headerlink" title="withCredentials属性"></a><strong>withCredentials属性</strong></h2><ul><li>最近在开发调试的过程出现了跨域的另一种情况</li><li><strong>The value of the ‘Access-Control-Allow-Origin’ header in the response must not be the wildcard ‘*’ when the request’s credentials mode is ‘include’.</strong></li></ul><blockquote><p>对于附带身份凭证的请求，服务器不得设置 Access-Control-Allow-Origin 的值为“<em>”。这是因为请求的首部中携带了 Cookie 信息，如果 Access-Control-Allow-Origin 的值为“</em>”，请求将会失败。而将 Access-Control-Allow-Origin 的值设置为 <a href="https://link.segmentfault.com/?enc=AVaUqvTmgIKHbpBJZHrIVg==.kM+bUI+qP58augszCqHbghZF3x7rrhsC14KON9bw/14=">http://foo.example</a>，则请求将成功执行。</p></blockquote><ul><li><p>也就是说<code>Access-Control-Allow-Credentials</code>设置为<code>true</code>的情况下<br><code>Access-Control-Allow-Origin</code>不能设置为<code>*</code></p></li><li><p>ps: 关于指定域名 可以在后端用个<code>array</code>类似的存一个白名单域名列表<br>如果有请求 先判断 <code>Origin</code> 是否在白名单里 然后再动态设置 <code>Access-Control-Allow-Origin</code></p></li><li><p>前端的解决办法就是将withCredentials属性设为false即可</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="comment">// withCredentials: true, //axios 设置请求自动携带cookie</span></span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">false</span>, <span class="comment">// 不携带cookie请求</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>我的项目是不需要cookie的，如果项目需要携带cookie的话，那么是要后端配置的。</li></ul><h2 id="SpringBoot解决跨域问题"><a href="#SpringBoot解决跨域问题" class="headerlink" title="SpringBoot解决跨域问题"></a>SpringBoot解决跨域问题</h2><h3 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h3><p><strong>在Spring Boot 中给我们提供了一个注解 @CrossOrigin 来实现跨域，这个注解可以实现方法级别的细粒度的跨域控制。</strong></p><p>我们可以在类或者方添加该注解，如果在类上添加该注解，该类下的所有接口都可以通过跨域访问，如果在方法上添加注解，那么仅仅只限于加注解的方法可以访问。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/findAll&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h3><p>在Springboot项目里加上这个配置文件<code>CorsConfig.java</code>，重启之后即可实现跨域访问，前端无需再配置跨域。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前跨域请求最大有效时长。这里默认1天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_AGE</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>); <span class="comment">// 1 设置访问源地址</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>); <span class="comment">// 2 设置访问源请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>); <span class="comment">// 3 设置访问源请求方法</span></span><br><span class="line">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, corsConfiguration); <span class="comment">// 4 对接口配置跨域设置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css之div盒子居中常用方法</title>
      <link href="/posts/2566378a/"/>
      <url>/posts/2566378a/</url>
      
        <content type="html"><![CDATA[<h1 id="css之div盒子居中常用方法"><a href="#css之div盒子居中常用方法" class="headerlink" title="css之div盒子居中常用方法"></a>css之div盒子居中常用方法</h1><h2 id="绝对定位居中"><a href="#绝对定位居中" class="headerlink" title="绝对定位居中"></a><strong>绝对定位居中</strong></h2><ul><li>这个方法就是利用绝对定位，使它的top、left、right、bottom都为0就可以实现居中</li></ul><p>​    <strong>演示结构：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父盒子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 子盒子 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;children_box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <strong>CSS样式结构：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="comment">/* margin要设为auto，作用是通过分配auto元素的左右边距，它们可以平等地占据元素容器中的可用水平空间 - 因此元素将居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>​    <strong>样式效果</strong>：</p><p><img src="https://m1.im5i.com/2022/08/31/Uqn9jK.png" alt="Uqn9jK.png"></p><ul><li>这个方法用在垂直居中都可以，就使它的上下为 0 就可以实现垂直居中</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnSSC.png" alt="UqnSSC.png"></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">position</span>: absolute; <span class="comment">/* 绝对定位 */</span></span><br><span class="line">    <span class="comment">/* 上下设为0 */</span></span><br><span class="line"><span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* margin要设为auto，作用是通过分配auto元素的左右边距，它们可以平等地占据元素容器中的可用水平空间 - 因此元素将居中 */</span></span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="flex布局居中"><a href="#flex布局居中" class="headerlink" title="flex布局居中"></a>flex布局居中</h2><ul><li>主轴设为居中，justify-content: center，一般主轴默认为x轴方向，那么就是水平居中，像下面这样👇</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqneBH.png" alt="UqneBH.png"></p><ul><li>侧轴设为居中，align-items: center，一般侧轴默认为y轴方向，那么就是垂直居中，像下面这样👇</li></ul><p><a href="https://macimg.com/image/UqnJna"><img src="https://m1.im5i.com/2022/08/31/UqnJna.png" alt="UqnJna.png"></a></p><ul><li><strong>综上，父盒子设为flex布局，然后再将主轴和侧轴都设为center，就可以让子盒子达到整体居中的效果了</strong></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="comment">/* 弹性布局设置 */</span></span><br><span class="line"><span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* justify-content 设置主轴上子元素排列方式,如果主轴是x轴则水平居中（一般默认是x轴） */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="comment">/* align-items 设置了侧轴上元素的排列方式，如果主轴是y轴则垂直居中（一般默认是y轴） */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><strong>实现效果：</strong></li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnaGT.png" alt="UqnaGT.png"></p><h2 id="translate居中"><a href="#translate居中" class="headerlink" title="translate居中"></a>translate居中</h2><ul><li><strong>移动 translate(x, y)</strong></li></ul><p>​        比如 <strong>translate(50px,50px);</strong></p><p>​        上面这条可以通过translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素</p><p>​        可以改变元素的位置，x、y可为负值；</p><blockquote><p><strong>translate(x,y);</strong> 水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动）</p><p><strong>translateX(x);</strong> 仅水平方向移动（X轴移动）</p><p><strong>translateY(y);</strong> 仅垂直方向移动（Y轴移动）</p></blockquote><ul><li>可以通过设置父盒子为<strong>relative</strong>，即相对定位，子盒子设为<strong>absolute</strong>，即绝对定位，然后<strong>上和左</strong>都设为50%，再利用translate(-50% , -50%)实现在水平和垂直方向都移动-50%的相对距离，实现子盒子整体的居中效果。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000000</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.children_box</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#0400ff</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span> , -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+jsDelivr给网站静态资源键入免费的CDN加速</title>
      <link href="/posts/b93f757/"/>
      <url>/posts/b93f757/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-jsDelivr给网站静态资源键入免费的CDN加速"><a href="#Github-jsDelivr给网站静态资源键入免费的CDN加速" class="headerlink" title="Github+jsDelivr给网站静态资源键入免费的CDN加速"></a>Github+jsDelivr给网站静态资源键入免费的CDN加速</h1><ul><li><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。——百度百科</p></li><li><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，jsDelivr + Github便是免费且好用的CDN，非常适合博客网站使用。</p></li><li><p>jsDelivr可以为发布在GitHub上面的js、css、jpg等文件进行免费的CDN加速，虽然速度可能不算很快，但是相比于用GitHub直接来打开，速度还是有显著的提升的。</p></li><li>比如我自己发布的一个js文件：<a href="https://cdn.jsdelivr.net/gh/AliveLeqi/MyResume@v1.0/js/scripts.js">https://cdn.jsdelivr.net/gh/AliveLeqi/MyResume@v1.0/js/scripts.js</a></li><li>除此之外，还有其他CDN加速的方法，比如又拍云、七牛云、腾讯云等服务商都提供了国内的全站资源加速，若想要更快的速度，最好还是用上面的这些服务商提供的CDN。<strong>不过，jsDelivr可以白嫖，直接免费使用，而且也是大厂，一般来说也不会崩掉，所以还是非常Nice的，这个东西。</strong></li></ul><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>创建新的Github仓库，用于存放要进行加速的文件，比如js、css等静态资源文件。</li></ol><p><img src="https://m1.im5i.com/2022/08/31/UqnqB7.png" alt="UqnqB7.png"></p><ol><li>上传要加速的文件</li></ol><p><img src="https://m1.im5i.com/2022/08/31/UqnFnp.png" alt="UqnFnp.png"></p><ul><li>这里我作演示，就直接上传一个css文件示范一下，所以直接在网站上传即可，如果要上传多个文件或者是文件夹，最好用git工具上传，用git上传也很简单，按照上图旁边的演示来操作即可。</li></ul><ol><li>创建一个release</li></ol><p><img src="https://m1.im5i.com/2022/08/31/UqnV5v.png" alt="UqnV5v.png"></p><ul><li>新建一个发布版本为1.0，选好分支，一般要选加速文件所在的分支，填好必要信息之后即可发布。</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnWwG.png" alt="UqnWwG.png"></p><ul><li>发布成功页面，可以看到版本号</li></ul><p><img src="https://m1.im5i.com/2022/08/31/UqnGiY.png" alt="UqnGiY.png"></p><ol><li>用jsDelivr访问即可</li></ol><blockquote><p><a href="https://cdn.jsdelivr.net/gh/">https://cdn.jsdelivr.net/gh/</a>&lt;github账号&gt;/&lt;仓库名称&gt;@&lt;版本号&gt;/&lt;文件路径&gt;/&lt;文件名&gt; 不输入版本号默认访问最新版本</p></blockquote><ul><li><p>前面的域名+gh是固定的</p></li><li><p>需要改的是后面，这里我的github账号用户名是”<strong>AliveSeven</strong>“，刚才的仓库名称是”<strong>jsDelivrFile</strong>“，版本号是1.0，文件路径是”<strong>/流光按钮.css</strong>“</p></li><li>所以加速的地址是<a href="https://cdn.jsdelivr.net/gh/AliveSeven/jsDelivrFile@v1.0/流光按钮.css">https://cdn.jsdelivr.net/gh/AliveSeven/jsDelivrFile@v1.0/流光按钮.css</a></li></ul><hr><p><strong>以上就是整个加速过程，是不是很简单捏</strong></p><blockquote><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源，除此之外还可以使用某个范围内的版本，查看所有资源等，具体使用方法如下：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 加载任何Github发布、提交或分支</span><br><span class="line">https://cdn.jsdelivr.net/gh/user/repo@version/file</span><br><span class="line"></span><br><span class="line">// 加载 jQuery v3.2.1</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line">// 使用版本范围而不是特定版本</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2/dist/jquery.min.js</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line">// 完全省略该版本以获取最新版本</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery/dist/jquery.min.js</span><br><span class="line"></span><br><span class="line">// 将“.min”添加到任何JS/CSS文件中以获取缩小版本，如果不存在，将为会自动生成</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery@3.2.1/src/core.min.js</span><br><span class="line"></span><br><span class="line">// 在末尾添加 / 以获取资源目录列表</span><br><span class="line">https://cdn.jsdelivr.net/gh/jquery/jquery/</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jsDelivr </tag>
            
            <tag> CDN </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中组件的props属性</title>
      <link href="/posts/cc0645d9/"/>
      <url>/posts/cc0645d9/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue中组件的props属性"><a href="#Vue中组件的props属性" class="headerlink" title="Vue中组件的props属性"></a>Vue中组件的props属性</h1><h2 id="props的使用和原理"><a href="#props的使用和原理" class="headerlink" title="props的使用和原理"></a>props的使用和原理</h2><p>​        props主要用于组件的传值，他的工作就是为了接收外面传过来的数据，与data、el、ref是一个级别的配置项</p><p><strong>1. 定义被调用组件</strong></p><p>​        首先，我们先定义一个person组件，用于显示个人信息的组件，我们放了一个人的姓名，性别，以及年龄，定义好这个组件之后，就可以等待其他组件进行调用。那么既然别的组件可以调用，我们就需要再定义一个props属性，用于接收别的组件传进来的值。</p><p><img src="https://m1.im5i.com/2022/08/30/UqnDRS.png" alt="UqnDRS.png"></p><blockquote><p><strong>注意：</strong>组件中name、sex、age都是一个prop，将三个属性放到一起，就是props，这就是props的由来，是prop的复数形式，代表多个prop属性的集合。</p></blockquote><p><strong>2. 调用组件</strong></p><p>​        此时我们再定义一个info组件，用于展示这个人的基本信息，进行对person组价的调用实现信息的展示，分为下图四个步骤进行调用。并传入参数</p><p><img src="https://m1.im5i.com/2022/08/31/Uqndd0.png" alt="Uqndd0.png"></p><p><strong>3. 传入效果</strong></p><p><img src="https://m1.im5i.com/2022/08/31/UqniCB.png" alt="UqniCB.png"></p><h2 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h2><ul><li>那如果我们想给年龄加1岁，怎么实现？</li></ul><p>​        我们可能会直接这样加1</p><p><img src="https://m1.im5i.com/2022/08/31/Uqnxlz.png" alt="Uqnxlz.png"></p><p>​        看效果是否能实现，变成19，看下图显然是不正确的。因为你传入的年龄是个字符串18，所以加1只会在18后面进行拼接。</p><p><img src="https://m1.im5i.com/2022/08/31/UqnLXs.png" alt="UqnLXs.png"></p><p>​        <strong>然后有的人说，那传数字，怎么传数字呢？很简单，一个符号搞定。</strong></p><p>​        我们只需要在<strong>age前面加上冒号</strong> ：他就会只识别双引号里面的东西18 ，否则识别的是双引号18</p><p><img src="https://m1.im5i.com/2022/08/31/UqngMo.png" alt="UqngMo.png"></p><p>​        看下效果，此时就成功了。</p><p><img src="https://m1.im5i.com/2022/08/31/Uqns9W.png" alt="Uqns9W.png"></p><h2 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h2><ul><li>对于年龄这一类型，我们最希望拿到的是什么数据类型？肯定是数字类型，但是有人非要传字符串类型，就会影响我们对年龄的计算，比如上面的加1……那么我们如何限制类型呢</li></ul><p>​        这时候props不能再用[]去定义，需要用{}，因为限制类型时，props就是作为一个对象去使用；</p><p>​        下面就是我们将三个属性分别做了限制。</p><p><img src="https://m1.im5i.com/2022/08/31/UqnnBx.png" alt="UqnnBx.png"></p><p>​        我们把年龄做了number类型限制后，再传入字符串18，看有什么变化？</p><p><img src="https://m1.im5i.com/2022/08/31/UqnrsQ.png" alt="UqnrsQ.png"></p><p>​         <strong>此时发现控制台，会报错，显示age的数据类型不匹配。</strong></p><p><a href="https://macimg.com/image/Uqn05q"><img src="https://m1.im5i.com/2022/08/31/Uqn05q.png" alt="Uqn05q.png"></a></p><p>​        虽然不影响展示，但是会报错。这可以给我们提供一个明确的提示。方便我们规范的传入数据。</p><h2 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h2><ul><li><strong>可以限制类型，那么可以限制必传吗</strong></li></ul><p>​                <strong>答：可以</strong></p><p>​        假设姓名必传，其他非必传。</p><p>​        <strong>类型属性：</strong>type:xx</p><p>​        <strong>必传属性：</strong>required：true</p><p>​        <strong>默认属性：</strong>default：xx</p><p><img src="https://m1.im5i.com/2022/08/31/UqnEwD.png" alt="UqnEwD.png"></p><blockquote><p>对以上总结：</p><p>props在接收数据的同时，对数据进行了<strong>类型限制+默认值的指定+必要性的限制</strong></p></blockquote><h2 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h2><ul><li><strong>props接收的属性值可以修改吗？</strong></li></ul><p>​            <strong>答：不可以</strong></p><p>​        我们添加一个button，以及点击事件</p><p><img src="https://m1.im5i.com/2022/08/31/Uqnjdy.png" alt="Uqnjdy.png"></p><p>​        注意：我们要访问props里面的属性值，通过this.即可找到</p><p><img src="https://m1.im5i.com/2022/08/31/UqnTch.png" alt="UqnTch.png"></p><pre><code>     查看结果，发现页面可以显示，但是控制台报错，因此它是不可修改的</code></pre><p><img src="https://m1.im5i.com/2022/08/31/UqnZlX.png" alt="UqnZlX.png"></p><p><img src="https://m1.im5i.com/2022/08/31/UqnhXf.png" alt="UqnhXf.png"></p><h3 id="必须要修改props属性值，怎么办？"><a href="#必须要修改props属性值，怎么办？" class="headerlink" title="必须要修改props属性值，怎么办？"></a>必须要修改props属性值，怎么办？</h3><ul><li><strong>通过data去间接修改</strong></li></ul><p>​        我们在data里面重新定义一个变量去接收props属性。这个变量最好不要重名，<strong>重名</strong>的话，优先获取props属性值，<strong>优先级props&gt;data</strong>。然后我们在操作或者html绑定值的时候，都去操作data里面新定义的变量</p><p><img src="https://m1.im5i.com/2022/08/31/UqnCjM.png" alt="UqnCjM.png"></p><p>​        此时可以看到，修改成功，也没有报错：</p><p><img src="https://m1.im5i.com/2022/08/31/Uqnc93.png" alt="Uqnc93.png"></p><h2 id="总结：配置项props"><a href="#总结：配置项props" class="headerlink" title="总结：配置项props"></a>总结：配置项props</h2><p><strong>———-让组件接收外部传来的数据</strong></p><p><strong>接收数据三种方式：</strong></p><p><strong>（1）</strong>只接收：<strong>props: [‘name’,’age’,’sex’]</strong></p><p><strong>（2）</strong>接收并限制类型：<strong>props: {“name”:String}</strong></p><p><strong>（3）</strong>限制类型、限制必要性指定默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">Number</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="number">18</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;sex&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>注意：props是只读的，vue底层会检测你对props的修改，如果进行了修改，控制台会报错，必须修改，就复制一份到data中，通过data去修改数据。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue基础</title>
      <link href="/posts/4b668c47/"/>
      <url>/posts/4b668c47/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue基础"><a href="#Vue基础" class="headerlink" title="Vue基础"></a>Vue基础</h1><h2 id="el-挂载点"><a href="#el-挂载点" class="headerlink" title="el:挂载点"></a>el:挂载点</h2><p>先导入Vue.js到HTML中，在创建Vue实例时，需要传入一个选项对象，选项对象的el属性指向View</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开发环境版本，包含了有帮助的命令行警告 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// #是id选择器，点.是class的选择器</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// el: &quot;#app&quot;，通过el挂载id为app的标签，对里面的data作出编辑，可以进行嵌套，如下面的设置是对data中的&#123;&#123;message&#125;&#125;作出编辑输出&quot;Hello Vue!&quot;，凡是挂载的标签里面的&#123;&#123;message&#125;&#125;都有这个效果，就是可以嵌套</span></span></span><br><span class="line"><span class="language-javascript">        el : <span class="string">&quot;.app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;Hello Vue!&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Vue实例的作用范围？"><a href="#Vue实例的作用范围？" class="headerlink" title="Vue实例的作用范围？"></a>Vue实例的作用范围？</h3><ul><li>Vue会管理el选项命中的元素及其内部的后台元素</li></ul><h3 id="是否可以使用其他的选择器？"><a href="#是否可以使用其他的选择器？" class="headerlink" title="是否可以使用其他的选择器？"></a>是否可以使用其他的选择器？</h3><ul><li>可以使用其他选择器，建议用id</li></ul><h3 id="是否可以设置其他的dom元素？"><a href="#是否可以设置其他的dom元素？" class="headerlink" title="是否可以设置其他的dom元素？"></a>是否可以设置其他的dom元素？</h3><ul><li>dom是文档对象模型，假如有一段这样的代码：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>我的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么它的dom模型树就是长这样的</p><p><img src="https://pica.zhimg.com/v2-69d53b19c03ddc8bd3bc047f328de929_r.jpg?source=1940ef5c" alt="preview"></p><p>回到正题，一般Vue的el挂载点不能使用html和body来挂载，其他双标签可以</p><h2 id="data-数据对象"><a href="#data-数据对象" class="headerlink" title="data:数据对象"></a>data:数据对象</h2><ul><li><p>Vue可以像Java、Python等编程语言那样，用xxx.xxx来表示要展示的对象</p><p>比如↓</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    &#123;&#123;message&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        &#123;&#123;school.name&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        &#123;&#123;campus[0]&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        el : <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;Hello Vue!&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//注意要加逗号，字符串要加双引号</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">school</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                name : <span class="string">&quot;逗乐哥&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                mobile : <span class="string">&quot;10086&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">campus</span>: [<span class="string">&quot;香港校区&quot;</span>,<span class="string">&quot;深圳校区&quot;</span>]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后输出结果如下↓</p><p><img src="https://m1.im5i.com/2022/08/29/Uqgvfo.png" alt="Uqgvfo.png"></p><h2 id="v-text"><a href="#v-text" class="headerlink" title="v-text"></a>v-text</h2><ul><li><p>在标签如<code>&lt;div&gt;，&lt;h1&gt;</code>这样的标签里面插入v-text，只会显示v-text所指向的那个的对象的内容，而用双括号可以在后面加上东西</p><p>看代码和输出结果↓</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span> = <span class="string">&quot;message + &#x27;！！哈哈哈哈&#x27;&quot;</span>&gt;</span>这里输入什么都不会显示出来<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span> = <span class="string">&quot;message + &#x27;！！哈哈哈哈&#x27;&quot;</span>&gt;</span>还是没有显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;！！呵呵<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;真别逗我乐&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            info : <span class="string">&quot;我直接杀爆&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/08/29/Uqg14W.png" alt="Uqg14W.png"></p><h2 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h2><ul><li>和v-text没有多大区别，区别在于要是修饰的标签是超链接，或者是有html结构的，可以用这个，这个修饰之后表现出来的就是一个超链接，而不是文本，如果修饰的是文本，用v-text</li></ul><h2 id="v-on"><a href="#v-on" class="headerlink" title="v-on"></a>v-on</h2><ul><li><p>v-on指令的作用是：为元素绑定事件</p></li><li><p>事件名不需要写no</p></li><li><p>指令可以简写为@</p></li><li><p>绑定的方法定义在methods属性中</p><p>实例代码：按下h1那部分的代码可以增加””好好吃！”字样到data的food后面，按下上面三个按钮会弹出警告”做It”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on指令&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doIt&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;v-on简写&quot;</span> @<span class="attr">click</span> = <span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;双击事件&quot;</span> @<span class="attr">dbclikck</span> = <span class="string">&quot;doIt&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> @<span class="attr">click</span> = <span class="string">&quot;changeFood&quot;</span>&gt;</span>&#123;&#123;food&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">food</span>:<span class="string">&quot;西兰花炒鸡蛋&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//方法名是doIt</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">doIt</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//发出警告提示“做It”</span></span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">alert</span>(<span class="string">&quot;做It&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">changeFood</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">food</span> += <span class="string">&quot;好好吃！&quot;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="keyup"><a href="#keyup" class="headerlink" title="keyup"></a>keyup</h3><ul><li>v-on:keyup.enter/@keyup.enter ：按下回车触发事件</li><li>v-on:keyup.alt.enter/@keyup.alt.enter ：按下alt+enter键触发事件</li></ul><h3 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h3><ul><li>Vue.js中的该方法实现了对数组的增删改操作</li><li>结构：splice(index,len,[item])</li><li>index ：数组开始的下标</li><li>len：替换/删除的长度</li><li>item：替换的值，删除操作的话item为空</li></ul><h2 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h2><ul><li>根据表达式的真假，切换元素的显示和隐藏，v-show = true的时候显示，false的时候隐藏。</li></ul><h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><ul><li><p>在html代码中，v-bind绑定的是动态的表达式，而非固定的字符串，在v-bind后，就可以动态获取数据。</p><p>可以将v-bind理解为： <strong>被v-bind修饰的都是动态获取的值。 而非被v-bind修饰的，仅仅是一个字符串</strong></p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><ul><li><p>根据数据生成列表结构</p><p>使用效果代码↓</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in arr&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;index&#125;&#125; 逗乐了 &#123;&#123;item&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in vegetables&quot;</span> <span class="attr">v-bind:title</span> = <span class="string">&quot;item.name&quot;</span> &gt;</span></span><br><span class="line">            &#123;&#123;item.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">arr</span>: [<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;上海&quot;</span>,<span class="string">&quot;香港&quot;</span>,<span class="string">&quot;深圳&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">vegetables</span>:[&#123;<span class="attr">name</span>:<span class="string">&quot;西兰花炒蛋&quot;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="attr">name</span>:<span class="string">&quot;蛋炒西兰花&quot;</span>&#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/08/29/Uqgu0x.png" alt="Uqgu0x.png"></p><h2 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h2><ul><li>获取和设置表单元素的值（双向数据绑定），元素一方改变了，另一个地方也跟着变了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123; </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>, </span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            message : <span class="string">&quot;我是张杰，逗乐了&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="v-lazy"><a href="#v-lazy" class="headerlink" title="v-lazy"></a>v-lazy</h2><ul><li>v-lazy：懒加载</li><li>使用懒加载的目的：当页面需要加载大量图片时（需要向下滚动页面），使用懒加载可以实现只优先加载页面可视区域的图片，从而使得页面加载更为流畅。</li><li>需要安装，cnpm i vue-lazyload -S</li><li>目标页面使用👇</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//直接将 &#x27;:src&#x27; 替换为 &#x27;v-lazy&#x27; 即可</span><br><span class="line">&lt;img v-lazy=&quot;img.src&quot; &gt;</span><br><span class="line">&lt;img :src=&quot;img.src&quot; &gt;</span><br></pre></td></tr></table></figure><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>网络请求库，Axios 是一个基于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">Promise</a> 的 HTTP 库，可以用在浏览器和 node.js 中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;获取笑话&quot;</span> <span class="attr">class</span>=<span class="string">&quot;get&quot;</span> @<span class="attr">click</span> = <span class="string">&quot;getJoke&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;joke&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            joke : <span class="string">&quot;笑话&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//设置方法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//方法getJoke</span></span></span><br><span class="line"><span class="language-javascript">           <span class="attr">getJoke</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="comment">//调用axios.get方法，后面紧跟接口链接，链接返回结果保存在res里面，通过console.log将res输出到控制台上面</span></span></span><br><span class="line"><span class="language-javascript">               axios.<span class="title function_">get</span>(<span class="string">&quot;https://autumnfish.cn/api/joke/list?num=1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">               .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span></span><br><span class="line"><span class="language-javascript">                   <span class="comment">//改变参数joke的值</span></span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">this</span>.<span class="property">joke</span> = res.<span class="property">data</span>.<span class="property">jokes</span>[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">               &#125;)</span></span><br><span class="line"><span class="language-javascript">               .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                   <span class="variable language_">console</span>.<span class="title function_">error</span>(err); </span></span><br><span class="line"><span class="language-javascript">               &#125;)</span></span><br><span class="line"><span class="language-javascript">           &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        接口1:随机笑话</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        请求地址:https://autumnfish.cn/api/joke/list</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        请求方法:get</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        请求参数:num(笑话条数,数字)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        响应内容:随机笑话</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         接口2:用户注册</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         请求地址:https://autumnfish.cn/api/user/reg</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         请求方法:post</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         请求参数:username(用户名,字符串)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         响应内容:注册成功或失败</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">     */</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://m1.im5i.com/2022/08/29/Uqg3zQ.gif" alt="Uqg3zQ.gif"></p><h1 id="Vue进阶"><a href="#Vue进阶" class="headerlink" title="Vue进阶"></a>Vue进阶</h1><h2 id="ES6语法"><a href="#ES6语法" class="headerlink" title="ES6语法"></a>ES6语法</h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><ul><li>和var关键字的用法基本一致，但是要先声明变量，才能使用</li></ul><h3 id="function可以省略"><a href="#function可以省略" class="headerlink" title="function可以省略"></a>function可以省略</h3><ul><li><p>function可以省略，替换为 =&gt;，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func1</span> = (<span class="params"></span>)=&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>参数只有一个的时候可以省略（），例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func2 = <span class="keyword">function</span>(<span class="params">p1</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func2</span> = p1=&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>参数有两个的话，不可以省略（），{}也不能省略，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func3 = <span class="title function_">functino</span>(<span class="params">p1,p2</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">func3</span> = (<span class="params">p1,p2</span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>没有参数，只有一行，有返回值的函数，如果 省略了{}，必须也要省略return，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> func4 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以替换为↓</span></span><br><span class="line"><span class="keyword">let</span> func4 ()=&gt; <span class="string">&#x27;Hello&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element-UI"></a>Element-UI</h2><h3 id="el-input-无法触发-keyup-enter-解决方法"><a href="#el-input-无法触发-keyup-enter-解决方法" class="headerlink" title="el-input 无法触发@keyup.enter 解决方法"></a>el-input 无法触发@keyup.enter 解决方法</h3><ul><li>@keyup.enter后面加上.<strong>native</strong></li><li>ps: 在 Vue 2.0 中，为自定义组件绑定原生事件必须使用 .native 修饰符，只有Button 组件可以监听 click 事件。</li><li>注意：v-model数据层一定要在@keyup.enter 事件之前。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios详细封装</title>
      <link href="/posts/7217ca4c/"/>
      <url>/posts/7217ca4c/</url>
      
        <content type="html"><![CDATA[<h1 id="axios-详细封装"><a href="#axios-详细封装" class="headerlink" title="axios 详细封装"></a>axios 详细封装</h1><h2 id="一、axios的封装"><a href="#一、axios的封装" class="headerlink" title="一、axios的封装"></a>一、axios的封装</h2><p>在vue项目中，和后台交互获取数据这块，我们通常使用的是axios库，<strong>它是基于promise的http库</strong>，<strong>可运行在浏览器端和node.js中</strong>。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换json、客户端防御XSRF等。所以我们的尤大大也是果断放弃了对其官方库vue-resource的维护，直接推荐我们使用axios库。如果还对axios不了解的，可以移步axios文档。</p><ul><li>安装</li></ul><p>​    npm install axios;    // 安装axios</p><ul><li>引入</li></ul><p>​    一般我会在项目的src目录中，新建一个request文件夹，然后在里面新建一个http.js和一个api.js文件。http.js文件用来封装我们的axios，api.js用来统一管理我们的接口。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在http.js中引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>; <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> <span class="variable constant_">QS</span> <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>; <span class="comment">// 引入qs模块，用来序列化post类型的数据，后面会提到</span></span><br><span class="line"><span class="comment">// vant的toast提示框组件，大家可根据自己的ui组件更改。</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>; </span><br></pre></td></tr></table></figure><ul><li>环境的切换</li></ul><p>​        我们的项目环境可能有开发环境、测试环境和生产环境。我们通过node的环境变量来匹配我们的默认的接口url前缀。axios.defaults.baseURL可以设置axios的默认请求地址就不多说了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;development&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://www.baidu.com&#x27;</span>;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;debug&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://www.ceshi.com&#x27;</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;production&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://www.production.com&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置请求超时</li></ul><p>​        通过axios.defaults.timeout设置默认的请求超时时间。例如超过了10s，就会告知用户当前请求超时，请刷新等。axios.defaults.timeout = 10000;</p><ul><li>post请求头的设置</li></ul><p>​        post请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置post的请求头为application/x-www-form-urlencoded;charset=UTF-8</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>;</span><br></pre></td></tr></table></figure><p>​    我们在发送请求前可以进行一个请求的拦截，为什么要拦截呢，我们拦截请求是用来做什么的呢？比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，我们需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作。</p><ul><li>请求拦截</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先导入vuex,因为我们要使用到里面的状态对象</span></span><br><span class="line"><span class="comment">// vuex的路径根据自己的路径去写</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;@/store/index&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">config</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="comment">// 每次发送请求之前判断vuex中是否存在token        </span></span><br><span class="line">        <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line">        <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断 </span></span><br><span class="line">        <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;        </span><br><span class="line">        token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token);        </span><br><span class="line">        <span class="keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error);    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​        这里说一下token，一般是在登录完成之后，将用户的token通过localStorage或者cookie存在本地，然后用户每次在进入页面的时候（即在main.js中），会首先从本地存储中读取token，如果token存在说明用户已经登陆过，则更新vuex中的token状态。然后，在每次请求接口的时候，都会在请求的header中携带token，后台人员就可以根据你携带的token来判断你的登录是否过期，如果没有携带，则说明没有登录过。这时候或许有些小伙伴会有疑问了，就是每个请求都携带token，那么要是一个页面不需要用户登录就可以访问的怎么办呢？其实，你前端的请求可以携带token，但是后台可以选择不接收啊！</p><ul><li>响应的拦截</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;   </span><br><span class="line">        <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据     </span></span><br><span class="line">        <span class="comment">// 否则的话抛出错误</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response);        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line">    <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码    </span></span><br><span class="line">    <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line">    <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;            </span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;            </span><br><span class="line">            <span class="keyword">switch</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;                </span><br><span class="line">                <span class="comment">// 401: 未登录</span></span><br><span class="line">                <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">                <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:                    </span><br><span class="line">                    router.<span class="title function_">replace</span>(&#123;                        </span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">query</span>: &#123; </span><br><span class="line">                            <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 403 token过期</span></span><br><span class="line">              <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">              <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">              <span class="comment">// 跳转登录页面                </span></span><br><span class="line">              <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">                   <span class="title class_">Toast</span>(&#123;</span><br><span class="line">                      <span class="attr">message</span>: <span class="string">&#x27;登录过期，请重新登录&#x27;</span>,</span><br><span class="line">                      <span class="attr">duration</span>: <span class="number">1000</span>,</span><br><span class="line">                      <span class="attr">forbidClick</span>: <span class="literal">true</span></span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="comment">// 清除token</span></span><br><span class="line">                  <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">                  store.<span class="title function_">commit</span>(<span class="string">&#x27;loginSuccess&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">                  <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 </span></span><br><span class="line">                  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;                        </span><br><span class="line">                      router.<span class="title function_">replace</span>(&#123;                            </span><br><span class="line">                          <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                            </span><br><span class="line">                          <span class="attr">query</span>: &#123; </span><br><span class="line">                              <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> </span><br><span class="line">                          &#125;                        </span><br><span class="line">                      &#125;);                    </span><br><span class="line">                  &#125;, <span class="number">1000</span>);                    </span><br><span class="line">                  <span class="keyword">break</span>; </span><br><span class="line">  </span><br><span class="line">              <span class="comment">// 404请求不存在</span></span><br><span class="line">              <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">                  <span class="title class_">Toast</span>(&#123;</span><br><span class="line">                      <span class="attr">message</span>: <span class="string">&#x27;网络请求不存在&#x27;</span>,</span><br><span class="line">                      <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">                      <span class="attr">forbidClick</span>: <span class="literal">true</span></span><br><span class="line">                  &#125;);</span><br><span class="line">                  <span class="keyword">break</span>;</span><br><span class="line">              <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">              <span class="attr">default</span>:</span><br><span class="line">                  <span class="title class_">Toast</span>(&#123;</span><br><span class="line">                      <span class="attr">message</span>: error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>,</span><br><span class="line">                      <span class="attr">duration</span>: <span class="number">1500</span>,</span><br><span class="line">                      <span class="attr">forbidClick</span>: <span class="literal">true</span></span><br><span class="line">                  &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作。</p><p>​    要注意的是，上面的Toast()方法，是我引入的vant库中的toast轻提示组件，你根据你的ui库，对应使用你的一个提示组件。</p><ul><li>封装get方法和post方法</li></ul><p>​    我们常用的ajax请求方法有get、post、put等方法，相信小伙伴都不会陌生。axios对应的也有很多类似的方法，不清楚的可以看下文档。但是为了简化我们的代码，我们还是要对其进行一个简单的封装。下面我们主要封装两个方法：get和post。</p><ul><li>get方法：</li></ul><p>​    我们通过定义一个get函数，get函数有两个参数，第一个参数表示我们要请求的url地址，第二个参数是我们要携带的请求参数。get函数返回一个promise对象，当axios其请求成功时resolve服务器返回 值，请求失败时reject错误值。最后通过export抛出get函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>)&#123;    </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;        </span><br><span class="line">       axios.<span class="title function_">get</span>(url, &#123;            </span><br><span class="line">           <span class="attr">params</span>: params        </span><br><span class="line">       &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);</span><br><span class="line">       &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)        </span><br><span class="line">   &#125;)    </span><br><span class="line">   &#125;);&#125;</span><br></pre></td></tr></table></figure><ul><li>post方法：</li></ul><p>​        原理同get基本一样，但是要注意的是，post方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过node的qs模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的。这就是文章开头我们import QS from ‘qs’;的原因。如果不明白序列化是什么意思的，就百度一下吧，答案一大堆。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        axios.<span class="title function_">post</span>(url, <span class="variable constant_">QS</span>.<span class="title function_">stringify</span>(params))</span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);</span><br><span class="line">       &#125;)</span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>​        这里有个小细节说下，axios.get()方法和axios.post()在提交数据时参数的书写方式还是有区别的。区别就是，get的第二个参数是一个{}，然后这个对象的params属性值是一个参数对象的。而post的第二个参数就是一个参数对象。两者略微的区别要留意哦！</p><ul><li>axios的封装基本就完成了，下面再简单说下api的统一管理。</li></ul><p>​        整齐的api就像电路板一样，即使再复杂也能很清晰整个线路。上面说了，我们会新建一个api.js,然后在这个文件中存放我们所有的api接口。</p><p>首先我们在api.js中引入我们封装的get和post方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  api接口统一管理 </span></span><br><span class="line"><span class="keyword">import</span> &#123; get, post &#125; <span class="keyword">from</span> <span class="string">&#x27;./http&#x27;</span></span><br></pre></td></tr></table></figure><p>现在，例如我们有这样一个接口，是一个post请求：</p><p><a href="http://www.baiodu.com/api/v1/users/my_address/address_edit_before">http://www.baiodu.com/api/v1/users/my_address/address_edit_before</a><br>我们可以在api.js中这样封装：</p><p>export const apiAddress = p =&gt; post(‘api/v1/users/my_address/address_edit_before’, p);</p><p>​        我们定义了一个apiAddress方法，这个方法有一个参数p，p是我们请求接口时携带的参数对象。而后调用了我们封装的post方法，post方法的第一个参数是我们的接口地址，第二个参数是apiAddress的p参数，即请求接口时携带的参数对象。最后通过export导出apiAddress。</p><p>​        然后在我们的页面中可以这样调用我们的api接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; apiAddress &#125; <span class="keyword">from</span> <span class="string">&#x27;@/request/api&#x27;</span>;<span class="comment">// 导入我们的api接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;        </span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Address&#x27;</span>,    </span><br><span class="line">    created () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">onLoad</span>();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;            </span><br><span class="line">        <span class="comment">// 获取数据            </span></span><br><span class="line">        <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 调用api接口，并且提供了两个参数                </span></span><br><span class="line">            <span class="title function_">apiAddress</span>(&#123;                    </span><br><span class="line">                <span class="attr">type</span>: <span class="number">0</span>,                    </span><br><span class="line">                <span class="attr">sort</span>: <span class="number">1</span>                </span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 获取数据成功后的其他操作</span></span><br><span class="line">                ………………                </span><br><span class="line">            &#125;)            </span><br><span class="line">        &#125;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        其他的api接口，就在pai.js中继续往下面扩展就可以了。友情提示，为每个接口写好注释哦！！！</p><p>​        api接口管理的一个好处就是，我们把api统一集中起来，如果后期需要修改接口，我们就直接在api.js中找到对应的修改就好了，而不用去每一个页面查找我们的接口然后再修改会很麻烦。关键是，万一修改的量比较大，就规格gg了。还有就是如果直接在我们的业务代码修改接口，一不小心还容易动到我们的业务代码造成不必要的麻烦。</p><p>​        好了，最后把完成的axios封装代码奉上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**axios封装</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 请求拦截、相应拦截、错误统一处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;<span class="keyword">import</span> <span class="variable constant_">QS</span> <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;development&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;/api&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;debug&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> == <span class="string">&#x27;production&#x27;</span>) &#123;    </span><br><span class="line">    axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;http://api.123dailu.com/&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求超时时间</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求头</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded;charset=UTF-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line">        <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line">        <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;        </span><br><span class="line">        token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token);        </span><br><span class="line">        <span class="keyword">return</span> config;    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error);    </span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="function"><span class="params">response</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(response);        </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);        </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 服务器状态码不是200的情况    </span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;        </span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;            </span><br><span class="line">            <span class="keyword">switch</span> (error.<span class="property">response</span>.<span class="property">status</span>) &#123;                </span><br><span class="line">                <span class="comment">// 401: 未登录                </span></span><br><span class="line">                <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径                </span></span><br><span class="line">                <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">401</span>:                    </span><br><span class="line">                    router.<span class="title function_">replace</span>(&#123;                        </span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">query</span>: &#123; <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> &#125; </span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 403 token过期                </span></span><br><span class="line">                <span class="comment">// 登录过期对用户进行提示                </span></span><br><span class="line">                <span class="comment">// 清除本地token和清空vuex中token对象                </span></span><br><span class="line">                <span class="comment">// 跳转登录页面                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">403</span>:                     </span><br><span class="line">                    <span class="title class_">Toast</span>(&#123;                        </span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;登录过期，请重新登录&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">1000</span>,                        </span><br><span class="line">                        <span class="attr">forbidClick</span>: <span class="literal">true</span>                    </span><br><span class="line">                    &#125;);                    </span><br><span class="line">                    <span class="comment">// 清除token                    </span></span><br><span class="line">                    <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);                    </span><br><span class="line">                    store.<span class="title function_">commit</span>(<span class="string">&#x27;loginSuccess&#x27;</span>, <span class="literal">null</span>);                    </span><br><span class="line">                    <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;                        </span><br><span class="line">                        router.<span class="title function_">replace</span>(&#123;                            </span><br><span class="line">                            <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,                            </span><br><span class="line">                            <span class="attr">query</span>: &#123; </span><br><span class="line">                                <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span> </span><br><span class="line">                            &#125;                        </span><br><span class="line">                        &#125;);                    </span><br><span class="line">                    &#125;, <span class="number">1000</span>);                    </span><br><span class="line">                    <span class="keyword">break</span>; </span><br><span class="line">                <span class="comment">// 404请求不存在                </span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">404</span>:                    </span><br><span class="line">                    <span class="title class_">Toast</span>(&#123;                        </span><br><span class="line">                        <span class="attr">message</span>: <span class="string">&#x27;网络请求不存在&#x27;</span>,                        </span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">1500</span>,                        </span><br><span class="line">                        <span class="attr">forbidClick</span>: <span class="literal">true</span>                    </span><br><span class="line">                    &#125;);                    </span><br><span class="line">                <span class="keyword">break</span>;                </span><br><span class="line">                <span class="comment">// 其他错误，直接抛出错误提示                </span></span><br><span class="line">                <span class="attr">default</span>:                    </span><br><span class="line">                    <span class="title class_">Toast</span>(&#123;                        </span><br><span class="line">                        <span class="attr">message</span>: error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>,                        </span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">1500</span>,                        </span><br><span class="line">                        <span class="attr">forbidClick</span>: <span class="literal">true</span>                    </span><br><span class="line">                    &#125;);            </span><br><span class="line">            &#125;            </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error.<span class="property">response</span>);        </span><br><span class="line">        &#125;       </span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * get方法，对应get请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">url, params</span>)&#123;    </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123;        </span><br><span class="line">       axios.<span class="title function_">get</span>(url, &#123;            </span><br><span class="line">           <span class="attr">params</span>: params        </span><br><span class="line">       &#125;)        </span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);        </span><br><span class="line">       &#125;)        </span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)        </span><br><span class="line">       &#125;)    </span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">post</span>(<span class="params">url, params</span>) &#123;    </span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;         </span><br><span class="line">       axios.<span class="title function_">post</span>(url, <span class="variable constant_">QS</span>.<span class="title function_">stringify</span>(params))        </span><br><span class="line">       .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">resolve</span>(res.<span class="property">data</span>);        </span><br><span class="line">       &#125;)        </span><br><span class="line">       .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;            </span><br><span class="line">           <span class="title function_">reject</span>(err.<span class="property">data</span>)        </span><br><span class="line">       &#125;)    </span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="二、axios的封装根据需求的不同而不同。"><a href="#二、axios的封装根据需求的不同而不同。" class="headerlink" title="二、axios的封装根据需求的不同而不同。"></a>二、axios的封装根据需求的不同而不同。</h2><blockquote><p>1.优化axios封装，去掉之前的get和post</p><p>2.断网情况处理</p><p>3.更加模块化的api管理</p><p>4.接口域名有多个的情况</p><p>5.api挂载到vue.prototype上省去引入的步骤</p></blockquote><ul><li>http.js中axios封装的优化，先直接贴代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * axios封装</span></span><br><span class="line"><span class="comment"> * 请求拦截、响应拦截、错误统一处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../store/index&#x27;</span>;</span><br><span class="line">   <span class="keyword">import</span> &#123; <span class="title class_">Toast</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 提示函数 </span></span><br><span class="line"><span class="comment"> * 禁止点击蒙层、显示一秒后关闭</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">tip</span> = msg =&gt; &#123;    </span><br><span class="line">   <span class="title class_">Toast</span>(&#123;        </span><br><span class="line">       <span class="attr">message</span>: msg,        </span><br><span class="line">       <span class="attr">duration</span>: <span class="number">1000</span>,        </span><br><span class="line">       <span class="attr">forbidClick</span>: <span class="literal">true</span>    </span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 跳转登录页</span></span><br><span class="line"><span class="comment"> * 携带当前页面路由，以期在登录页面完成登录后返回当前页面</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">toLogin</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   router.<span class="title function_">replace</span>(&#123;</span><br><span class="line">       <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,        </span><br><span class="line">       <span class="attr">query</span>: &#123;</span><br><span class="line">           <span class="attr">redirect</span>: router.<span class="property">currentRoute</span>.<span class="property">fullPath</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 请求失败后的错误统一处理 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; status 请求失败的状态码</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> <span class="title function_">errorHandle</span> = (<span class="params">status, other</span>) =&gt; &#123;</span><br><span class="line">   <span class="comment">// 状态码判断</span></span><br><span class="line">   <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">       <span class="comment">// 401: 未登录状态，跳转登录页</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">           <span class="title function_">toLogin</span>();</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="comment">// 403 token过期</span></span><br><span class="line">       <span class="comment">// 清除token并跳转登录页</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">           <span class="title function_">tip</span>(<span class="string">&#x27;登录过期，请重新登录&#x27;</span>);</span><br><span class="line">           <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;token&#x27;</span>);</span><br><span class="line">           store.<span class="title function_">commit</span>(<span class="string">&#x27;loginSuccess&#x27;</span>, <span class="literal">null</span>);</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">               <span class="title function_">toLogin</span>();</span><br><span class="line">           &#125;, <span class="number">1000</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="comment">// 404请求不存在</span></span><br><span class="line">       <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">           <span class="title function_">tip</span>(<span class="string">&#x27;请求的资源不存在&#x27;</span>); </span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">       <span class="attr">default</span>:</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(other);   </span><br><span class="line">       &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">var</span> instance = axios.<span class="title function_">create</span>(&#123;    <span class="attr">timeout</span>: <span class="number">1000</span> * <span class="number">12</span>&#125;);</span><br><span class="line"><span class="comment">// 设置post请求头</span></span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">post</span>[<span class="string">&#x27;Content-Type&#x27;</span>] = <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 请求拦截器 </span></span><br><span class="line"><span class="comment"> * 每次请求前，如果存在token则在请求头中携带token </span></span><br><span class="line"><span class="comment">   */</span> </span><br><span class="line">   instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(    </span><br><span class="line">   <span class="function"><span class="params">config</span> =&gt;</span> &#123;        </span><br><span class="line">       <span class="comment">// 登录流程控制中，根据本地是否存在token判断用户的登录情况        </span></span><br><span class="line">       <span class="comment">// 但是即使token存在，也有可能token是过期的，所以在每次的请求头中携带token        </span></span><br><span class="line">       <span class="comment">// 后台根据携带的token判断用户的登录情况，并返回给我们对应的状态码        </span></span><br><span class="line">       <span class="comment">// 而后我们可以在响应拦截器中，根据状态码进行一些统一的操作。        </span></span><br><span class="line">       <span class="keyword">const</span> token = store.<span class="property">state</span>.<span class="property">token</span>;        </span><br><span class="line">       token &amp;&amp; (config.<span class="property">headers</span>.<span class="property">Authorization</span> = token);        </span><br><span class="line">       <span class="keyword">return</span> config;    </span><br><span class="line">   &#125;,    </span><br><span class="line">   <span class="function"><span class="params">error</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">error</span>(error))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(    </span><br><span class="line">    <span class="comment">// 请求成功</span></span><br><span class="line">    <span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">status</span> === <span class="number">200</span> ? <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(res) : <span class="title class_">Promise</span>.<span class="title function_">reject</span>(res),    </span><br><span class="line">    <span class="comment">// 请求失败</span></span><br><span class="line">    <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; response &#125; = error;</span><br><span class="line">        <span class="keyword">if</span> (response) &#123;</span><br><span class="line">            <span class="comment">// 请求已发出，但是不在2xx的范围 </span></span><br><span class="line">            <span class="title function_">errorHandle</span>(response.<span class="property">status</span>, response.<span class="property">data</span>.<span class="property">message</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 处理断网的情况</span></span><br><span class="line">            <span class="comment">// eg:请求超时或断网时，更新state的network状态</span></span><br><span class="line">            <span class="comment">// network状态在app.vue中控制着一个全局的断网提示组件的显示隐藏</span></span><br><span class="line">            <span class="comment">// 关于断网组件中的刷新重新获取数据，会在断网组件中说明</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">window</span>.<span class="property">navigator</span>.<span class="property">onLine</span>) &#123;</span><br><span class="line">               store.<span class="title function_">commit</span>(<span class="string">&#x27;changeNetwork&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure><p>​    这个axios和之前的大同小异，做了如下几点改变：</p><blockquote><p>1.去掉了之前get和post方法的封装，通过创建一个axios实例然后export default方法导出，这样使用起来更灵活一些。</p><p>2.去掉了通过环境变量控制baseUrl的值。考虑到接口会有多个不同域名的情况，所以准备通过js变量来控制接口域名。这点具体在api里会介绍。</p><p>3.增加了请求超时，即断网状态的处理。说下思路，当断网时，通过更新vuex中network的状态来控制断网提示组件的显示隐藏。断网提示一般会有重新加载数据的操作，这步会在后面对应的地方介绍。</p><p>4.公用函数进行抽出，简化代码，尽量保证单一职责原则。</p></blockquote><p>​    下面说下api这块，考虑到一下需求：</p><blockquote><p>1.更加模块化</p><p>2.更方便多人开发，有效减少解决命名冲突</p><p>3.处理接口域名有多个情况</p></blockquote><p>​        这里这里呢新建了一个api文件夹，里面有一个index.js和一个base.js，以及多个根据模块划分的接口js文件。index.js是一个api的出口，base.js管理接口域名，其他js则用来管理各个模块的接口。</p><p>先放index.js代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * api接口的统一出口</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="comment">// 文章模块接口</span></span><br><span class="line">   <span class="keyword">import</span> article <span class="keyword">from</span> <span class="string">&#x27;@/api/article&#x27;</span>;</span><br><span class="line">   <span class="comment">// 其他模块的接口……</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;    </span><br><span class="line">    article,</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        index.js是一个api接口的出口，这样就可以把api接口根据功能划分为多个模块，利于多人协作开发，比如一个人只负责一个模块的开发等，还能方便每个模块中接口的命名哦。</p><p>​        base.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 接口域名的管理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="keyword">const</span> base = &#123;    </span><br><span class="line">   <span class="attr">sq</span>: <span class="string">&#x27;https://xxxx111111.com/api/v1&#x27;</span>,    </span><br><span class="line">   <span class="attr">bd</span>: <span class="string">&#x27;http://xxxxx22222.com/api&#x27;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> base;</span><br></pre></td></tr></table></figure><p>​    通过base.js来管理我们的接口域名，不管有多少个都可以通过这里进行接口的定义。即使修改起来，也是很方便的。</p><p>​    最后就是接口模块的说明，例如上面的article.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * article模块接口列表</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base <span class="keyword">from</span> <span class="string">&#x27;./base&#x27;</span>; <span class="comment">// 导入接口域名列表</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;@/utils/http&#x27;</span>; <span class="comment">// 导入http中创建的axios实例</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span>; <span class="comment">// 根据需求是否导入qs模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> article = &#123;    </span><br><span class="line">    <span class="comment">// 新闻列表    </span></span><br><span class="line">    articleList () &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/topics`</span>);    </span><br><span class="line">    &#125;,    </span><br><span class="line">    <span class="comment">// 新闻详情,演示    </span></span><br><span class="line">    articleDetail (id, params) &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/topic/<span class="subst">$&#123;id&#125;</span>`</span>, &#123;            </span><br><span class="line">            <span class="attr">params</span>: params        </span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// post提交    </span></span><br><span class="line">    login (params) &#123;        </span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">`<span class="subst">$&#123;base.sq&#125;</span>/accesstoken`</span>, qs.<span class="title function_">stringify</span>(params));    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他接口…………</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> article;</span><br></pre></td></tr></table></figure><p>​        1.通过直接引入我们封装好的axios实例，然后定义接口、调用axios实例并返回，可以更灵活的使用axios，比如你可以对post请求时提交的数据进行一个qs序列化的处理等。</p><p>​        2.请求的配置更灵活，你可以针对某个需求进行一个不同的配置。关于配置的优先级，axios文档说的很清楚，这个顺序是：在 lib/defaults.js 找到的库的默认值，然后是实例的 defaults 属性，最后是请求的 config 参数。后者将优先于前者。</p><p>​        3.restful风格的接口，也可以通过这种方式灵活的设置api接口地址。</p><p>​        最后，为了方便api的调用，我们需要将其挂载到vue的原型上。在main.js中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span> <span class="comment">// 导入路由文件</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span> <span class="comment">// 导入vuex文件</span></span><br><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span> <span class="comment">// 导入api接口</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$api</span> = api; <span class="comment">// 将api挂载到vue的原型上</span></span><br><span class="line">然后我们可以在页面中这样调用接口，eg：</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;    </span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params">id</span>) &#123;      </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$api</span>.<span class="property">article</span>.<span class="title function_">articleDetail</span>(id, &#123;        </span><br><span class="line">            <span class="attr">api</span>: <span class="number">123</span>      </span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 执行某些操作      </span></span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>再提一下断网的处理，这里只做一个简单的示例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;  </span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;    </span><br><span class="line">        &lt;div v-if=&quot;!network&quot;&gt;      </span><br><span class="line">            &lt;h3&gt;我没网了&lt;/h3&gt;      </span><br><span class="line">            &lt;div @click=&quot;onRefresh&quot;&gt;刷新&lt;/div&gt;      </span><br><span class="line">        &lt;/div&gt;    </span><br><span class="line">        &lt;router-view/&gt;      </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,  </span><br><span class="line">        <span class="attr">computed</span>: &#123;    </span><br><span class="line">            ...<span class="title function_">mapState</span>([<span class="string">&#x27;network&#x27;</span>])  </span><br><span class="line">        &#125;,  </span><br><span class="line">        <span class="attr">methods</span>: &#123;    </span><br><span class="line">            <span class="comment">// 通过跳转一个空页面再返回的方式来实现刷新当前页面数据的目的</span></span><br><span class="line">            onRefresh () &#123;      </span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="string">&#x27;/refresh&#x27;</span>)    </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>​    </p><p>​        这是app.vue，这里简单演示一下断网。在http.js中介绍了，我们会在断网的时候，来更新vue中network的状态，那么这里我们根据network的状态来判断是否需要加载这个断网组件。断网情况下，加载断网组件，不加载对应页面的组件。当点击刷新的时候，我们通过跳转refesh页面然后立即返回的方式来实现重新获取数据的操作。因此我们需要新建一个refresh.vue页面，并在其beforeRouteEnter钩子中再返回当前页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// refresh.vue</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;            </span><br><span class="line">        vm.<span class="property">$router</span>.<span class="title function_">replace</span>(<span class="keyword">from</span>.<span class="property">fullPath</span>)        </span><br><span class="line">    &#125;)    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<p>Welcome to My Blog! This is my first post.If you are interested in it.You can follow my <a href="https://github.com/AliveSeven">GitHub</a><br>.You can also contact me by QQ or Email.Thank you for seeing this.</p><h2 id="关于这里"><a href="#关于这里" class="headerlink" title="关于这里"></a>关于这里</h2><p>打算先作为个人技术博客发布于GitHub上面，会发布一些我个人认为很好的文章，同时也会转载一些CSDN、简书、知乎等平台上面好的文章，在开发的时候经常有用到的技术和小技巧都会发在上面。</p><h2 id="关于评论"><a href="#关于评论" class="headerlink" title="关于评论"></a>关于评论</h2><p>评论部分是用国外的免费数据库<strong>MongoDB</strong>来搭建的，使用的是Twikoo的评论系统，详见<a href="https://twikoo.js.org/%EF%BC%8C%E7%94%A8Vercel%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%EF%BC%8C%E7%94%B1%E4%BA%8E%E9%83%BD%E6%98%AF%E7%94%A8%E5%88%B0%E5%9B%BD%E5%A4%96%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%EF%BC%8C%E6%89%80%E4%BB%A5%E7%89%B9%E5%88%AB%E5%8D%A1%EF%BC%8C%E7%94%9A%E8%87%B3%E6%B2%A1%E6%B3%95%E5%8A%A0%E8%BD%BD%E5%87%BA%E6%9D%A5%EF%BC%8C%E7%AD%89%E5%90%8E%E7%BB%AD%E5%8F%8C%E5%8D%81%E4%B8%80%E5%86%8D%E4%B9%B0%E4%B8%AA%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8C%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%A7%EF%BC%8C%E5%93%AD%E6%AD%BB%E3%80%82">https://twikoo.js.org/，用Vercel免费搭建，由于都是用到国外的服务器，所以特别卡，甚至没法加载出来，等后续双十一再买个腾讯云服务器和云数据库吧，哭死。</a></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>大概会两到三天一更，主要是最近比较忙，很少有时间写文章，而且还要做毕业设计，还有MES软件开发的项目要做啥的，特别忙，我也是醉了。</p><h2 id="关于这个博客"><a href="#关于这个博客" class="headerlink" title="关于这个博客"></a>关于这个博客</h2><p>博客是用Hexo+Butterfly搭建而成，感兴趣的小伙伴也可以去做一下，此外还可以用VuePress搭配vuepress-theme-reco的主题来做一个博客，更加的简单，而且对会Vue开发的小伙伴很友好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> HelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h2 id="这里是？"><a href="#这里是？" class="headerlink" title="这里是？"></a>这里是？</h2><p>虽然不知道你是怎么找到这里的，但是很感谢你能在广大的互联网里面发现我。</p><p>这里是一个没什么存在感的地方，由我自己分享一些关于前后端的知识，同时偶尔也会分享一下我的生活，见识等等</p><h2 id="关于自己"><a href="#关于自己" class="headerlink" title="关于自己"></a>关于自己</h2><ul><li>目前就读于国内某大学，成绩还算优秀，就是四肢不够发达。</li><li>喜欢动漫、运动、逛B站、学习、理财（老韭菜了）、唱歌</li><li><strong>做一个阳光精致的男孩捏</strong></li><li>目前在往Web前端开发工程师的方向前进，同时在学习新媒体的东西</li><li><strong>想做B站大up主</strong></li><li>喜欢的游戏是Fate Grand Order、公主连结、<del>DNF、GTA5、CSGO</del>等等，（肝不过来了~~~库😭）</li><li>想变成富哥（吃肯德基不用看星期几了捏）</li><li>麦当劳老粉（其实只是经常薅它们的羊毛和免费的券）</li><li>安静柔和、会做饭、干净清爽、不吸烟不喝酒，<del>健康作息宝宝</del></li><li>不喜欢微信，比较喜欢QQ，相比微信更喜欢支付宝（微信提现简直绝了现在，还收手续费）</li><li>喜欢听歌，比较喜欢中文、粤语歌。</li><li>公交、步行忠实粉丝（成就达成—能源节约者）</li><li>吃瓜群众，吃瓜第一</li></ul><p><img src="https://m1.im5i.com/2022/09/07/Uq5LmK.md.jpg" alt="带我出去玩"></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>文章分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://cdn.cbd.int/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}html,body {  font-family: ZhuZiAYuanJWD !important;}div#menus {  font-family: 'ZhuZiAYuanJWD';}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;  color: rgb(236, 239, 243) !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}/* #site-subtitle #subtitle{    font-family: 包图小白体 !important;    color: rgb(76, 73, 72);  } */.iconfont {  font-family: 'iconfont' !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */.bangumi-active {  background: #dbecfe !important;  border-radius: 10px !important;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: #dbecfe !important;  border-radius: 10px !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}/* 解决artitalk的图标问题 */#uploadSource>svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme='dark'] #recent-posts>.recent-post-item {  background: #121212;}[data-theme='dark'] .card-widget {  background: #121212 !important;}[data-theme='dark'] div#post {  background: #121212 !important;}[data-theme='dark'] div#tag {  background: #121212 !important;}[data-theme='dark'] div#archive {  background: #121212 !important;}[data-theme='dark'] div#page {  background: #121212 !important;}[data-theme='dark'] div#category {  background: #121212 !important;}[data-theme='dark'] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside>div>button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #49b1f5;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #49b1f5;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {    display: none !important;  } */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* 鼠标图标 */body {  cursor: url('https://anzhiy.cn/img/x1.cur'), auto;}a,[type='button']:not(:disabled),[type='reset']:not(:disabled),[type='submit']:not(:disabled),button:not(:disabled) {  cursor: url('https://anzhiy.cn/img/x2.cur'), auto !important;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #49b1f5;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft JhengHei', 'Microsoft YaHei', sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--heo-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* live2d看板娘位置 *//* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}/* 阿里图标iconfont */.iconfont {  font-family: "iconfont" !important;  /* 可以定义图标大小 */  font-size: 1em !important;}/* 若已经在项目设置中勾选了彩色选项，则无需再定义图标颜色*/.icon-cat:before {  color: #85c3de;}/* 点击图片放大之后图片名称设为不展示 */.fancybox__caption{  display: none;}/* 页脚微标大小 */.micro{  height: 20px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>life</title>
      <link href="/life/index.html"/>
      <url>/life/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/ali_font.js"/>
      <url>/js/ali_font.js</url>
      
        <content type="html"><![CDATA[!function(c){var l,h,a,t,i,v='<svg><symbol id="icon-dragon_chen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-498.122105 265.620211L431.157895 754.526316V485.052632h-66.074948c-14.470737 110.645895-44.355368 197.066105-102.696421 260.742736l-39.747368-36.432842C306.526316 617.876211 323.368421 462.901895 323.368421 242.526316V215.578947h377.263158v53.894737H377.182316c-0.404211 58.260211-2.209684 112.128-6.359579 161.684211H700.631579v53.894737h-122.152421a481.172211 481.172211 0 0 0 76.826947 119.70021l66.479158-39.855158 27.728842 46.214737-54.460631 32.687158c29.507368 24.953263 63.757474 45.675789 102.80421 58.098526l-16.303158 51.361684c-134.224842-42.711579-222.773895-167.073684-261.551158-268.207157H485.052632v221.857684l68.985263-41.391158 27.728842 46.214737-109.783579 65.886316zM646.736842 377.263158h-215.578947v-53.894737h215.578947v53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-dog_xu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-375.592421 150.393263c33.684211 44.544 75.210105 74.698105 124.739369 90.812632l11.425684 3.718737 10.401684-6.009264C781.204211 727.740632 808.421053 622.565053 808.421053 592.842105h-53.894737c0 22.069895-19.132632 80.869053-33.711158 103.504842-34.816-14.605474-64.538947-39.262316-89.249684-74.13221 48.316632-55.269053 92.079158-117.328842 120.535579-179.900632l-49.044211-22.285473c-23.767579 52.250947-59.742316 104.717474-100.055579 152.656842-24.010105-50.930526-41.148632-115.927579-51.658105-195.395369H700.631579v-53.894737h-155.189895A1848.050526 1848.050526 0 0 1 538.947368 161.684211h-53.894736c0 58.206316 2.155789 112.074105 6.494315 161.68421H323.368421v26.947368c0 216.549053-13.177263 263.545263-100.702316 359.046737l39.747369 36.432842c63.326316-69.093053 92.806737-118.272 105.714526-206.848H485.052632v-53.894736h-111.319579a1742.147368 1742.147368 0 0 0 3.449263-107.789474h120.158316c12.611368 98.250105 35.031579 177.475368 67.395368 238.187789-61.978947 65.536-128.053895 117.975579-173.298526 142.282106l25.519158 47.481263c47.589053-25.573053 114.095158-77.446737 177.55621-142.821053z m125.170526-411.971368l-80.842105-80.842106-38.103579 38.103579 80.842105 80.842106 38.103579-38.103579z" fill="#231F20" ></path></symbol><symbol id="icon-dog" viewBox="0 0 1024 1024"><path d="M894.814316 904.434526l83.240421-183.134315-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939369-185.263158-0.134737-7.922526-0.134737-33.953684-0.134736-55.996631-30.693053 15.306105-70.090105 19.887158-106.09179 19.887157-92.752842 0-163.624421-23.983158-210.647579-71.275789a192.512 192.512 0 0 1-27.944421-36.513684H377.263158v377.263158c342.662737 0 403.105684 51.092211 494.592 128.377263 7.922526 6.682947 15.521684 13.312 22.959158 19.86021z" fill="#85C3DE" ></path><path d="M326.063158 282.947368c0 34.250105-13.231158 44.463158-29.642105 44.463158s-29.642105-10.213053-29.642106-44.463158c0-34.223158 13.231158-44.463158 29.642106-44.463157s29.642105 10.24 29.642105 44.463157zM269.473684 430.295579v311.646316L190.275368 916.210526h59.203369L323.368421 753.637053V377.263158h-26.947368c-119.403789 0-172.732632-53.382737-185.505685-107.789474h35.624421c51.092211 0 68.581053-15.764211 120.535579-62.544842 12.773053-11.506526 28.079158-25.276632 47.023158-41.741474l18.351158-15.952842-69.658947-99.139368-44.085895 30.989474 41.768421 59.472842c-11.183158 9.862737-20.884211 18.593684-29.480421 26.327579C180.736 212.156632 176.235789 215.578947 146.539789 215.578947H53.894737v26.947369c0 88.710737 66.910316 178.149053 215.578947 187.769263z m216.710737-161.414737c2.290526 71.733895 28.698947 136.326737 75.048421 182.918737C618.711579 509.628632 702.437053 538.947368 810.091789 538.947368c18.593684 0 36.190316-1.158737 52.628211-3.449263 3.745684 111.265684 33.630316 170.334316 51.496421 196.015158l-38.507789 84.722526C782.174316 742.049684 688.774737 700.631579 377.263158 700.631579v53.894737c34.277053 0 65.697684 0.512 94.639158 1.509052L374.595368 970.105263h59.203369l96.013474-211.240421c66.182737 4.338526 117.005474 11.829895 157.911578 22.016L626.229895 916.210526h59.176421l54.16421-119.134315c47.616 18.405053 79.737263 42.091789 113.125053 69.739789L805.753263 970.105263h59.203369l113.071157-248.778105-13.824-13.204211c-0.485053-0.458105-45.648842-47.589053-47.939368-185.263158C985.168842 498.553263 1024 447.811368 1024 377.263158c0-95.205053-66.506105-161.684211-161.684211-161.684211v53.894737c65.482105 0 107.789474 42.307368 107.789474 107.789474 0 89.088-87.013053 107.789474-160.013474 107.789474-92.752842 0-163.624421-23.983158-210.647578-71.27579-30.315789-30.504421-45.891368-65.832421-53.35579-98.735158 11.210105 6.952421 22.932211 13.338947 35.274105 19.186527l23.04-48.720843c-92.106105-43.654737-148.992-128.646737-219.243789-243.981473l-46.026105 28.05221c49.448421 81.246316 92.968421 148.506947 147.051789 199.302737z" fill="#231F20" ></path></symbol><symbol id="icon-goat" viewBox="0 0 1024 1024"><path d="M548.378947 646.736842a952.32 952.32 0 0 1 140.90779-161.68421H107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L66.721684 754.526316h417.172211c20.345263-41.472 43.654737-77.446737 64.485052-107.789474z" fill="#F7C768" ></path><path d="M608.256 144.734316C555.762526 115.577263 506.098526 107.789474 485.052632 107.789474V53.894737c32.579368 0 91.270737 11.452632 149.369263 43.735579 75.290947 41.822316 130.694737 94.531368 171.385263 150.878316C755.873684 288.013474 697.101474 323.368421 646.736842 323.368421h-107.789474v-53.894737h107.789474c20.506947 0 48.424421-11.210105 80.437895-31.285895a471.04 471.04 0 0 0-118.918737-93.453473zM832.673684 342.231579c-16.384 0-29.642105 10.24-29.642105 44.463158 0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642105-44.463158c0-34.223158-13.231158-44.463158-29.642105-44.463158zM1024 619.789474C1024 347.109053 901.066105 122.448842 686.753684 3.395368l-26.165895 47.104C914.324211 191.461053 964.688842 440.400842 969.647158 592.842105h-84.506947c-17.92-35.624421-45.352421-69.12-87.013053-101.995789l-16.788211-13.285053-16.734315 13.392842c-66.128842 52.897684-134.629053 127.083789-187.311158 209.677474H102.965895l-8.272842-20.318316C159.043368 617.013895 161.684211 603.109053 161.684211 485.052632v-53.894737h485.052631v-53.894737H161.684211c0-80.384 14.309053-110.026105 66.586947-137.916632l-25.384421-47.535158C123.365053 234.226526 107.789474 291.920842 107.789474 377.263158v107.789474c0 107.600842 0 107.600842-63.649685 169.283368l-13.069473 12.665263L110.618947 862.315789h58.206316l-43.897263-107.789473h103.477895l43.897263 107.789473h58.206316l-43.897263-107.789473h259.47621C508.981895 824.939789 485.052632 899.152842 485.052632 970.105263h53.894736c0-68.688842 27.270737-144.060632 68.958316-215.578947H687.157895c7.410526 0 13.473684 6.063158 13.473684 13.473684V862.315789h53.894737v-94.315789c0-37.160421-30.208-67.368421-67.368421-67.368421h-44.65179c40.771368-58.017684 89.438316-111.427368 138.913684-153.626947C841.512421 600.037053 862.315789 655.225263 862.315789 754.526316h53.894737c0-38.912-2.748632-74.482526-11.102315-107.789474H1024v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-goat_wei" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 50.202947c52.304842 70.925474 136.973474 152.144842 232.528843 190.383158l19.994947-50.041263c-109.271579-43.708632-202.805895-152.629895-238.780632-217.49221H808.421053v-53.894737H538.947368v-53.894737h215.578948v-53.894737h-215.578948V161.684211h-53.894736v161.68421h-215.578948v53.894737h215.578948v53.894737H215.578947v53.894737h255.757474c-35.974737 64.862316-129.536 173.783579-238.807579 217.49221l20.021895 50.041263c95.528421-38.238316 180.197053-119.484632 232.501895-190.383158V808.421053h53.894736v-246.218106z" fill="#231F20" ></path></symbol><symbol id="icon-dragon" viewBox="0 0 1024 1024"><path d="M366.376421 344.441263l152.980211-152.98021c43.142737-43.142737 141.204211-9.216 270.201263 115.738947-15.225263 9.835789-25.114947 15.818105-44.13979 32.256s-38.076632 35.489684-59.418947 56.832c-4.203789 4.203789-51.173053 53.221053-78.740211 82.027789-10.805895-12.126316-22.743579-24.171789-34.654315-36.082526L493.136842 362.792421l-54.218105 54.218105-72.542316-72.569263zM862.315789 512c0 46.834526-45.352421 80.842105-107.789473 80.842105-108.948211 0-189.359158-28.806737-267.129263-56.697263C414.100211 509.871158 344.872421 485.052632 258.182737 485.052632 80.788211 485.052632 0 588.126316 0 683.897263h53.894737C73.216 659.779368 135.302737 646.736842 177.340632 646.736842c77.338947 0 223.124211 23.282526 291.893894 47.912421C547.462737 722.701474 615.989895 754.526316 734.315789 754.526316 862.315789 754.526316 916.210526 670.315789 916.210526 512h-53.894737z" fill="#FF8787" ></path><path d="M552.421053 1024c-69.766737 0-113.825684-13.958737-156.402527-27.459368-54.487579-17.273263-110.807579-35.004632-232.421052-26.516211l-3.826527-53.733053c131.718737-9.458526 195.934316 10.967579 252.52379 28.887579 42.226526 13.365895 78.686316 24.926316 140.126316 24.926316 92.752842 0 148.210526-57.936842 148.210526-113.960421 0-16.949895-5.524211-101.618526-114.634105-101.618526-64.970105 0-112.747789 23.336421-163.328 48.02021C365.325474 830.571789 300.301474 862.315789 204.288 862.315789 85.908211 862.315789 0 787.294316 0 683.897263 0 588.126316 80.788211 485.052632 258.182737 485.052632c86.689684 0 155.917474 24.818526 229.214316 51.09221 45.810526 16.410947 92.564211 33.172211 145.488842 44.166737 9.000421-7.033263 13.850947-16.276211 13.850947-26.758737 0-37.187368-37.672421-74.859789-74.13221-111.265684l-3.287579-3.287579 38.103579-38.103579 3.260631 3.287579C652.853895 446.275368 700.631579 494.026105 700.631579 553.552842c0 12.719158-2.802526 24.926316-7.976421 36.109474A594.997895 594.997895 0 0 0 754.526316 592.842105c62.437053 0 107.789474-34.007579 107.789473-80.842105 0-58.853053-52.870737-110.268632-108.840421-164.702316l-8.057263-7.841684c-19.024842 16.437895-38.076632 35.489684-59.418947 56.832l-38.103579-38.103579c74.805895-74.832842 134.898526-134.898526 268.314947-141.931789V55.619368c-63.407158 7.787789-120.993684 39.424-121.667368 39.801264l-15.818105 8.811789-14.120421-11.344842C731.701895 66.452211 709.712842 53.894737 673.684211 53.894737c-41.418105 0-74.347789 25.869474-109.190737 53.301895-26.624 20.911158-54.137263 42.549895-86.851369 53.194105L469.342316 161.684211h-69.093053l-105.525895 105.525894-38.103579-38.130526L324.015158 161.684211H161.684211V107.789474h303.104c22.231579-8.272842 43.708632-25.168842 66.398315-42.981053C569.829053 34.438737 613.618526 0 673.684211 0c48.909474 0 81.408 17.946947 110.888421 40.097684C813.702737 26.300632 877.729684 0 943.157895 0h26.947368v323.368421h-53.894737v-53.167158c-54.164211 3.098947-92.914526 15.845053-127.002947 36.675369l1.832421 1.778526C852.587789 368.505263 916.210526 430.376421 916.210526 512c0 60.928-43.708632 109.945263-107.789473 127.622737V700.631579h53.894736v-53.894737h53.894737v53.894737h53.894737v53.894737h-53.894737v53.894737h-53.894737v-53.894737h-53.894736c-29.722947 0-53.894737-24.171789-53.894737-53.894737v-53.894737c-118.325895 0-207.063579-31.797895-285.318737-59.877053C400.437895 562.229895 335.494737 538.947368 258.182737 538.947368 117.059368 538.947368 53.894737 611.732211 53.894737 683.897263 53.894737 757.221053 115.738947 808.421053 204.288 808.421053c11.910737 0 23.228632-0.538947 34.034526-1.536C248.454737 796.321684 269.473684 770.640842 269.473684 739.166316c0-33.118316-43.088842-70.979368-58.152421-81.596632l30.935579-44.139789c8.299789 5.793684 81.111579 58.664421 81.111579 125.736421 0 19.429053-4.527158 37.052632-10.994526 52.304842 30.773895-10.051368 58.314105-23.498105 86.662737-37.349053C452.877474 727.848421 508.577684 700.631579 585.997474 700.631579 702.410105 700.631579 754.526316 778.725053 754.526316 856.144842 754.526316 938.657684 678.912 1024 552.421053 1024z m-21.180632-623.104L493.136842 362.792421l137.889684-137.889684 38.103579 38.103579-137.889684 137.889684z m-126.760421-18.351158l-38.103579-38.103579 152.980211-152.98021 38.103579 38.103579-152.980211 152.98021z m282.004211-218.624c15.494737-9.754947 43.331368-31.447579 43.331368-31.447579-25.734737-27.809684-49.556211-33.333895-67.368421-29.07621-19.240421 4.608-37.753263 24.602947-37.753263 24.602947s42.253474 22.447158 61.790316 35.920842z" fill="#231F20" ></path></symbol><symbol id="icon-horse" viewBox="0 0 1024 1024"><path d="M776.003368 646.736842c16.599579-99.947789 43.439158-181.086316 83.213474-256.538947l6.817684-12.934737H269.473684c-36.756211 0-53.894737 54.945684-53.894737 92.05221 0 46.753684 6.656 77.527579 70.278737 176.074106l84.533895 128.269473L498.876632 646.736842h277.126736z" fill="#FFAF6E" ></path><path d="M1024 0v404.210526c0 33.333895 0 134.736842-92.079158 134.736842h-13.824l-78.362947-109.056c-22.743579 49.906526-40.340211 103.046737-53.490527 162.950737h115.092211C937.310316 592.842105 970.105263 625.637053 970.105263 661.638737c0 60.631579-69.389474 154.300632-77.312 164.75621l-43.008-32.471579C875.466105 759.861895 916.210526 693.813895 916.210526 661.638737c0-5.982316-8.919579-14.901895-14.901894-14.901895h-125.332211C761.128421 736.121263 754.526316 840.569263 754.526316 970.105263h-53.894737c0-283.971368 31.097263-453.605053 110.888421-605.049263l20.318316-38.534737 112.801684 156.995369c14.443789-4.419368 25.465263-20.938105 25.465263-79.306106V0h53.894737z m-161.684211 161.684211h53.894737V0h-53.894737v80.842105c-17.381053-14.955789-38.184421-26.947368-80.842105-26.947368h-134.736842v53.894737h134.736842c37.672421 0 80.842105 40.906105 80.842105 53.894737z m-107.789473 0h-215.578948v53.894736h161.684211l53.894737-53.894736zM300.894316 766.544842L400.680421 916.210526h64.754526l-95.043368-142.551579L498.876632 646.736842h167.855157a1212.631579 1212.631579 0 0 1 9.431579-53.894737h-199.383579l-175.885473 173.702737z m109.97221-184.400842l-37.861052-38.319158-132.419369 130.802526C173.729684 571.095579 161.684211 529.812211 161.684211 469.315368 161.684211 398.578526 199.464421 323.368421 269.473684 323.368421h323.368421l53.894737-53.894737H269.473684c-6.709895 0-13.258105 0.565895-19.698526 1.482105C234.927158 249.451789 204.638316 215.578947 160.633263 215.578947 65.967158 215.578947 0 349.291789 0 469.315368c0 70.170947 16.141474 136.650105 49.232842 202.671158L6.197895 723.833263l41.472 34.41179 66.128842-79.737264-8.704-16.033684C83.105684 622.133895 53.894737 558.214737 53.894737 469.315368 53.894737 368.451368 106.765474 269.473684 160.633263 269.473684c13.231158 0 25.815579 9.889684 35.43579 20.533895C142.874947 321.967158 107.789474 388.500211 107.789474 469.315368c0 78.201263 19.698526 130.937263 93.642105 243.981474l-55.296 54.622316L280.899368 970.105263h64.754527l-130.048-195.072 195.260631-192.889263z" fill="#231F20" ></path></symbol><symbol id="icon-monkey_shen" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 134.736842h161.684211v53.894737h53.894737V269.473684h-215.578948V161.684211h-53.894736v107.789473h-215.578948v431.157895h53.894737v-53.894737h161.684211v215.578947h53.894736v-215.578947z m0-161.68421h161.684211v107.789473h-161.684211v-107.789473z m-215.578947 0h161.684211v107.789473h-161.684211v-107.789473z m215.578947-161.684211h161.684211v107.789474h-161.684211v-107.789474z m-215.578947 0h161.684211v107.789474h-161.684211v-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-ox_chou" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#D6B196" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-161.68421 188.631579h-159.555369c13.985684-172.813474 43.115789-357.429895 70.817684-385.158737L700.631579 269.473684H323.368421v53.894737h107.169684c-1.940211 45.756632-8.192 103.962947-15.76421 161.684211H323.368421v53.894736h83.968c-9.862737 68.446316-20.264421 130.128842-25.734737 161.684211H215.578947v53.894737h592.842106v-53.894737z m-346.543158-161.684211h149.800421a3313.717895 3313.717895 0 0 0-16.842105 161.684211h-158.477474c6.036211-35.247158 16.114526-95.636211 25.519158-161.684211z m22.608842-215.578947h171.735579c-15.198316 41.121684-27.405474 100.594526-36.890948 161.684211h-150.123789c7.383579-57.505684 13.419789-115.361684 15.279158-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-monkey" viewBox="0 0 1024 1024"><path d="M757.733053 485.052632H565.894737a80.842105 80.842105 0 0 0-80.842105 80.842105v215.578947c0 40.96 43.546947 99.678316 77.446736 139.210105C596.426105 960.215579 603.055158 970.105263 603.055158 970.105263H754.526316s15.144421-18.674526 45.891368-58.071579S862.315789 809.984 862.315789 717.608421c0-89.573053-47.993263-166.346105-104.582736-232.555789z" fill="#C3D686" ></path><path d="M538.947368 1024h-53.894736c0-32.794947 25.869474-87.417263 77.446736-103.316211C528.599579 881.152 485.052632 822.433684 485.052632 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h80.842105v53.894737h-80.842105a26.947368 26.947368 0 0 0-26.947369 26.947368c0 19.725474 36.675368 77.473684 92.133053 134.736842h88.602947c20.210526-14.147368 88.737684-71.464421 88.737685-198.602105 0-108.382316-93.237895-202.967579-168.151579-278.986105-49.502316-50.202947-88.576-89.842526-98.735158-128.61979-11.749053-44.732632-21.584842-112.586105-26.327579-148.318315H377.263158c-45.136842 0-89.519158 8.434526-121.802105 53.894736H431.157895v53.894737c-97.28 0-107.789474 113.071158-107.789474 161.684211v53.894737h53.894737v161.68421h-53.894737v-107.789474h-26.947368c-170.253474 0-188.631579-94.234947-188.631579-134.736842 0-31.043368 35.220211-72.326737 55.727158-93.722947 2.694737-14.686316 5.847579-28.348632 9.431579-41.013895H161.684211V215.578947h31.528421C239.642947 120.993684 317.224421 107.789474 377.263158 107.789474h185.640421l2.802526 23.794526c0.134737 1.050947 12.719158 106.657684 27.944421 164.756211 6.494316 24.872421 44.624842 63.514947 84.965053 104.448C760.481684 483.813053 862.315789 587.129263 862.315789 717.608421c0 92.375579-31.124211 155.028211-61.898105 194.425263C904.919579 892.146526 970.105263 803.004632 970.105263 673.684211c0-91.405474-42.819368-154.381474-84.237474-215.255579C847.791158 402.458947 808.421053 344.576 808.421053 269.473684c0-119.349895 87.093895-161.684211 161.68421-161.68421v53.894737c-32.417684 0-107.789474 10.509474-107.789474 107.789473 0 58.502737 31.555368 104.933053 68.096 158.639158C974.282105 492.597895 1024 565.679158 1024 673.684211c0 177.286737-108.301474 296.421053-269.473684 296.421052h-161.684211c-37.672421 0-53.894737 40.906105-53.894737 53.894737zM229.214316 269.473684a384.808421 384.808421 0 0 0-14.012632 58.341053l-1.401263 8.488421-6.090105 6.117053c-22.878316 22.932211-44.813474 52.601263-46.026105 62.275368 0 56.805053 53.76 75.264 107.789473 79.386947V431.157895c0-58.691368 13.473684-119.619368 46.511158-161.684211h-86.770526zM323.368421 1024h-53.894737c0-32.794947 25.869474-87.417263 77.446737-103.316211C313.020632 881.152 269.473684 822.433684 269.473684 781.473684c0-44.570947 36.271158-80.842105 80.842105-80.842105h45.16379A188.847158 188.847158 0 0 1 565.894737 592.842105h134.736842v53.894737h-134.736842c-74.293895 0-134.736842 60.442947-134.736842 134.736842v26.516211l-53.894737 0.377263V781.473684c0-9.162105 0.646737-18.135579 1.913263-26.947368H350.315789c-14.848 0-26.947368 12.072421-26.947368 26.947368 0 19.725474 36.675368 77.473684 92.133053 134.736842H431.157895v53.894737h-53.894737c-37.672421 0-53.894737 40.906105-53.894737 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-horse_wu" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 26.947368h269.473685v-53.894736H538.947368v-161.684211h161.684211v-53.894737H411.001263c12.045474-33.28 20.156632-69.793684 20.156632-107.789473h-53.894737c0 121.963789-105.364211 233.391158-106.415158 234.496l38.858105 37.349052c2.883368-3.018105 43.816421-46.133895 77.392842-110.160842H485.052632v161.684211H215.578947v53.894736h269.473685v323.368421h53.894736V538.947368z" fill="#231F20" ></path></symbol><symbol id="icon-ox" viewBox="0 0 1025 1024"><path d="M540.294737 754.526316h215.578947c20.210526 0 35.112421 1.374316 53.894737 4.581052 91.863579 15.656421 145.354105 67.691789 161.684211 86.069895V916.210526h53.894736V635.580632l-7.895579-7.895579c-9.269895-9.269895-36.513684-49.232842-44.032-196.527158H540.294737a161.684211 161.684211 0 0 0-161.684211 161.68421v131.098948c43.304421 20.210526 97.28 30.585263 161.684211 30.585263z" fill="#FFAF6E" ></path><path d="M1025.347368 635.580632V916.210526h-53.894736v-71.033263c-16.330105-18.405053-69.820632-70.413474-161.684211-86.069895V916.210526h-53.894737v-161.68421h-107.789473v215.578947h-53.894737V700.631579h161.68421c100.998737 0 172.570947 38.669474 215.578948 71.868632v-115.738948c-33.684211-43.627789-51.712-137.458526-53.706106-279.498105H701.978947c-76.934737 0-127.218526-26.219789-175.804631-51.550316a1556.048842 1556.048842 0 0 0-26.839579-13.743158c-26.839579 26.004211-66.209684 44.921263-115.738948 55.511579 24.441263 22.986105 60.874105 52.116211 106.469053 72.838737l-22.312421 49.044211c-76.584421-34.816-129.589895-88.926316-150.824421-113.125053-10.644211 0.619789-21.477053 1.024-32.687158 1.024a473.734737 473.734737 0 0 1-123.365053-15.952842l-93.022315 186.314105 68.581052 53.86779C167.882105 579.557053 237.891368 538.947368 324.715789 538.947368v53.894737c-95.986526 0-170.361263 62.490947-171.088842 63.137684l-16.78821 14.282106-136.838737-107.358316 109.729684-219.809684C46.430316 314.448842 1.347368 267.371789 1.347368 199.868632 1.347368 89.815579 121.586526 53.894737 163.031579 53.894737v53.894737c-14.120421 0-107.789474 17.165474-107.789474 92.079158C55.242105 290.465684 192.188632 323.368421 284.240842 323.368421c67.907368 0 122.421895-12.988632 157.696-35.624421-42.711579-14.336-95.097263-23.120842-169.337263-18.324211l-3.503158-53.786947c95.878737-6.117053 160.148211 8.515368 211.429053 28.833684C484.244211 235.439158 486.4 225.818947 486.4 215.578947c0-48.855579-57.829053-76.288-58.394947-76.557473l22.393263-49.017263C454.063158 91.648 540.294737 131.826526 540.294737 215.578947c0 18.566737-3.422316 35.84-9.997474 51.631158 7.060211 3.584 13.985684 7.168 20.776421 10.698106C597.854316 302.322526 638.248421 323.368421 701.978947 323.368421h269.473685v26.947368c0 214.689684 35.220211 266.590316 45.999157 277.369264l7.895579 7.895579z m-729.384421 25.141894l-98.789052 118.541474 86.797473 137.835789 45.594948-28.725894-65.913263-104.690527 37.052631-44.43621C358.642526 785.192421 439.080421 808.421053 540.294737 808.421053v-53.894737c-99.893895 0-175.077053-24.549053-223.474526-72.946527l-20.857264-20.857263z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit_mao" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-377.263158-188.631579h107.789474v323.368421c-20.48 0-39.936-11.264-40.016842-11.317895l-27.728842 46.214737c3.206737 1.940211 32.660211 18.997895 67.745684 18.997895 30.746947 0 53.894737-23.147789 53.894737-53.894737V269.473684h-215.578948v538.947369h53.894737V323.368421z m-107.789473 242.526316v-242.526316h-53.894737v196.904421l-107.789474 40.421053v-243.927579l169.094737-48.316632-14.821053-51.819789L269.473684 276.102737v304.801684l-36.405895 13.662316 18.917053 50.472421 178.741895-67.018105c-5.039158 69.928421-55.269053 106.981053-165.133474 122.933894l7.733895 53.328842C325.712842 746.657684 485.052632 723.536842 485.052632 565.894737z" fill="#231F20" ></path></symbol><symbol id="icon-rabbit" viewBox="0 0 1024 1024"><path d="M680.96 488.744421a1666.667789 1666.667789 0 0 0-54.433684-23.95621c-16.006737 12.234105-33.899789 20.264421-60.631579 20.264421h-80.842105c-36.810105 0-83.644632 30.396632-104.394106 67.772631-42.819368 77.123368-53.409684 117.813895-11.021473 201.701053C397.096421 808.879158 431.157895 876.409263 431.157895 970.105263h338.539789l68.338527-138.859789c20.129684-40.96 24.252632-73.701053 24.252631-110.349474 0.026947-57.397895-25.061053-159.717053-181.328842-232.151579z" fill="#FFBDD8" ></path><path d="M862.315789 720.896c0 36.621474-4.122947 69.389474-24.252631 110.349474L769.697684 970.105263H485.052632v-53.894737h48.370526C507.877053 880.074105 485.052632 833.509053 485.052632 781.473684c0-59.418947 24.171789-113.313684 63.218526-152.360421l38.103579 38.103579A161.091368 161.091368 0 0 0 538.947368 781.473684c0 54.784 35.381895 104.043789 63.514948 134.736842h133.712842l53.490526-108.759579c15.710316-31.851789 18.755368-55.834947 18.755369-86.554947 0-80.976842-63.434105-150.096842-178.607158-195.503158-17.542737 8.138105-38.292211 13.554526-63.919158 13.554526h-80.842105c-13.958737 0-43.924211 15.979789-57.290106 40.016843l-47.104-26.165895C401.408 515.449263 448.242526 485.052632 485.052632 485.052632h80.842105c37.268211 0 57.478737-15.440842 79.090526-36.45979C625.367579 336.195368 549.753263 269.473684 485.052632 269.473684h-107.789474a21.288421 21.288421 0 0 0-5.955369 2.021053A683.762526 683.762526 0 0 0 302.187789 194.021053c-35.84-34.223158-61.763368-58.933895-94.908631-79.440842A42.442105 42.442105 0 0 0 185.478737 107.789474a22.824421 22.824421 0 0 0-17.381053 7.194947c-10.913684 11.425684-6.063158 28.240842 1.428211 39.181474 21.989053 32.121263 47.912421 56.858947 83.752421 91.109052 20.614737 19.671579 49.259789 43.169684 77.392842 63.08379C281.007158 367.400421 215.578947 484.432842 215.578947 592.842105c0 74.482526 24.791579 124.065684 51.065264 176.586106C294.534737 825.209263 323.368421 882.903579 323.368421 970.105263h-53.894737c0-74.482526-24.791579-124.065684-51.065263-176.586105C190.517895 737.738105 161.684211 680.043789 161.684211 592.842105c0-90.866526 42.226526-197.685895 93.453473-274.485894a803.759158 803.759158 0 0 1-39.046737-34.115369C177.852632 247.754105 150.231579 221.399579 125.035789 184.616421c-24.441263-35.759158-22.797474-78.686316 4.069053-106.819368 26.300632-27.567158 70.898526-31.043368 106.522947-9.000421 37.941895 23.444211 65.562947 49.798737 103.774316 86.258526 9.970526 9.512421 33.037474 32.309895 56.93979 60.550737h68.634947c-27.621053-37.780211-60.416-72.730947-88.522105-99.543579-28.833684-27.540211-54.730105-52.116211-84.533895-74.024421L326.305684 0.296421c31.232 23.228632 57.802105 48.532211 87.309474 76.719158 53.840842 51.388632 94.450526 100.594526 121.74821 146.83621 82.836211 26.650947 150.042947 116.870737 165.025685 230.750316l1.724631 13.177263-9.404631 9.404632c-3.772632 3.772632-7.706947 7.653053-11.802948 11.587368C837.227789 561.178947 862.315789 663.498105 862.315789 720.896zM309.463579 754.526316c3.934316 8.057263 7.895579 16.087579 11.991579 24.144842C348.887579 832.970105 377.263158 889.128421 377.263158 970.105263h53.894737c0-93.696-34.061474-161.226105-61.520842-215.578947h-60.173474z m597.90821 53.894737c-3.422316 9.404632-7.814737 19.806316-13.770105 31.959579L829.790316 970.105263h60.065684l52.143158-105.957052c10.778947-21.935158 17.515789-40.016842 21.90821-55.727158h-56.535579zM514.694737 390.736842c0-34.223158-13.231158-44.463158-29.642105-44.463158s-29.642105 10.24-29.642106 44.463158c0 34.250105 13.231158 44.463158 29.642106 44.463158s29.642105-10.213053 29.642105-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rat_zi" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-431.157895 188.631579v-215.578947h269.473685v-53.894737H538.947368v-39.585684c26.543158-18.081684 94.585263-65.050947 177.852632-127.488L700.631579 215.578947H323.368421v53.894737h295.316211a4221.008842 4221.008842 0 0 1-121.640421 85.369263l-11.991579 8.003369V431.157895H242.526316v53.894737h242.526316v215.578947c0 48.343579-13.850947 53.894737-134.736843 53.894737v53.894737c105.391158 0 188.631579 0 188.631579-107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-rat" viewBox="0 0 1024 1024"><path d="M727.659789 431.157895c-132.581053 0-220.348632 47.454316-285.803789 154.354526-19.779368 32.309895-15.845053 76.503579-9.404632 96.579368 3.260632 10.159158 7.760842 18.647579 12.422737 25.546106C464.761263 737.010526 499.927579 754.526316 538.947368 754.526316h66.829474c1.158737 17.893053-1.967158 34.762105-15.144421 53.975579-12.692211 18.539789-37.807158 40.151579-56.32 54.810947 25.249684-0.673684 52.709053-0.997053 83.240421-0.997053C877.487158 862.315789 970.105263 711.922526 970.105263 571.176421 936.421053 512 882.364632 431.157895 727.659789 431.157895z" fill="#85C3DE" ></path><path d="M210.432 1012.897684l-43.573895-31.690105c106.954105-147.051789 185.317053-171.196632 423.828211-172.705684 21.396211-31.258947 16.249263-56.266105 9.377684-89.70779-3.557053-17.138526-7.221895-34.842947-7.221895-54.433684 0-68.958316 25.330526-104.636632 63.407158-136.973474l34.896842 41.040842c-29.453474 25.061053-44.409263 46.780632-44.409263 95.932632 0 14.093474 2.937263 28.402526 6.063158 43.546947 5.901474 28.510316 12.8 62.032842-1.131789 99.462737 166.373053-10.24 264.542316-96.902737 264.542315-236.193684C916.210526 418.330947 827.580632 323.368421 684.921263 323.368421c-83.644632 0-153.303579 29.696-174.187789 39.612632a224.875789 224.875789 0 0 1-20.533895 31.339789l-41.741474-34.115368 20.884211 17.057684-20.911158-16.976842C448.781474 359.828211 485.052632 314.287158 485.052632 262.736842c0-34.816-8.946526-60.766316-26.570106-77.069474-17.515789-16.249263-44.786526-24.602947-81.219368-24.953263V323.368421h-53.894737V109.783579l24.872421-1.913263c64.700632-4.931368 114.095158 7.895579 146.863158 38.238316C524.207158 173.056 538.947368 212.291368 538.947368 262.736842c0 11.102316-1.131789 21.908211-3.072 32.202105 37.268211-12.584421 89.842526-25.465263 149.045895-25.465263C858.165895 269.473684 970.105263 387.907368 970.105263 571.176421 970.105263 711.922526 877.487158 862.315789 617.552842 862.315789c-258.667789 0-311.942737 19.698526-407.120842 150.581895z m19.105684-256.835368c-12.045474 0-24.387368-0.565895-37.025684-1.64379l-22.096842-1.859368-2.425263-22.016C167.747368 728.144842 161.684211 672.444632 161.684211 631.026526c0-103.585684 21.450105-178.903579 53.894736-259.045052V107.789474h53.894737v274.782315l-2.021052 4.904422C235.439158 465.758316 215.578947 533.800421 215.578947 631.026526c0 22.878316 2.101895 51.442526 3.826527 70.979369 99.678316 2.802526 172.813474-35.408842 222.450526-116.493474l48.020211 24.090947c-11.237053 28.133053-11.371789 51.577263-0.377264 67.853474 9.701053 14.282105 28.645053 23.174737 49.448421 23.174737v53.894737c-39.019789 0-74.186105-17.515789-94.073263-46.888421a100.244211 100.244211 0 0 1-12.422737-25.546106c-53.221053 49.178947-121.128421 73.943579-202.913684 73.970527zM379.957895 525.473684c0-34.223158-13.231158-44.463158-29.642106-44.463158s-29.642105 10.24-29.642105 44.463158c0 34.250105 13.231158 44.463158 29.642105 44.463158s29.642105-10.213053 29.642106-44.463158z" fill="#231F20" ></path></symbol><symbol id="icon-rooster_you" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#BBC4C9" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-215.578947-188.631579h-161.684211v-26.947368h161.684211V242.526316H269.473684v53.894737h161.684211v26.947368h-161.684211v485.052632h53.894737v-53.894737h377.263158v53.894737h53.894737V323.368421zM323.368421 646.736842h377.263158v53.894737H323.368421v-53.894737z m0-269.473684h107.789474c0 103.316211-72.784842 107.654737-81.084632 107.789474L350.315789 538.947368c46.592 0 134.736842-33.792 134.736843-161.68421h53.894736v107.789474c0 29.722947 24.171789 53.894737 53.894737 53.894736h107.789474v53.894737H323.368421v-215.578947z m377.263158 0v107.789474h-107.789474v-107.789474h107.789474z m-215.578947-80.842105h53.894736v26.947368h-53.894736v-26.947368z" fill="#231F20" ></path></symbol><symbol id="icon-rooster" viewBox="0 0 1024 1024"><path d="M891.688421 506.421895C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V116.224l-323.368421 195.745684V323.368421c0 78.524632 14.928842 131.664842 29.372632 183.053474 12.611368 44.894316 24.522105 87.282526 24.522105 140.314947 0 101.618526-77.931789 176.693895-168.286316 203.991579l5.416422 11.587368h215.578947c24.333474 0 43.385263-0.242526 58.556631-2.128842C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947z" fill="#FF8787" ></path><path d="M673.684211 354.357895c-16.384 0-29.642105-10.213053-29.642106-44.463158 0-34.223158 13.231158-44.463158 29.642106-44.463158s29.642105 10.24 29.642105 44.463158c0 34.250105-13.258105 44.463158-29.642105 44.463158zM540.106105 970.105263l-50.58021-107.789474h156.05221l50.607158 107.789474h59.553684l-51.60421-109.918316C811.52 846.821053 916.210526 764.550737 916.210526 646.736842c0-53.032421-11.910737-95.420632-24.522105-140.314947C877.244632 455.033263 862.315789 401.893053 862.315789 323.368421V107.789474c0-59.445895-48.343579-107.789474-107.789473-107.789474a107.924211 107.924211 0 0 0-107.789474 106.172632 100.890947 100.890947 0 0 0-24.117895-3.314527 88.710737 88.710737 0 0 0-88.602947 88.602948c0 20.668632 5.227789 39.720421 10.671158 53.921684l-99.489684 59.688421 93.749894 14.470737V377.263158c0 14.416842-5.901474 21.692632-33.360842 49.152l-11.129263 11.129263C398.228211 326.521263 324.985263 269.473684 215.740632 269.473684 96.768 269.473684 0 366.241684 0 485.214316V646.736842h53.894737v-161.522526A162.007579 162.007579 0 0 1 215.740632 323.368421c82.081684 0 140.422737 36.244211 240.64 152.252632l-38.615579 38.615579C367.804632 461.285053 323.098947 431.157895 259.584 431.157895A151.983158 151.983158 0 0 0 107.789474 582.952421V754.526316h53.894737v-171.573895A98.007579 98.007579 0 0 1 259.584 485.052632c46.322526 0 79.629474 20.911158 137.027368 86.016l18.970948 21.530947 128.080842-128.080842C572.200421 435.981474 592.842105 415.366737 592.842105 377.263158v-97.926737l23.309474-14.120421-13.662316-23.04c-0.161684-0.242526-14.578526-24.899368-14.578526-50.688 0-19.132632 15.575579-34.708211 34.70821-34.708211 5.093053 0 26.785684 3.179789 39.558737 18.647579l26.327579 46.026106 39.774316-24.090948-20.372211-49.367579C704.754526 140.449684 700.631579 117.517474 700.631579 107.789474c0-29.722947 24.171789-53.894737 53.894737-53.894737s53.894737 24.171789 53.894737 53.894737v215.578947c0 85.935158 16.680421 145.300211 31.366736 197.632C851.887158 564.008421 862.315789 601.141895 862.315789 646.736842c0 95.285895-99.408842 161.684211-188.631578 161.684211h-209.461895l-68.419369-145.704421C375.242105 618.954105 338.108632 592.842105 296.448 592.842105A80.976842 80.976842 0 0 0 215.578947 673.711158V862.315789h53.894737v-188.604631c0-14.874947 12.099368-26.974316 26.974316-26.974316 20.533895 0 38.965895 14.147368 50.553263 38.858105L480.579368 970.105263h59.526737z" fill="#231F20" ></path></symbol><symbol id="icon-snake_si" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#FF8787" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-242.041263 180.762947l-52.116211-13.797052C657.219368 749.864421 651.425684 754.526316 619.789474 754.526316h-242.526316V485.052632h269.473684v53.894736h53.894737V215.578947H323.368421v538.947369c0 29.722947 24.171789 53.894737 53.894737 53.894737h242.526316c77.689263 0 91.189895-51.065263 108.274526-115.658106zM377.263158 269.473684h269.473684v161.684211H377.263158v-161.684211z" fill="#231F20" ></path></symbol><symbol id="icon-tiger_yin" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#7DD47F" ></path><path d="M970.105263 512c0 224.983579-163.166316 412.186947-377.263158 450.533053v-54.460632C777.135158 870.507789 916.210526 707.206737 916.210526 512c0-222.881684-181.328842-404.210526-404.210526-404.210526S107.789474 289.118316 107.789474 512s181.328842 404.210526 404.210526 404.210526c9.081263 0 18.000842-0.754526 26.947368-1.374315v53.894736c-8.973474 0.538947-17.866105 1.374316-26.947368 1.374316-252.604632 0-458.105263-205.500632-458.105263-458.105263S259.395368 53.894737 512 53.894737s458.105263 205.500632 458.105263 458.105263z m-257.42821 299.250526l-107.789474-53.894737-24.117895 48.208843 107.789474 53.894736 24.117895-48.208842z m-269.473685-5.658947l-24.117894-48.208842-107.789474 53.894737 24.117895 48.208842 107.789473-53.894737zM700.631579 431.157895h-161.684211v-53.894737h107.789474v-53.894737H377.263158v53.894737h107.789474v53.894737h-161.684211v323.368421h53.894737v-53.894737h269.473684v53.894737h53.894737V431.157895z m-161.684211 161.68421h107.789474v53.894737h-107.789474v-53.894737z m-161.68421 0h107.789474v53.894737h-107.789474v-53.894737z m161.68421-107.789473h107.789474v53.894736h-107.789474v-53.894736z m-161.68421 0h107.789474v53.894736h-107.789474v-53.894736zM754.526316 215.578947h-223.097263l-20.803369-62.410105-51.119158 17.057684L474.624 215.578947H269.473684v107.789474h53.894737v-53.894737h377.263158v53.894737h53.894737V215.578947z" fill="#231F20" ></path></symbol><symbol id="icon-snake" viewBox="0 0 1024 1024"><path d="M107.789474 790.474105c0-72.434526 67.880421-91.513263 121.451789-91.513263 74.401684 0 153.815579 34.438737 237.891369 70.925474 50.580211 21.935158 104.609684 45.325474 162.250105 63.083789-52.412632 44.786526-118.784 74.347789-195.152842 83.078737-143.171368 16.357053-326.440421 7.006316-326.440421-125.574737zM377.263158 215.578947c-15.575579 0-30.288842 3.449263-43.654737 9.377685A250.691368 250.691368 0 0 0 323.368421 296.421053c0 115.550316 76.422737 169.391158 137.83579 212.614736 8.138105 5.712842 16.141474 11.371789 23.848421 17.057685V323.368421a107.789474 107.789474 0 0 0-107.789474-107.789474z" fill="#C3D686" ></path><path d="M671.528421 788.857263c44.328421 11.964632 89.626947 19.563789 136.892632 19.56379 89.168842 0 161.684211-60.442947 161.68421-134.736842s-72.515368-134.736842-161.68421-134.736843c-19.078737 0-37.025684 1.509053-54.218106 4.015158-0.754526-101.402947-38.211368-172.355368-79.413894-219.648L673.684211 323.368421a1749.962105 1749.962105 0 0 1-79.036632-1.751579c45.702737 35.866947 108.705684 107.870316 105.984 232.367158 0 0.431158-0.080842 0.808421-0.10779 1.239579-34.923789 10.994526-66.155789 26.731789-95.097263 45.190737a163.085474 163.085474 0 0 0-15.845052-42.388211c-21.557895-39.639579-60.065684-66.775579-97.360842-93.022316C433.098105 423.343158 377.263158 384 377.263158 296.421053c0-130.290526 108.274526-188.631579 215.578947-188.631579 64.134737 0 132.715789 12.045474 214.366316 37.807158C802.330947 180.250947 780.099368 209.381053 700.631579 214.635789V161.684211h-53.894737v53.679157c-63.272421-1.024-104.528842-5.200842-104.986947-5.254736l-5.578106 53.598315C538.408421 263.949474 592.357053 269.473684 673.684211 269.473684c125.170526 0 188.631579-48.128 188.631578-143.063579V106.981053l-18.432-6.144C747.789474 68.823579 668.025263 53.894737 592.842105 53.894737c-158.666105 0-269.473684 99.732211-269.473684 242.526316 0 115.550316 76.422737 169.391158 137.83579 212.614736 33.684211 23.713684 65.509053 46.106947 81.003789 74.698106 9.539368 17.542737 13.285053 33.414737 12.341895 47.750737 21.153684 9.108211 42.118737 17.839158 62.949052 25.977263C671.151158 620.193684 729.977263 592.842105 808.421053 592.842105c59.445895 0 107.789474 36.271158 107.789473 80.842106s-48.343579 80.842105-107.789473 80.842105c-105.472 0-203.237053-42.388211-297.768421-83.429053-94.800842-41.094737-184.346947-79.952842-281.411369-79.952842C122.718316 591.171368 53.894737 644.715789 53.894737 727.578947c0 79.063579 67.098947 136.434526 159.555368 136.434527 142.174316 0 230.426947-66.883368 306.79579-129.886316 31.420632 13.419789 62.787368 26.058105 94.450526 37.133474-47.077053 49.637053-110.969263 82.566737-186.610526 91.270736l5.066105 53.625264c93.453474-7.006316 143.144421 9.350737 195.718737 26.543157 46.457263 15.225263 94.127158 30.854737 169.822316 30.854737 19.994947 0 41.957053-1.077895 66.344421-3.557052l-5.416421-53.625263c-105.283368 10.778947-158.100211-6.548211-213.935158-24.872422-22.150737-7.275789-44.624842-14.632421-70.305684-20.345263a334.848 334.848 0 0 0 96.14821-82.297263z m-458.078316 21.261474C162.573474 810.118737 107.789474 784.276211 107.789474 727.578947c0-60.847158 62.733474-82.539789 121.451789-82.539789 77.850947 0 154.731789 30.288842 235.250526 64.943158-66.263579 52.924632-139.722105 100.136421-251.041684 100.136421z" fill="#231F20" ></path></symbol><symbol id="icon-tiger" viewBox="0 0 1024 1024"><path d="M431.157895 162.250105V134.736842c0-41.552842-39.289263-80.842105-80.842106-80.842105-28.833684 0-57.128421 4.661895-58.314105 4.850526L269.473684 62.490947v83.887158C144.788211 223.824842 89.222737 346.839579 66.991158 431.157895h266.051368c240.747789 0 415.851789 107.789474 415.85179 269.473684-14.848-25.114947-43.924211-53.894737-88.68379-53.894737-67.988211 0-121.263158 71.033263-121.263158 161.684211 0 66.802526 30.477474 119.888842 60.712421 156.16 12.638316 15.171368 36.055579 37.726316 59.014737 58.88 5.066105 0.107789 9.781895 0.538947 15.009685 0.538947 219.297684 0 350.315789-191.811368 350.315789-377.263158C1024 327.545263 679.855158 172.813474 431.157895 162.250105z" fill="#F7C768" ></path><path d="M673.684211 1024c-114.768842 0-188.820211-33.333895-254.167579-62.787368-53.625263-24.144842-99.974737-45.002105-161.28-45.002106-40.448 0-83.590737 23.255579-103.639579 45.16379l-39.747369-36.432842C142.497684 894.787368 199.168 862.315789 258.236632 862.315789c68.392421 0 119.861895 21.288421 172.921263 45.056V673.684211c0-35.166316-17.542737-64.107789-30.639158-80.815158-15.198316 9.835789-32.067368 18.890105-50.741895 26.947368l-21.342316-49.475368C469.800421 509.413053 485.052632 377.317053 485.052632 323.368421V221.642105A597.827368 597.827368 0 0 0 404.210526 215.578947h-26.947368V134.736842c0-12.099368-14.848-26.947368-26.947369-26.947368-9.377684 0-18.836211 0.592842-26.947368 1.347368V269.473684h-53.894737V211.671579c-136.030316 102.912-158.450526 266.886737-161.306947 295.882105 9.135158 9.108211 38.992842 25.061053 71.976421 38.669474l38.103579-59.365053 12.449684-1.589894C321.212632 473.653895 377.263158 392.192 377.263158 323.368421h53.894737c0 88.333474-68.796632 192.242526-180.870737 213.342316l-48.397474 75.398737-20.291368-7.437474C53.894737 557.756632 53.894737 523.317895 53.894737 512c0-50.041263 37.025684-254.733474 215.578947-365.621895V62.490947l22.528-3.745684C293.187368 58.556632 321.482105 53.894737 350.315789 53.894737c41.552842 0 80.842105 39.289263 80.842106 80.842105v27.513263c248.697263 10.563368 592.842105 165.295158 592.842105 484.486737 0 185.451789-131.018105 377.263158-350.315789 377.263158z m-13.473685-323.368421c-36.513684 0-67.368421 49.367579-67.368421 107.789474 0 85.746526 68.096 145.084632 89.465263 161.549473 91.540211-2.533053 164.378947-45.487158 213.827369-107.654737H700.631579v-53.894736h230.238316c8.919579-17.273263 16.357053-35.354947 22.285473-53.894737h-239.885473l-6.467369-17.650527C706.290526 735.582316 692.439579 700.631579 660.210526 700.631579zM485.052632 931.112421c33.926737 14.066526 70.521263 26.597053 114.607157 33.468632C569.424842 928.309895 538.947368 875.223579 538.947368 808.421053c0-90.650947 53.274947-161.684211 121.263158-161.684211 44.759579 0 73.835789 28.779789 88.68379 53.894737h217.007158c2.775579-17.866105 4.203789-35.920842 4.203789-53.894737 0-38.938947-5.658947-74.752-15.925895-107.627789l-126.706526 126.679579-38.103579-38.103579L932.001684 485.052632a367.939368 367.939368 0 0 0-57.775158-81.596632l-154.543158 154.543158-38.103579-38.103579 153.573053-153.573053a537.869474 537.869474 0 0 0-82.593684-56.751158l-140.665263 140.638316-38.103579-38.103579 128.134737-128.134737A794.731789 794.731789 0 0 0 538.947368 231.046737V323.368421c0 50.149053-11.102316 156.698947-95.932631 236.328421 18.378105 23.417263 42.037895 63.407158 42.037895 113.987369v257.42821zM215.578947 431.157895v-53.894737c39.774316 0 53.894737-29.022316 53.894737-53.894737h53.894737c0 53.571368-37.025684 107.789474-107.789474 107.789474z" fill="#231F20" ></path></symbol><symbol id="icon-boar" viewBox="0 0 1024 1024"><path d="M732.079158 377.263158c-107.789474 0-186.421895 31.393684-281.869474 126.841263L180.331789 773.982316C257.724632 807.909053 348.725895 808.421053 485.052632 808.421053h96.013473c55.834947-34.411789 133.551158-53.894737 227.354948-53.894737h121.344L970.105263 680.555789V572.631579c0-94.315789-130.236632-195.368421-238.026105-195.368421z" fill="#FFBDD8" ></path><path d="M808.421053 700.631579v53.894737c-196.446316 0-323.368421 84.641684-323.368421 215.578947h-53.894737c0-163.705263 148.075789-269.473684 377.263158-269.473684z m-323.368421 107.789474v-53.894737c-158.342737 0-245.598316 0-319.649685-49.367579L158.612211 700.631579H80.842105c-21.692632 0-26.624-14.821053-26.947368-26.947368v-82.620632c84.156632-11.183158 161.684211-74.913684 161.68421-186.853053V215.578947H161.684211v161.684211H134.736842c-66.964211 0-134.736842 37.025684-134.736842 107.789474h53.894737c0-42.630737 52.870737-53.894737 80.842105-53.894737h24.629895C147.132632 504.912842 85.153684 538.947368 26.947368 538.947368H0v134.736843c0 32.498526 21.530947 80.842105 80.842105 80.842105h61.682527c32.687158 20.506947 67.125895 33.145263 105.957052 41.013895A232.879158 232.879158 0 0 0 215.578947 916.210526h53.894737c0-41.930105 14.012632-80.303158 39.424-112.505263C358.885053 808.151579 415.959579 808.421053 485.052632 808.421053z m-72.946527-342.420211L323.368421 554.738526V431.157895h-53.894737v253.682526l180.736-180.736-38.103579-38.103579zM323.368421 161.684211h-53.894737v190.032842a769.536 769.536 0 0 1 53.894737-49.098106V161.684211z m323.368421-53.894737c-72.623158 0-146.809263 23.336421-215.578947 58.637473V107.789474h-53.894737v154.138947C458.832842 205.392842 555.331368 161.684211 646.736842 161.684211c148.587789 0 269.473684 120.885895 269.473684 269.473684v235.654737L809.579789 862.315789h61.359158L970.105263 680.555789V431.157895c0-178.310737-145.057684-323.368421-323.368421-323.368421z" fill="#231F20" ></path></symbol><symbol id="icon-boar_hai" viewBox="0 0 1024 1024"><path d="M512 512m-296.421053 0a296.421053 296.421053 0 1 0 592.842106 0 296.421053 296.421053 0 1 0-592.842106 0Z" fill="#85C3DE" ></path><path d="M309.975579 804.756211l-27.136-46.592c103.073684-60.011789 183.026526-132.473263 241.475368-219.24379H350.315789l-13.473684-50.283789c58.88-33.980632 99.435789-117.571368 118.703158-165.295158H242.526316v-53.894737h538.947368v53.894737h-268.18021c-12.395789 34.088421-42.469053 106.603789-90.435369 161.68421h134.009263a680.555789 680.555789 0 0 0 46.349474-107.708631l51.092211 17.057684c-58.421895 175.265684-171.034947 309.490526-344.333474 410.381474z m192.350316-2.937264L467.806316 760.454737c88.414316-73.728 154.516211-158.773895 202.105263-259.907369l48.801684 22.959158a797.372632 797.372632 0 0 1-82.351158 137.781895c32.741053 15.009684 83.456 44.867368 137.647158 101.591579l-38.938947 37.268211c-57.236211-59.877053-109.325474-85.557895-133.766737-95.178106a850.997895 850.997895 0 0 1-98.977684 96.848842z m48.613052-536.872421l-80.842105-53.894737 29.884632-44.840421 80.842105 53.894737-29.884632 44.840421zM512 53.894737C259.395368 53.894737 53.894737 259.395368 53.894737 512s205.500632 458.105263 458.105263 458.105263c9.081263 0 17.973895-0.835368 26.947368-1.374316v-53.894736c-8.946526 0.619789-17.866105 1.374316-26.947368 1.374315-222.881684 0-404.210526-181.328842-404.210526-404.210526S289.118316 107.789474 512 107.789474s404.210526 181.328842 404.210526 404.210526c0 195.206737-139.075368 358.507789-323.368421 396.045474v54.460631c214.096842-38.346105 377.263158-225.549474 377.263158-450.533052C970.105263 259.395368 764.604632 53.894737 512 53.894737z" fill="#231F20" ></path></symbol><symbol id="icon-bilibili1" viewBox="0 0 1129 1024"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75H212.377a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0z m0 0" fill="#20B0E3" ></path><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593z m416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812z m0 0" fill="#20B0E3" ></path></symbol><symbol id="icon-yinle" viewBox="0 0 1024 1024"><path d="M512.2976 0a531.2 531.2 0 0 0-512 548.48V960h128V548.48a398.72 398.72 0 0 1 384-411.52 398.72 398.72 0 0 1 384 411.52V960h128V548.48A531.2 531.2 0 0 0 512.2976 0z" fill="#5c8add" ></path><path d="M64.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path><path d="M704.2976 576l256 0 0 448-256 0 0-448Z" fill="#5c8add" ></path></symbol><symbol id="icon-icon-test-copy" viewBox="0 0 1024 1024"><path d="M512 512m-229.517241 0a229.517241 229.517241 0 1 0 459.034482 0 229.517241 229.517241 0 1 0-459.034482 0Z" fill="#5c8add" ></path><path d="M512 1024A512 512 0 1 1 1024 512 512 512 0 0 1 512 1024z m0-141.241379A370.758621 370.758621 0 1 0 141.241379 512 370.758621 370.758621 0 0 0 512 882.758621z" fill="#5c8add" ></path></symbol><symbol id="icon-V" viewBox="0 0 1024 1024"><path d="M1012.47774251 492.58192592L544.94137566 87.22962963a49.96686561 49.96686561 0 0 0-65.88275132 0L11.63784127 492.6975097c-21.03624691 18.26223633-23.3479224 49.93219048-5.08568606 70.96843739 18.03106878 21.03624691 49.93219048 23.3479224 70.96843738 5.08568607L512 191.83294532l434.71057495 376.91868784c9.47786949 8.20644797 21.26741446 12.25188008 32.82579189 12.13629629 14.10122046 0 27.97127337-5.77918871 38.02706173-17.33756613 18.14665256-20.92066314 15.95056084-52.70620106-5.08568606-70.9684374z" fill="#5c8add" ></path><path d="M109.30613051 567.59579541V896.89396825c0 42.53482892 34.90629982 77.44112875 77.44112875 77.44112875h220.76500882V666.30433862c0-25.54401411 20.92066314-46.46467725 46.46467724-46.46467724h116.16169313c25.54401411 0 46.46467725 20.92066314 46.46467725 46.46467724V974.335097h220.76500882c42.53482892 0 77.44112875-34.90629982 77.44112874-77.44112875l0.11558377-329.29817284L512 218.18604586 109.30613051 567.59579541zM848.00203175 197.49655027h-63.91782716c-12.82979894 0-23.23233862 10.40253968-23.23233863 23.23233862v24.27259259l110.49808818 95.70336508V220.72888889h-0.11558377c0-12.82979894-10.40253968-23.23233862-23.23233862-23.23233862zM905.44716754 83.18419754s-34.90629982 56.86721693-89.11508994 100.32671603c152.68616579 13.98563668 127.83565432-133.26809171 127.83565432-133.2680917-134.07717813-10.28695591-132.92134039 102.29164021-131.072 127.83565432 20.92066314-20.92066314 49.70102293-62.64640564 92.35143562-94.89427865zM798.53217637 174.61096297c-19.64924162-16.52847972-40.56990476-43.45949912-51.203612-53.97762258 0 0 32.94137566 20.57391182 56.40488184 49.3542716 2.42725926-18.37782011 6.47269135-93.3916896-93.16052205-85.3008254 0 0-13.98563668 104.71889947 87.95925221 89.92417638z" fill="#5c8add" ></path></symbol><symbol id="icon-zhifeiji" viewBox="0 0 1167 1024"><path d="M41.201759 463.52493L1110.665064 30.117647c10.32605-4.159104 21.942857 0.860504 26.101961 11.043137 1.434174 3.728852 1.864426 7.744538 1.003921 11.616807L949.033691 978.823529c-2.151261 10.89972-12.764146 17.927171-23.663865 15.632493-2.72493-0.573669-5.306443-1.721008-7.601121-3.298599L634.80624 789.79944l-163.065546 133.951821c-16.492997 13.62465-40.87395 11.186555-54.498599-5.306443-3.011765-3.728852-5.306443-7.887955-6.884034-12.477311l-102.973669-313.080112-265.178712-91.787115c-10.469468-3.585434-16.062745-15.058824-12.333893-25.528291 1.864426-5.44986 6.023529-9.895798 11.329972-12.047059z" fill="#FCFDFC" ></path><path d="M929.385512 1023.569748c-3.155182 0-6.453782-0.286835-9.752381-1.003922-6.740616-1.434174-12.907563-4.015686-18.50084-8.031372L635.953579 825.940616l-146.142297 120.040336c-13.911485 11.473389-31.408403 16.779832-49.335574 15.058824-17.927171-1.721008-34.133333-10.32605-45.463305-24.237535-5.306443-6.453782-9.322129-13.768067-11.903642-21.79944l-98.527731-299.598879-251.697479-87.19776c-12.333894-4.302521-22.229692-13.05098-27.966386-24.811204s-6.453782-24.954622-2.151261-37.288515c4.589356-13.337815 14.771989-23.9507 27.82297-29.257143L1099.908761 3.585434c24.954622-10.039216 53.351261 2.007843 63.533894 26.819048 3.585434 8.891877 4.445938 18.644258 2.581513 28.109804L977.143495 984.560224c-4.732773 23.090196-25.098039 39.009524-47.757983 39.009524z m-294.579272-233.770308l282.962465 201.357983c2.294678 1.577591 4.87619 2.72493 7.601121 3.298599 10.89972 2.151261 21.512605-4.87619 23.663865-15.632493L1137.914364 52.777591c0.860504-3.872269 0.430252-7.887955-1.003922-11.616807-4.159104-10.32605-15.919328-15.202241-26.101961-11.043137L41.201759 463.52493c-5.306443 2.151261-9.465546 6.597199-11.47339 12.047059-1.721008 5.019608-1.434174 10.469468 0.860505 15.345658 2.294678 4.87619 6.453782 8.461625 11.473389 10.182633l265.178711 91.787115L410.214644 905.967507c1.434174 4.589356 3.872269 8.748459 6.884033 12.477311 6.597199 8.031373 15.919328 12.907563 26.101961 13.911485 10.32605 1.003922 20.365266-2.007843 28.396639-8.605042l163.208963-133.951821z" fill="#4A4A4A" ></path><path d="M307.097557 592.743978l105.698599 316.091876c6.310364 18.787675 26.532213 28.970308 45.319888 22.659944 4.159104-1.434174 7.887955-3.442017 11.186555-6.166946l164.786555-133.951821-165.360224-118.892997c297.017367-287.982073 447.462185-433.980952 451.191036-437.853222 0.573669-0.573669 2.581513-3.442017 0.430252-7.027451-1.290756-1.577591-3.298599-3.298599-7.027451-2.15126-202.218487 120.327171-404.293557 242.805602-606.22521 367.291877z" fill="#CAE0EE" ></path><path d="M446.786072 934.794398c-5.736695 0-11.329972-1.290756-16.636414-3.872269-8.891877-4.445938-15.632493-12.047059-18.787675-21.512605L305.376549 592.313725l1.003921-0.573669C507.308201 467.684034 711.391114 344.058263 912.60568 224.161345l0.286835-0.143418c3.585434-1.147339 6.310364-0.286835 8.605042 2.581513l0.143417 0.143417c2.438095 4.015686 0.573669 7.457703-0.573669 8.74846-3.872269 4.015686-155.177591 150.87507-450.043698 436.705882l165.503642 119.036414-166.220728 135.09916c-3.442017 2.868347-7.457703 5.019608-11.760225 6.453782-3.728852 1.290756-7.744538 2.007843-11.760224 2.007843z m-137.967507-341.333334l105.268348 314.944538c2.868347 8.748459 9.035294 15.77591 17.210084 19.935014 8.17479 4.159104 17.496919 4.732773 26.245378 1.864426 3.872269-1.290756 7.60112-3.298599 10.756302-5.880112l163.352381-132.804482L466.434252 672.627451l1.290756-1.147339C763.308201 384.932213 915.043775 237.642577 918.772627 233.626891c0 0 2.007843-2.294678 0.286835-5.306443-1.003922-1.290756-2.438095-2.438095-5.306443-1.577591-200.784314 119.610084-404.293557 242.94902-604.934454 366.718207z" fill="#CAE0EE" ></path><path d="M460.840974 924.898599l7.457703-253.561904 165.933894 119.896918-168.658824 135.959664c-1.290756 1.003922-3.011765 0.860504-4.015686-0.430252-0.430252-0.430252-0.717087-1.147339-0.717087-1.864426z" fill="#94C3E2" ></path><path d="M463.709322 929.344538c-1.290756 0-2.438095-0.573669-3.2986-1.577591-0.573669-0.860504-1.003922-1.864426-1.003921-2.868348l7.60112-256.286834 169.519328 122.621848-1.434174 1.147339-168.658823 135.959664c-0.860504 0.717087-1.721008 1.003922-2.72493 1.003922z m6.023529-255.282913l-7.457703 250.836974c0 0.286835 0.143417 0.717087 0.286835 1.003922 0.430252 0.573669 1.434174 0.717087 2.007843 0.286835l167.22465-134.812325-162.061625-117.315406z" fill="#94C3E2" ></path></symbol><symbol id="icon-lianjie" viewBox="0 0 1079 1024"><path d="M695.355535 432.666896c-0.553495-1.10699-0.885592-2.186305-1.383737-3.265619-0.193723-0.193723-0.193723-0.359772-0.359771-0.719543-12.508983-26.318678-39.436506-43.366319-69.325226-41.013966-39.076734 3.265619-68.439634 39.021384-65.312388 79.841627 0.857917 10.516401 3.653066 20.147211 7.998 28.83708 19.78744 46.659613 11.097571 103.448181-25.377737 141.750022l-191.094085 199.950001a118.088119 118.088119 0 0 1-171.998513 0c-47.434506-49.537786-47.434506-130.098956 0-179.636742l71.234782-74.389703-0.52582-0.553494a75.911814 75.911814 0 0 0 24.326097-61.880721c-3.127246-40.820243-37.3609-71.51153-76.437634-68.24591a69.463599 69.463599 0 0 0-46.908685 23.966325l-0.166049-0.193723-72.618519 75.856464c-103.226783 107.793115-103.226783 282.36538 0 390.158495 103.171433 107.793115 270.299193 107.793115 373.498301 0l191.619904-200.1714c80.256748-83.992838 97.636485-208.307773 52.83108-310.289193z" fill="#5c8add" ></path><path d="M1002.047012 80.865592c-103.226783-107.82079-270.382217-107.82079-373.581325 0l-191.619905 200.199075c-80.284423 83.854464-97.66416 208.197074-52.997128 310.233843 0.52582 1.079315 0.857917 2.15863 1.383737 3.26562 0.166048 0.166048 0.166048 0.359772 0.332097 0.719543 12.536658 26.291004 39.46418 43.366319 69.3529 41.013966 39.076734-3.265619 68.439634-39.021384 65.312388-79.869302a78.679288 78.679288 0 0 0-7.998-28.864755c-19.78744-46.631938-11.097571-103.448181 25.377737-141.750022l191.287808-199.839302a118.088119 118.088119 0 0 1 172.026188 0c47.434506 49.537786 47.434506 130.126631 0 179.692091l-71.234782 74.417378 0.52582 0.553495a75.939489 75.939489 0 0 0-24.353772 61.88072c3.15492 40.847917 37.3609 71.51153 76.465309 68.245911a69.463599 69.463599 0 0 0 46.908685-23.938651l0.166049 0.166048 72.646194-75.856464c103.03306-107.82079 103.03306-282.642127 0-390.269194z" fill="#5c8add" ></path></symbol><symbol id="icon-liaotian" viewBox="0 0 1171 1024"><path d="M1068.71699 0.243751H102.193768C46.228437 0.243751 0.500666 45.045267 0.500666 99.74309v696.251622c0 54.697824 45.727771 99.450589 101.693102 99.450589h329.113198l120.851966 114.465677a48.652788 48.652788 0 0 0 66.641644 0l120.851966-114.465677h329.064448c55.965331 0 101.741852-44.752765 101.741852-99.450589V99.74309C1170.458842 45.045267 1124.682321 0.243751 1068.71699 0.243751z m-439.776354 596.849784h-370.989696c-27.933915 0-50.846551-22.425133-50.846551-49.774045 0-27.348912 22.912636-49.725294 50.846551-49.725294h370.989696c27.933915 0 50.846551 22.376382 50.846551 49.725294 0 27.348912-22.912636 49.774045-50.846551 49.774045z m287.18795-211.381252H254.782171a50.456549 50.456549 0 0 1-50.846551-49.725294c0-27.397662 22.912636-49.774045 50.846551-49.774045h661.346415c27.933915 0 50.846551 22.376382 50.846551 49.774045 0 27.348912-22.912636 49.725294-50.846551 49.725294z" fill="#5C8ADD" ></path></symbol><symbol id="icon-xinfeng" viewBox="0 0 1400 1024"><path d="M1301.63733163 214.78520234a207.81921797 207.81921797 0 0 1 7.02423018 52.42036465v489.73590176a205.10753818 205.10753818 0 0 1-205.05853125 205.05853125H283.05853124A205.15654424 205.15654424 0 0 1 77.99999999 756.79444971V267.20556699a201.36672685 201.36672685 0 0 1 7.02423106-52.42036465L586.24393329 562.1905874c69.44187217 51.96297217 146.36536612 49.13694404 214.1736961 0zM1103.60303056 62.0000167H283.05853124A204.50312753 204.50312753 0 0 0 106.37462518 163.41030547l489.71956641 335.75823018c62.43397646 50.77048623 127.85733457 50.31309463 194.62019765 0L1280.28693749 163.41030547A204.68281729 204.68281729 0 0 0 1103.60303056 62.0000167z m0 0" fill="#5c8add" ></path></symbol><symbol id="icon-QQ1" viewBox="0 0 1024 1024"><path d="M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z" fill="#18ACFC" ></path><path d="M500.113 228.39c118.396-1.518 178.924 61.004 201 156 3.497 15.048 0.15 34.807 0 50 27.143 5.682 33.087 60.106 10 75v1h1c8.26 14.33 19.04 28.125 26 44 7.332 16.723 9.306 35.16 14 55 4.024 17.01-2.287 51.505-10 57-0.771 0.683-2.231 1.312-3 2-14.601-3.016-30.377-16.865-38-27-3.065-4.074-5.275-9.672-10-12-0.395 21.568-12.503 41.15-22 55-3.514 5.123-14.073 13.217-14 18 3.691 2.836 8.305 2.956 13 5 10.513 4.577 25.449 13.168 32 22 2.334 3.146 5.548 7.555 7 11 16.193 38.414-36.527 48.314-63 54-27.185 5.839-77.818-10.224-92-19-8.749-5.414-16.863-18.573-29-19-3.666 2.389-14.438 1.132-20 1-16.829 32.804-101.913 47.868-148 31-14.061-5.146-43.398-17.695-38-40 4.437-18.327 19.947-29.224 35-37 5.759-2.975 18.915-4.419 22-10-13.141-8.988-24.521-28.659-31-44-3.412-8.077-4.193-25.775-9-32-7.789 12.245-32.097 36.91-52 33-3.071-4.553-7.213-9.097-9-15-4.792-15.835-1.81-40.379 2-54 8.117-29.02 16.965-50.623 32-72 4.672-6.643 11.425-12.135 16-19-8.945-9.733-6.951-37.536-1-49 4.002-7.709 9.701-7.413 10-20-1.92-3.022-0.071-8.604-1-13-4.383-20.75 3.273-47.552 9-63 19.8-53.421 53.712-90.466 105-112 11.986-5.033 25.833-7.783 39-11 5.322-1.3 11.969 0.518 16-2z" fill="#FFFFFF" ></path></symbol><symbol id="icon-rss" viewBox="0 0 1024 1024"><path d="M749.61196492 908.06119793C749.61196492 560.41848146 463.58151854 274.36328126 115.93880207 274.36328126V115.93880207c434.50388795 0 792.12239584 357.61850789 792.12239586 792.12239586zM224.55858562 690.72261555a108.91682943 108.91682943 0 0 1 108.69404499 108.74355267C333.25263061 859.29616292 284.24005737 908.06119793 224.31104736 908.06119793 164.48105265 908.06119793 115.96355592 859.41993206 115.96355592 799.46616822s48.69077351-108.71879883 108.61978351-108.74355267zM641.01693522 908.06119793h-153.96879069c0-203.60020956-167.50913289-371.13409627-371.10934246-371.13409629v-153.96879068c288.03550619 0 525.07813313 237.11688843 525.07813315 525.10288697z" fill="#FFA500" ></path></symbol><symbol id="icon-youxiang" viewBox="0 0 1024 1024"><path d="M583.60666667 972h-68.08c-8.43333333 0-15.33333333-6.9-15.33333334-15.33333333V609.52c0-8.43333333 6.9-15.33333333 15.33333334-15.33333333h68.08c8.43333333 0 15.33333333 6.9 15.33333333 15.33333333V956.66666667c0 8.43333333-6.9 15.33333333-15.33333333 15.33333333z" fill="#629FF9" ></path><path d="M294.42 167c-113.62 0-205.77333333 92-205.77333333 205.31333333v336.72h411.39333333V372.31333333c0.15333333-113.31333333-92-205.31333333-205.62-205.31333333z" fill="#2166CC" ></path><path d="M519.97333333 627H216.98666667c-25.45333333 0-46-20.54666667-46-46V393.78c0-25.45333333 20.54666667-46 46-46h302.98666666c25.45333333 0 46 20.54666667 46 46V581c0 25.45333333-20.54666667 46-46 46z" fill="#D2E4FF" ></path><path d="M565.97333333 397a49.22 49.22 0 0 0-49.37333333-49.22H220.36c-27.29333333 0-49.37333333 22.08-49.37333333 49.22v10.27333333l179.4 94.60666667c11.34666667 5.98 24.84 5.98 36.18666666 0l179.4-94.60666667v-10.27333333z" fill="#FFFFFF" ></path><path d="M730.5 167h-427.8v0.46c109.78666667 4.29333333 197.49333333 94.3 197.49333333 205.00666667v336.72h411.39333334c27.29333333 0 49.37333333-22.08 49.37333333-49.22V397c0-126.96-103.19333333-230-230.46-230z" fill="#4E8DF6" ></path><path d="M845.80666667 52H681.12666667c-9.04666667 0-16.40666667 7.36-16.40666667 16.40666667v336.72a24.67133333 24.67133333 0 1 0 49.37333333 0V134.18666667h131.71333334c9.04666667 0 16.40666667-7.36 16.40666666-16.40666667V68.40666667c0-9.04666667-7.36-16.40666667-16.40666666-16.40666667z" fill="#2166CC" ></path><path d="M896.25333333 659.81333333h-35.11333333c-8.43333333 0-15.33333333-6.9-15.33333333-15.33333333v-35.11333333c0-8.43333333 6.9-15.33333333 15.33333333-15.33333334h35.11333333c8.43333333 0 15.33333333 6.9 15.33333334 15.33333334v35.11333333c0 8.58666667-6.9 15.33333333-15.33333334 15.33333333z" fill="#FFFFFF" ></path><path d="M88.8 709.18666667l-24.22666667 131.40666666c-9.66 54.43333333 26.83333333 98.59333333 81.26666667 98.59333334h213.9c54.58666667 0 106.56666667-44.16 116.22666667-98.59333334l23.15333333-131.40666666H88.8z" fill="#2974CE" ></path></symbol><symbol id="icon-gitHub" viewBox="0 0 1049 1024"><path d="M523.6581816 52C262.83923907 52 52 262.8401375 52 523.6581816c0 208.49703047 135.09433812 384.97758117 322.50789391 447.44906532 23.42658172 4.68531653 32.01647887-10.15136894 32.01647796-22.64584583 0-10.93210574-0.78163433-48.41463703-0.78163433-87.45953855-131.18885996 28.11189824-158.5200223-56.22379738-158.52002231-56.22379739-21.08437312-54.66232469-52.3201152-68.71827336-52.3201152-68.71827335-42.94858371-28.89353348 3.12384382-28.89353348 3.12384384-28.89353348 47.63479867 3.12384382 72.62285398 48.41643391 72.62285398 48.4164339 42.16784782 71.84121875 110.10538527 51.53758242 137.43654672 39.04400399 3.90457972-30.45500618 16.3990566-51.5393793 29.67427028-63.25222094-104.64023039-10.93300418-214.74561566-51.53848086-214.74561657-232.70524742 0-51.53848086 18.74126609-93.70632867 48.4164339-126.50444187-4.68621496-11.71284164-21.08527156-60.12837711 4.6844181-124.94207075 0 0 39.82563922-12.49447688 129.62738726 48.41463704 37.48253129-10.15136894 78.08980484-15.61742227 117.91454562-15.61742137s80.43201433 5.46605242 117.91454473 15.61742137c89.80264648-60.90911391 129.62828571-48.41463703 129.62828571-48.41463704 25.76879122 64.81369363 9.37063305 113.22922911 4.68531651 124.94207075 30.45410773 32.79721477 48.41463703 74.96506258 48.41463703 126.50444187 0 181.16676656-110.10538527 220.99150644-215.52545401 232.70524742 17.1797934 14.83668547 32.01647887 42.94858371 32.01647886 87.45953946 0 63.25222094-0.78163433 114.009965-0.78163523 129.62738636 0 12.49447688 8.59079468 27.33116234 32.01737731 22.64584583 187.41265734-62.4705866 322.50699547-238.95203574 322.50699546-447.44996375C995.31636231 262.8401375 783.69369203 52 523.6581816 52z" fill="#663399" ></path><path d="M230.82365863 729.03136735c-0.7807359 2.34310703-4.68531653 3.12384382-7.80916035 1.56237113s-5.46605242-4.68531653-3.90368129-7.02842356c0.7807359-2.34220859 4.68531653-3.12384382 7.80826192-1.56147269s4.68531653 4.68531653 3.90457972 7.02752512z m18.7412661 21.08437312c-2.34220859 2.34220859-7.02752512 0.78163433-9.37063305-2.34310703-3.12294539-3.12294539-3.90457972-7.80826192-1.5614727-10.15136894 2.34220859-2.34220859 6.24678922-0.7807359 9.37063305 2.34310702 3.12384382 3.90457972 3.90457972 8.58899782 1.5614727 10.15136895zM268.30618992 777.44690281c-3.12294539 2.34220859-7.80826192 0-10.15136895-3.90457972-3.12384382-3.90457972-3.12384382-9.37063305 0-10.93210574 3.12384382-2.34310703 7.80916035 0 10.15226739 3.90457972 3.12294539 3.90368129 3.12294539 8.58899782 0 10.93210574z m25.76968965 26.55042555c-2.34220859 3.12294539-7.80916035 2.34220859-12.49447688-1.56237113-3.90457972-3.90368129-5.46605242-9.37063305-2.34220859-11.71284164 2.34220859-3.12384382 7.80826192-2.34310703 12.49447687 1.56147269 3.90368129 3.12384382 4.68531653 8.58989625 2.3422086 11.71374008z m35.1403227 14.83668637c-0.78163433 3.90457972-6.24768766 5.46605242-11.71374008 3.90457972-5.46605242-1.5614727-8.58899782-6.24768766-7.80916036-9.37063305 0.78163433-3.90457972 6.24768766-5.46605242 11.71374009-3.90457972 5.46605242 1.5614727 8.58899782 5.46605242 7.80916035 9.37063305z m38.26416562 3.12384382c0 3.90457972-4.68621496 7.02752512-10.15226738 7.02752512-5.46605242 0-10.15226738-3.12294539-10.15226739-7.02752512s4.68621496-7.02842356 10.15226739-7.02842445c5.46605242 0 10.15226738 3.12384382 10.15226738 7.02842445z m35.92016106-6.24768766c0.78163433 3.90457972-3.12384382 7.80916035-8.58899872 8.58989625-5.46695086 0.78163433-10.15226738-1.5614727-10.93390172-5.46605241-0.77983747-3.90457972 3.12384382-7.80916035 8.5907947-8.58899872 5.46605242-0.78163433 10.15136894 1.56057426 10.93210574 5.46515488z m0 0" fill="#663399" ></path></symbol><symbol id="icon-bilibili" viewBox="0 0 1024 1024"><path d="M832.61667555 181.33447111h-164.32545185l74.45617778-74.45617778c12.84020148-12.84020148 12.84020148-30.8140563 0-43.65425778-12.84020148-12.84020148-30.8140563-12.84020148-43.65425778 0L573.2882963 189.04101925H450.04420741L324.2272237 63.23617185c-10.26730667-12.84020148-25.68040297-15.40096-41.08136295-7.70654815-2.57289482 0-2.57289482 2.57289482-5.13365334 5.13365333-12.84020148 12.84020148-12.84020148 30.8140563 0 43.65425779l77.02907259 77.02907259h-164.32545185c-89.86927408 0-164.32545185 74.45617778-164.32545185 164.32545184v408.24073483c0 87.29637925 74.45617778 161.75255703 164.32545185 161.75255703h25.68040296c0 30.8140563 25.68040297 53.92156445 53.92156444 53.92156444s53.92156445-25.68040297 53.92156445-53.92156444H704.23893333c2.57289482 30.8140563 28.24116148 53.92156445 59.05521778 51.34866964 28.24116148-2.57289482 48.78791111-23.10750815 51.34866964-51.34866964h20.53461333c89.86927408 0 164.32545185-74.45617778 164.32545184-164.32545186V343.09916445c-2.56075852-89.86927408-77.02907259-161.76469333-166.88621037-161.76469334z m-5.13365333 634.19429926H200.99527111c-33.37481482 0-59.05521778-28.24116148-61.61597629-61.61597629l-2.57289482-415.94728297c0-33.37481482 28.24116148-61.6159763 61.6159763-61.61597629h626.48775111c33.37481482 0 59.05521778 28.24116148 61.61597629 61.61597629l2.57289482 415.94728297c-2.57289482 35.93557333-28.24116148 61.6159763-61.6159763 61.61597629z" fill="#ff7299" ></path><path d="M403.82919111 417.55534222l15.40096 77.0290726-205.40681481 38.50846815-15.40096-77.0290726 205.40681481-38.50846815z m197.70026667 77.0290726l15.40096-77.0290726 205.40681481 38.50846815-15.40096 77.0290726-205.40681481-38.50846815z m41.08136297 161.75255703c0 2.57289482 0 7.70654815-2.57289483 10.26730667-12.84020148 28.24116148-41.08136297 46.2150163-74.45617777 48.78791111-20.53461333 0-41.08136297-10.26730667-53.92156445-25.68040296-15.40096 15.40096-33.37481482 25.68040297-53.92156445 25.68040296-30.8140563-2.57289482-59.05521778-20.53461333-74.45617777-48.78791111 0-2.57289482-2.57289482-5.13365333-2.57289481-10.26730667 0-10.26730667 7.70654815-17.97385482 17.97385481-20.53461333h2.57289482c7.70654815 0 12.84020148 2.57289482 15.40096 10.26730666 0 0 20.53461333 28.24116148 38.50846815 28.24116149 35.94770963 0 35.94770963-30.8140563 56.48232296-53.92156445 23.10750815 25.68040297 23.10750815 53.92156445 56.48232296 53.92156445 23.10750815 0 38.50846815-28.24116148 38.50846815-28.24116149 2.57289482-5.13365333 10.26730667-10.26730667 15.40096-10.26730666 10.26730667-2.57289482 17.97385482 5.13365333 20.53461333 15.40096v5.13365333h0.0364089z" fill="#ff7299" ></path></symbol></svg>',o=(o=document.getElementsByTagName("script"))[o.length-1].getAttribute("data-injectcss"),p=function(c,l){l.parentNode.insertBefore(c,l)};if(o&&!c.__iconfont__svg__cssinject__){c.__iconfont__svg__cssinject__=!0;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}</style>")}catch(c){console&&console.log(c)}}function d(){i||(i=!0,a())}function m(){try{t.documentElement.doScroll("left")}catch(c){return void setTimeout(m,50)}d()}l=function(){var c,l=document.createElement("div");l.innerHTML=v,v=null,(l=l.getElementsByTagName("svg")[0])&&(l.setAttribute("aria-hidden","true"),l.style.position="absolute",l.style.width=0,l.style.height=0,l.style.overflow="hidden",l=l,(c=document.body).firstChild?p(l,c.firstChild):c.appendChild(l))},document.addEventListener?~["complete","loaded","interactive"].indexOf(document.readyState)?setTimeout(l,0):(h=function(){document.removeEventListener("DOMContentLoaded",h,!1),l()},document.addEventListener("DOMContentLoaded",h,!1)):document.attachEvent&&(a=l,t=c.document,i=!1,m(),t.onreadystatechange=function(){"complete"==t.readyState&&(t.onreadystatechange=null,d())})}(window);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
